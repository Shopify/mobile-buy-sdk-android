// Generated from graphql_java_gen gem

package com.shopify.buy3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.shopify.graphql.support.AbstractResponse;
import com.shopify.graphql.support.Arguments;
import com.shopify.graphql.support.Directive;
import com.shopify.graphql.support.Error;
import com.shopify.graphql.support.Query;
import com.shopify.graphql.support.SchemaViolationError;
import com.shopify.graphql.support.TopLevelResponse;
import com.shopify.graphql.support.Input;

import com.shopify.graphql.support.ID;

import java.math.BigDecimal;

import org.joda.time.DateTime;

import java.io.Serializable;
import java.util.*;

public class Storefront {
    public static final String API_VERSION = "2024-07";

    public static QueryRootQuery query(QueryRootQueryDefinition queryDef) {
        return query(Collections.emptyList(), queryDef);
    }

    public static QueryRootQuery query(List<Directive> directives, QueryRootQueryDefinition queryDef) {
        StringBuilder queryString = new StringBuilder("query");
        for (Directive directive : directives) {
            queryString.append(" " + directive.toString());
        }
        queryString.append(" {");
        QueryRootQuery query = new QueryRootQuery(queryString);
        queryDef.define(query);
        queryString.append('}');
        return query;
    }

    public static class QueryResponse {
        private TopLevelResponse response;
        private QueryRoot data;

        public QueryResponse(TopLevelResponse response) throws SchemaViolationError {
            this.response = response;
            this.data = response.getData() != null ? new QueryRoot(response.getData()) : null;
        }

        public QueryRoot getData() {
            return data;
        }

        public List<Error> getErrors() {
            return response.getErrors();
        }

        public String toJson() {
            return new Gson().toJson(response);
        }

        public String prettyPrintJson() {
            final Gson gson = new GsonBuilder().setPrettyPrinting().create();
            return gson.toJson(response);
        }

        public static QueryResponse fromJson(String json) throws SchemaViolationError {
            final TopLevelResponse response = new Gson().fromJson(json, TopLevelResponse.class);
            return new QueryResponse(response);
        }
    }

    public static MutationQuery mutation(MutationQueryDefinition queryDef) {
        return mutation(Collections.emptyList(), queryDef);
    }

    public static MutationQuery mutation(List<Directive> directives, MutationQueryDefinition queryDef) {
        StringBuilder queryString = new StringBuilder("mutation");
        for (Directive directive : directives) {
            queryString.append(" " + directive.toString());
        }
        queryString.append(" {");
        MutationQuery query = new MutationQuery(queryString);
        queryDef.define(query);
        queryString.append('}');
        return query;
    }

    public static class MutationResponse {
        private TopLevelResponse response;
        private Mutation data;

        public MutationResponse(TopLevelResponse response) throws SchemaViolationError {
            this.response = response;
            this.data = response.getData() != null ? new Mutation(response.getData()) : null;
        }

        public Mutation getData() {
            return data;
        }

        public List<Error> getErrors() {
            return response.getErrors();
        }

        public String toJson() {
            return new Gson().toJson(response);
        }

        public String prettyPrintJson() {
            final Gson gson = new GsonBuilder().setPrettyPrinting().create();
            return gson.toJson(response);
        }

        public static MutationResponse fromJson(String json) throws SchemaViolationError {
            final TopLevelResponse response = new Gson().fromJson(json, TopLevelResponse.class);
            return new MutationResponse(response);
        }
    }

    /**
    * Contextualizes data based on the additional information provided by the directive. For example, you
    * can use the `@inContext(country: CA)` directive to [query a product's
    * price](https://shopify.dev/custom-storefronts/internationalization/international-pricing) in a
    * storefront within the context of Canada.
    */
    public static class InContextDirective extends Directive {
        public CountryCode country;

        public LanguageCode language;

        public ID preferredLocationId;

        public BuyerInput buyer;

        public InContextDirective() {
            super("inContext");
        }

        @Override
        public String toString() {
            StringBuilder _queryBuilder = new StringBuilder(super.toString());
            _queryBuilder.append("(");

            if (country != null) {
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (language != null) {
                _queryBuilder.append(", ");
                _queryBuilder.append("language:");
                _queryBuilder.append(language.toString());
            }

            if (preferredLocationId != null) {
                _queryBuilder.append(", ");
                _queryBuilder.append("preferredLocationId:");
                Query.appendQuotedString(_queryBuilder, preferredLocationId.toString());
            }

            if (buyer != null) {
                _queryBuilder.append(", ");
                _queryBuilder.append("buyer:");
                buyer.appendTo(_queryBuilder);
            }

            _queryBuilder.append(")");
            return _queryBuilder.toString();
        }
    }

    public interface ApiVersionQueryDefinition {
        void define(ApiVersionQuery _queryBuilder);
    }

    /**
    * A version of the API, as defined by [Shopify API
    * versioning](https://shopify.dev/api/usage/versioning).
    * Versions are commonly referred to by their handle (for example, `2021-10`).
    */
    public static class ApiVersionQuery extends Query<ApiVersionQuery> {
        ApiVersionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The human-readable name of the version.
        */
        public ApiVersionQuery displayName() {
            startField("displayName");

            return this;
        }

        /**
        * The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or
        * `unstable` handle.
        */
        public ApiVersionQuery handle() {
            startField("handle");

            return this;
        }

        /**
        * Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be
        * stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that
        * are marked as unsupported. For more information, refer to
        * [Versioning](https://shopify.dev/api/usage/versioning).
        */
        public ApiVersionQuery supported() {
            startField("supported");

            return this;
        }
    }

    /**
    * A version of the API, as defined by [Shopify API
    * versioning](https://shopify.dev/api/usage/versioning).
    * Versions are commonly referred to by their handle (for example, `2021-10`).
    */
    public static class ApiVersion extends AbstractResponse<ApiVersion> {
        public ApiVersion() {
        }

        public ApiVersion(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "displayName": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "supported": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ApiVersion";
        }

        /**
        * The human-readable name of the version.
        */

        public String getDisplayName() {
            return (String) get("displayName");
        }

        public ApiVersion setDisplayName(String arg) {
            optimisticData.put(getKey("displayName"), arg);
            return this;
        }

        /**
        * The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or
        * `unstable` handle.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public ApiVersion setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be
        * stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that
        * are marked as unsupported. For more information, refer to
        * [Versioning](https://shopify.dev/api/usage/versioning).
        */

        public Boolean getSupported() {
            return (Boolean) get("supported");
        }

        public ApiVersion setSupported(Boolean arg) {
            optimisticData.put(getKey("supported"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "displayName": return false;

                case "handle": return false;

                case "supported": return false;

                default: return false;
            }
        }
    }

    public static class ApplePayWalletContentInput implements Serializable {
        private MailingAddressInput billingAddress;

        private String data;

        private ApplePayWalletHeaderInput header;

        private String signature;

        private String version;

        private Input<String> lastDigits = Input.undefined();

        public ApplePayWalletContentInput(MailingAddressInput billingAddress, String data, ApplePayWalletHeaderInput header, String signature, String version) {
            this.billingAddress = billingAddress;

            this.data = data;

            this.header = header;

            this.signature = signature;

            this.version = version;
        }

        public MailingAddressInput getBillingAddress() {
            return billingAddress;
        }

        public ApplePayWalletContentInput setBillingAddress(MailingAddressInput billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public String getData() {
            return data;
        }

        public ApplePayWalletContentInput setData(String data) {
            this.data = data;
            return this;
        }

        public ApplePayWalletHeaderInput getHeader() {
            return header;
        }

        public ApplePayWalletContentInput setHeader(ApplePayWalletHeaderInput header) {
            this.header = header;
            return this;
        }

        public String getSignature() {
            return signature;
        }

        public ApplePayWalletContentInput setSignature(String signature) {
            this.signature = signature;
            return this;
        }

        public String getVersion() {
            return version;
        }

        public ApplePayWalletContentInput setVersion(String version) {
            this.version = version;
            return this;
        }

        public String getLastDigits() {
            return lastDigits.getValue();
        }

        public Input<String> getLastDigitsInput() {
            return lastDigits;
        }

        public ApplePayWalletContentInput setLastDigits(String lastDigits) {
            this.lastDigits = Input.optional(lastDigits);
            return this;
        }

        public ApplePayWalletContentInput setLastDigitsInput(Input<String> lastDigits) {
            if (lastDigits == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.lastDigits = lastDigits;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("billingAddress:");
            billingAddress.appendTo(_queryBuilder);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            Query.appendQuotedString(_queryBuilder, data.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("header:");
            header.appendTo(_queryBuilder);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("signature:");
            Query.appendQuotedString(_queryBuilder, signature.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("version:");
            Query.appendQuotedString(_queryBuilder, version.toString());

            if (this.lastDigits.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("lastDigits:");
                if (lastDigits.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, lastDigits.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public static class ApplePayWalletHeaderInput implements Serializable {
        private String ephemeralPublicKey;

        private String publicKeyHash;

        private String transactionId;

        private Input<String> applicationData = Input.undefined();

        public ApplePayWalletHeaderInput(String ephemeralPublicKey, String publicKeyHash, String transactionId) {
            this.ephemeralPublicKey = ephemeralPublicKey;

            this.publicKeyHash = publicKeyHash;

            this.transactionId = transactionId;
        }

        public String getEphemeralPublicKey() {
            return ephemeralPublicKey;
        }

        public ApplePayWalletHeaderInput setEphemeralPublicKey(String ephemeralPublicKey) {
            this.ephemeralPublicKey = ephemeralPublicKey;
            return this;
        }

        public String getPublicKeyHash() {
            return publicKeyHash;
        }

        public ApplePayWalletHeaderInput setPublicKeyHash(String publicKeyHash) {
            this.publicKeyHash = publicKeyHash;
            return this;
        }

        public String getTransactionId() {
            return transactionId;
        }

        public ApplePayWalletHeaderInput setTransactionId(String transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        public String getApplicationData() {
            return applicationData.getValue();
        }

        public Input<String> getApplicationDataInput() {
            return applicationData;
        }

        public ApplePayWalletHeaderInput setApplicationData(String applicationData) {
            this.applicationData = Input.optional(applicationData);
            return this;
        }

        public ApplePayWalletHeaderInput setApplicationDataInput(Input<String> applicationData) {
            if (applicationData == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.applicationData = applicationData;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("ephemeralPublicKey:");
            Query.appendQuotedString(_queryBuilder, ephemeralPublicKey.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("publicKeyHash:");
            Query.appendQuotedString(_queryBuilder, publicKeyHash.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("transactionId:");
            Query.appendQuotedString(_queryBuilder, transactionId.toString());

            if (this.applicationData.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("applicationData:");
                if (applicationData.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, applicationData.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface AppliedGiftCardQueryDefinition {
        void define(AppliedGiftCardQuery _queryBuilder);
    }

    /**
    * Details about the gift card used on the checkout.
    */
    public static class AppliedGiftCardQuery extends Query<AppliedGiftCardQuery> {
        AppliedGiftCardQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The amount that was taken from the gift card by applying it.
        */
        public AppliedGiftCardQuery amountUsed(MoneyV2QueryDefinition queryDef) {
            startField("amountUsed");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The amount that was taken from the gift card by applying it.
        *
        * @deprecated Use `amountUsed` instead.
        */
        @Deprecated
        public AppliedGiftCardQuery amountUsedV2(MoneyV2QueryDefinition queryDef) {
            startField("amountUsedV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The amount left on the gift card.
        */
        public AppliedGiftCardQuery balance(MoneyV2QueryDefinition queryDef) {
            startField("balance");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The amount left on the gift card.
        *
        * @deprecated Use `balance` instead.
        */
        @Deprecated
        public AppliedGiftCardQuery balanceV2(MoneyV2QueryDefinition queryDef) {
            startField("balanceV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The last characters of the gift card.
        */
        public AppliedGiftCardQuery lastCharacters() {
            startField("lastCharacters");

            return this;
        }

        /**
        * The amount that was applied to the checkout in its currency.
        */
        public AppliedGiftCardQuery presentmentAmountUsed(MoneyV2QueryDefinition queryDef) {
            startField("presentmentAmountUsed");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Details about the gift card used on the checkout.
    */
    public static class AppliedGiftCard extends AbstractResponse<AppliedGiftCard> implements Node {
        public AppliedGiftCard() {
        }

        public AppliedGiftCard(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "amountUsed": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "amountUsedV2": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "balance": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "balanceV2": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "lastCharacters": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "presentmentAmountUsed": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public AppliedGiftCard(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "AppliedGiftCard";
        }

        /**
        * The amount that was taken from the gift card by applying it.
        */

        public MoneyV2 getAmountUsed() {
            return (MoneyV2) get("amountUsed");
        }

        public AppliedGiftCard setAmountUsed(MoneyV2 arg) {
            optimisticData.put(getKey("amountUsed"), arg);
            return this;
        }

        /**
        * The amount that was taken from the gift card by applying it.
        *
        * @deprecated Use `amountUsed` instead.
        */

        public MoneyV2 getAmountUsedV2() {
            return (MoneyV2) get("amountUsedV2");
        }

        public AppliedGiftCard setAmountUsedV2(MoneyV2 arg) {
            optimisticData.put(getKey("amountUsedV2"), arg);
            return this;
        }

        /**
        * The amount left on the gift card.
        */

        public MoneyV2 getBalance() {
            return (MoneyV2) get("balance");
        }

        public AppliedGiftCard setBalance(MoneyV2 arg) {
            optimisticData.put(getKey("balance"), arg);
            return this;
        }

        /**
        * The amount left on the gift card.
        *
        * @deprecated Use `balance` instead.
        */

        public MoneyV2 getBalanceV2() {
            return (MoneyV2) get("balanceV2");
        }

        public AppliedGiftCard setBalanceV2(MoneyV2 arg) {
            optimisticData.put(getKey("balanceV2"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The last characters of the gift card.
        */

        public String getLastCharacters() {
            return (String) get("lastCharacters");
        }

        public AppliedGiftCard setLastCharacters(String arg) {
            optimisticData.put(getKey("lastCharacters"), arg);
            return this;
        }

        /**
        * The amount that was applied to the checkout in its currency.
        */

        public MoneyV2 getPresentmentAmountUsed() {
            return (MoneyV2) get("presentmentAmountUsed");
        }

        public AppliedGiftCard setPresentmentAmountUsed(MoneyV2 arg) {
            optimisticData.put(getKey("presentmentAmountUsed"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "amountUsed": return true;

                case "amountUsedV2": return true;

                case "balance": return true;

                case "balanceV2": return true;

                case "id": return false;

                case "lastCharacters": return false;

                case "presentmentAmountUsed": return true;

                default: return false;
            }
        }
    }

    public interface ArticleQueryDefinition {
        void define(ArticleQuery _queryBuilder);
    }

    /**
    * An article in an online store blog.
    */
    public static class ArticleQuery extends Query<ArticleQuery> {
        ArticleQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The article's author.
        *
        * @deprecated Use `authorV2` instead.
        */
        @Deprecated
        public ArticleQuery author(ArticleAuthorQueryDefinition queryDef) {
            startField("author");

            _queryBuilder.append('{');
            queryDef.define(new ArticleAuthorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The article's author.
        */
        public ArticleQuery authorV2(ArticleAuthorQueryDefinition queryDef) {
            startField("authorV2");

            _queryBuilder.append('{');
            queryDef.define(new ArticleAuthorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The blog that the article belongs to.
        */
        public ArticleQuery blog(BlogQueryDefinition queryDef) {
            startField("blog");

            _queryBuilder.append('{');
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CommentsArguments extends Arguments {
            CommentsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public CommentsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public CommentsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public CommentsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public CommentsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public CommentsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CommentsArgumentsDefinition {
            void define(CommentsArguments args);
        }

        /**
        * List of comments posted on the article.
        */
        public ArticleQuery comments(CommentConnectionQueryDefinition queryDef) {
            return comments(args -> {}, queryDef);
        }

        /**
        * List of comments posted on the article.
        */
        public ArticleQuery comments(CommentsArgumentsDefinition argsDef, CommentConnectionQueryDefinition queryDef) {
            startField("comments");

            CommentsArguments args = new CommentsArguments(_queryBuilder);
            argsDef.define(args);
            CommentsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new CommentConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ContentArguments extends Arguments {
            ContentArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Truncates string after the given length.
            */
            public ContentArguments truncateAt(Integer value) {
                if (value != null) {
                    startArgument("truncateAt");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface ContentArgumentsDefinition {
            void define(ContentArguments args);
        }

        /**
        * Stripped content of the article, single line with HTML tags removed.
        */
        public ArticleQuery content() {
            return content(args -> {});
        }

        /**
        * Stripped content of the article, single line with HTML tags removed.
        */
        public ArticleQuery content(ContentArgumentsDefinition argsDef) {
            startField("content");

            ContentArguments args = new ContentArguments(_queryBuilder);
            argsDef.define(args);
            ContentArguments.end(args);

            return this;
        }

        /**
        * The content of the article, complete with HTML formatting.
        */
        public ArticleQuery contentHtml() {
            startField("contentHtml");

            return this;
        }

        public class ExcerptArguments extends Arguments {
            ExcerptArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Truncates string after the given length.
            */
            public ExcerptArguments truncateAt(Integer value) {
                if (value != null) {
                    startArgument("truncateAt");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface ExcerptArgumentsDefinition {
            void define(ExcerptArguments args);
        }

        /**
        * Stripped excerpt of the article, single line with HTML tags removed.
        */
        public ArticleQuery excerpt() {
            return excerpt(args -> {});
        }

        /**
        * Stripped excerpt of the article, single line with HTML tags removed.
        */
        public ArticleQuery excerpt(ExcerptArgumentsDefinition argsDef) {
            startField("excerpt");

            ExcerptArguments args = new ExcerptArguments(_queryBuilder);
            argsDef.define(args);
            ExcerptArguments.end(args);

            return this;
        }

        /**
        * The excerpt of the article, complete with HTML formatting.
        */
        public ArticleQuery excerptHtml() {
            startField("excerptHtml");

            return this;
        }

        /**
        * A human-friendly unique string for the Article automatically generated from its title.
        */
        public ArticleQuery handle() {
            startField("handle");

            return this;
        }

        /**
        * The image associated with the article.
        */
        public ArticleQuery image(ImageQueryDefinition queryDef) {
            startField("image");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public ArticleQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public ArticleQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public ArticleQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */
        public ArticleQuery onlineStoreUrl() {
            startField("onlineStoreUrl");

            return this;
        }

        /**
        * The date and time when the article was published.
        */
        public ArticleQuery publishedAt() {
            startField("publishedAt");

            return this;
        }

        /**
        * The article’s SEO information.
        */
        public ArticleQuery seo(SEOQueryDefinition queryDef) {
            startField("seo");

            _queryBuilder.append('{');
            queryDef.define(new SEOQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A categorization that a article can be tagged with.
        */
        public ArticleQuery tags() {
            startField("tags");

            return this;
        }

        /**
        * The article’s name.
        */
        public ArticleQuery title() {
            startField("title");

            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */
        public ArticleQuery trackingParameters() {
            startField("trackingParameters");

            return this;
        }
    }

    /**
    * An article in an online store blog.
    */
    public static class Article extends AbstractResponse<Article> implements HasMetafields, MenuItemResource, MetafieldParentResource, Node, OnlineStorePublishable, SearchResultItem, Trackable {
        public Article() {
        }

        public Article(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "author": {
                        responseData.put(key, new ArticleAuthor(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "authorV2": {
                        ArticleAuthor optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ArticleAuthor(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "blog": {
                        responseData.put(key, new Blog(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "comments": {
                        responseData.put(key, new CommentConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "content": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "contentHtml": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "excerpt": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "excerptHtml": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "image": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "onlineStoreUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "publishedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "seo": {
                        SEO optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new SEO(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "tags": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "trackingParameters": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Article(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Article";
        }

        /**
        * The article's author.
        *
        * @deprecated Use `authorV2` instead.
        */

        public ArticleAuthor getAuthor() {
            return (ArticleAuthor) get("author");
        }

        public Article setAuthor(ArticleAuthor arg) {
            optimisticData.put(getKey("author"), arg);
            return this;
        }

        /**
        * The article's author.
        */

        public ArticleAuthor getAuthorV2() {
            return (ArticleAuthor) get("authorV2");
        }

        public Article setAuthorV2(ArticleAuthor arg) {
            optimisticData.put(getKey("authorV2"), arg);
            return this;
        }

        /**
        * The blog that the article belongs to.
        */

        public Blog getBlog() {
            return (Blog) get("blog");
        }

        public Article setBlog(Blog arg) {
            optimisticData.put(getKey("blog"), arg);
            return this;
        }

        /**
        * List of comments posted on the article.
        */

        public CommentConnection getComments() {
            return (CommentConnection) get("comments");
        }

        public Article setComments(CommentConnection arg) {
            optimisticData.put(getKey("comments"), arg);
            return this;
        }

        /**
        * Stripped content of the article, single line with HTML tags removed.
        */

        public String getContent() {
            return (String) get("content");
        }

        public Article setContent(String arg) {
            optimisticData.put(getKey("content"), arg);
            return this;
        }

        /**
        * The content of the article, complete with HTML formatting.
        */

        public String getContentHtml() {
            return (String) get("contentHtml");
        }

        public Article setContentHtml(String arg) {
            optimisticData.put(getKey("contentHtml"), arg);
            return this;
        }

        /**
        * Stripped excerpt of the article, single line with HTML tags removed.
        */

        public String getExcerpt() {
            return (String) get("excerpt");
        }

        public Article setExcerpt(String arg) {
            optimisticData.put(getKey("excerpt"), arg);
            return this;
        }

        /**
        * The excerpt of the article, complete with HTML formatting.
        */

        public String getExcerptHtml() {
            return (String) get("excerptHtml");
        }

        public Article setExcerptHtml(String arg) {
            optimisticData.put(getKey("excerptHtml"), arg);
            return this;
        }

        /**
        * A human-friendly unique string for the Article automatically generated from its title.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public Article setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The image associated with the article.
        */

        public Image getImage() {
            return (Image) get("image");
        }

        public Article setImage(Image arg) {
            optimisticData.put(getKey("image"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Article setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Article setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */

        public String getOnlineStoreUrl() {
            return (String) get("onlineStoreUrl");
        }

        public Article setOnlineStoreUrl(String arg) {
            optimisticData.put(getKey("onlineStoreUrl"), arg);
            return this;
        }

        /**
        * The date and time when the article was published.
        */

        public DateTime getPublishedAt() {
            return (DateTime) get("publishedAt");
        }

        public Article setPublishedAt(DateTime arg) {
            optimisticData.put(getKey("publishedAt"), arg);
            return this;
        }

        /**
        * The article’s SEO information.
        */

        public SEO getSeo() {
            return (SEO) get("seo");
        }

        public Article setSeo(SEO arg) {
            optimisticData.put(getKey("seo"), arg);
            return this;
        }

        /**
        * A categorization that a article can be tagged with.
        */

        public List<String> getTags() {
            return (List<String>) get("tags");
        }

        public Article setTags(List<String> arg) {
            optimisticData.put(getKey("tags"), arg);
            return this;
        }

        /**
        * The article’s name.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public Article setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */

        public String getTrackingParameters() {
            return (String) get("trackingParameters");
        }

        public Article setTrackingParameters(String arg) {
            optimisticData.put(getKey("trackingParameters"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "author": return true;

                case "authorV2": return true;

                case "blog": return true;

                case "comments": return true;

                case "content": return false;

                case "contentHtml": return false;

                case "excerpt": return false;

                case "excerptHtml": return false;

                case "handle": return false;

                case "id": return false;

                case "image": return true;

                case "metafield": return true;

                case "metafields": return true;

                case "onlineStoreUrl": return false;

                case "publishedAt": return false;

                case "seo": return true;

                case "tags": return false;

                case "title": return false;

                case "trackingParameters": return false;

                default: return false;
            }
        }
    }

    public interface ArticleAuthorQueryDefinition {
        void define(ArticleAuthorQuery _queryBuilder);
    }

    /**
    * The author of an article.
    */
    public static class ArticleAuthorQuery extends Query<ArticleAuthorQuery> {
        ArticleAuthorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The author's bio.
        */
        public ArticleAuthorQuery bio() {
            startField("bio");

            return this;
        }

        /**
        * The author’s email.
        */
        public ArticleAuthorQuery email() {
            startField("email");

            return this;
        }

        /**
        * The author's first name.
        */
        public ArticleAuthorQuery firstName() {
            startField("firstName");

            return this;
        }

        /**
        * The author's last name.
        */
        public ArticleAuthorQuery lastName() {
            startField("lastName");

            return this;
        }

        /**
        * The author's full name.
        */
        public ArticleAuthorQuery name() {
            startField("name");

            return this;
        }
    }

    /**
    * The author of an article.
    */
    public static class ArticleAuthor extends AbstractResponse<ArticleAuthor> {
        public ArticleAuthor() {
        }

        public ArticleAuthor(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "bio": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "email": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "firstName": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "lastName": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ArticleAuthor";
        }

        /**
        * The author's bio.
        */

        public String getBio() {
            return (String) get("bio");
        }

        public ArticleAuthor setBio(String arg) {
            optimisticData.put(getKey("bio"), arg);
            return this;
        }

        /**
        * The author’s email.
        */

        public String getEmail() {
            return (String) get("email");
        }

        public ArticleAuthor setEmail(String arg) {
            optimisticData.put(getKey("email"), arg);
            return this;
        }

        /**
        * The author's first name.
        */

        public String getFirstName() {
            return (String) get("firstName");
        }

        public ArticleAuthor setFirstName(String arg) {
            optimisticData.put(getKey("firstName"), arg);
            return this;
        }

        /**
        * The author's last name.
        */

        public String getLastName() {
            return (String) get("lastName");
        }

        public ArticleAuthor setLastName(String arg) {
            optimisticData.put(getKey("lastName"), arg);
            return this;
        }

        /**
        * The author's full name.
        */

        public String getName() {
            return (String) get("name");
        }

        public ArticleAuthor setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "bio": return false;

                case "email": return false;

                case "firstName": return false;

                case "lastName": return false;

                case "name": return false;

                default: return false;
            }
        }
    }

    public interface ArticleConnectionQueryDefinition {
        void define(ArticleConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Articles.
    */
    public static class ArticleConnectionQuery extends Query<ArticleConnectionQuery> {
        ArticleConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public ArticleConnectionQuery edges(ArticleEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new ArticleEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in ArticleEdge.
        */
        public ArticleConnectionQuery nodes(ArticleQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public ArticleConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Articles.
    */
    public static class ArticleConnection extends AbstractResponse<ArticleConnection> {
        public ArticleConnection() {
        }

        public ArticleConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<ArticleEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ArticleEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Article> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Article(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ArticleConnection";
        }

        /**
        * A list of edges.
        */

        public List<ArticleEdge> getEdges() {
            return (List<ArticleEdge>) get("edges");
        }

        public ArticleConnection setEdges(List<ArticleEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in ArticleEdge.
        */

        public List<Article> getNodes() {
            return (List<Article>) get("nodes");
        }

        public ArticleConnection setNodes(List<Article> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public ArticleConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface ArticleEdgeQueryDefinition {
        void define(ArticleEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Article and a cursor during pagination.
    */
    public static class ArticleEdgeQuery extends Query<ArticleEdgeQuery> {
        ArticleEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public ArticleEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of ArticleEdge.
        */
        public ArticleEdgeQuery node(ArticleQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Article and a cursor during pagination.
    */
    public static class ArticleEdge extends AbstractResponse<ArticleEdge> {
        public ArticleEdge() {
        }

        public ArticleEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Article(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ArticleEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public ArticleEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of ArticleEdge.
        */

        public Article getNode() {
            return (Article) get("node");
        }

        public ArticleEdge setNode(Article arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the Article query.
    */
    public enum ArticleSortKeys {
        /**
        * Sort by the `author` value.
        */
        AUTHOR,

        /**
        * Sort by the `blog_title` value.
        */
        BLOG_TITLE,

        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by the `published_at` value.
        */
        PUBLISHED_AT,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        /**
        * Sort by the `title` value.
        */
        TITLE,

        /**
        * Sort by the `updated_at` value.
        */
        UPDATED_AT,

        UNKNOWN_VALUE;

        public static ArticleSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "AUTHOR": {
                    return AUTHOR;
                }

                case "BLOG_TITLE": {
                    return BLOG_TITLE;
                }

                case "ID": {
                    return ID;
                }

                case "PUBLISHED_AT": {
                    return PUBLISHED_AT;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                case "TITLE": {
                    return TITLE;
                }

                case "UPDATED_AT": {
                    return UPDATED_AT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case AUTHOR: {
                    return "AUTHOR";
                }

                case BLOG_TITLE: {
                    return "BLOG_TITLE";
                }

                case ID: {
                    return "ID";
                }

                case PUBLISHED_AT: {
                    return "PUBLISHED_AT";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                case TITLE: {
                    return "TITLE";
                }

                case UPDATED_AT: {
                    return "UPDATED_AT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface AttributeQueryDefinition {
        void define(AttributeQuery _queryBuilder);
    }

    /**
    * Represents a generic custom attribute.
    */
    public static class AttributeQuery extends Query<AttributeQuery> {
        AttributeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Key or name of the attribute.
        */
        public AttributeQuery key() {
            startField("key");

            return this;
        }

        /**
        * Value of the attribute.
        */
        public AttributeQuery value() {
            startField("value");

            return this;
        }
    }

    /**
    * Represents a generic custom attribute.
    */
    public static class Attribute extends AbstractResponse<Attribute> {
        public Attribute() {
        }

        public Attribute(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "key": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "value": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Attribute";
        }

        /**
        * Key or name of the attribute.
        */

        public String getKey() {
            return (String) get("key");
        }

        public Attribute setKey(String arg) {
            optimisticData.put(getKey("key"), arg);
            return this;
        }

        /**
        * Value of the attribute.
        */

        public String getValue() {
            return (String) get("value");
        }

        public Attribute setValue(String arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "key": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    public static class AttributeInput implements Serializable {
        private String key;

        private String value;

        public AttributeInput(String key, String value) {
            this.key = key;

            this.value = value;
        }

        public String getKey() {
            return key;
        }

        public AttributeInput setKey(String key) {
            this.key = key;
            return this;
        }

        public String getValue() {
            return value;
        }

        public AttributeInput setValue(String value) {
            this.value = value;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("value:");
            Query.appendQuotedString(_queryBuilder, value.toString());

            _queryBuilder.append('}');
        }
    }

    public interface AutomaticDiscountApplicationQueryDefinition {
        void define(AutomaticDiscountApplicationQuery _queryBuilder);
    }

    /**
    * Automatic discount applications capture the intentions of a discount that was automatically applied.
    */
    public static class AutomaticDiscountApplicationQuery extends Query<AutomaticDiscountApplicationQuery> {
        AutomaticDiscountApplicationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */
        public AutomaticDiscountApplicationQuery allocationMethod() {
            startField("allocationMethod");

            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */
        public AutomaticDiscountApplicationQuery targetSelection() {
            startField("targetSelection");

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public AutomaticDiscountApplicationQuery targetType() {
            startField("targetType");

            return this;
        }

        /**
        * The title of the application.
        */
        public AutomaticDiscountApplicationQuery title() {
            startField("title");

            return this;
        }

        /**
        * The value of the discount application.
        */
        public AutomaticDiscountApplicationQuery value(PricingValueQueryDefinition queryDef) {
            startField("value");

            _queryBuilder.append('{');
            queryDef.define(new PricingValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Automatic discount applications capture the intentions of a discount that was automatically applied.
    */
    public static class AutomaticDiscountApplication extends AbstractResponse<AutomaticDiscountApplication> implements DiscountApplication {
        public AutomaticDiscountApplication() {
        }

        public AutomaticDiscountApplication(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "allocationMethod": {
                        responseData.put(key, DiscountApplicationAllocationMethod.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "targetSelection": {
                        responseData.put(key, DiscountApplicationTargetSelection.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "value": {
                        responseData.put(key, UnknownPricingValue.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "AutomaticDiscountApplication";
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */

        public DiscountApplicationAllocationMethod getAllocationMethod() {
            return (DiscountApplicationAllocationMethod) get("allocationMethod");
        }

        public AutomaticDiscountApplication setAllocationMethod(DiscountApplicationAllocationMethod arg) {
            optimisticData.put(getKey("allocationMethod"), arg);
            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */

        public DiscountApplicationTargetSelection getTargetSelection() {
            return (DiscountApplicationTargetSelection) get("targetSelection");
        }

        public AutomaticDiscountApplication setTargetSelection(DiscountApplicationTargetSelection arg) {
            optimisticData.put(getKey("targetSelection"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public AutomaticDiscountApplication setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        /**
        * The title of the application.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public AutomaticDiscountApplication setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * The value of the discount application.
        */

        public PricingValue getValue() {
            return (PricingValue) get("value");
        }

        public AutomaticDiscountApplication setValue(PricingValue arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "allocationMethod": return false;

                case "targetSelection": return false;

                case "targetType": return false;

                case "title": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    public interface BaseCartLineQueryDefinition {
        void define(BaseCartLineQuery _queryBuilder);
    }

    /**
    * Represents a cart line common fields.
    */
    public static class BaseCartLineQuery extends Query<BaseCartLineQuery> {
        BaseCartLineQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        /**
        * An attribute associated with the cart line.
        */
        public BaseCartLineQuery attribute(String key, AttributeQueryDefinition queryDef) {
            startField("attribute");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The attributes associated with the cart line. Attributes are represented as key-value pairs.
        */
        public BaseCartLineQuery attributes(AttributeQueryDefinition queryDef) {
            startField("attributes");

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change
        * and changes will be reflected at checkout.
        */
        public BaseCartLineQuery cost(CartLineCostQueryDefinition queryDef) {
            startField("cost");

            _queryBuilder.append('{');
            queryDef.define(new CartLineCostQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The discounts that have been applied to the cart line.
        */
        public BaseCartLineQuery discountAllocations(CartDiscountAllocationQueryDefinition queryDef) {
            startField("discountAllocations");

            _queryBuilder.append('{');
            queryDef.define(new CartDiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs
        * are subject to change and changes will be reflected at checkout.
        *
        * @deprecated Use `cost` instead.
        */
        @Deprecated
        public BaseCartLineQuery estimatedCost(CartLineEstimatedCostQueryDefinition queryDef) {
            startField("estimatedCost");

            _queryBuilder.append('{');
            queryDef.define(new CartLineEstimatedCostQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A globally-unique ID.
        */
        public BaseCartLineQuery id() {
            startField("id");

            return this;
        }

        /**
        * The merchandise that the buyer intends to purchase.
        */
        public BaseCartLineQuery merchandise(MerchandiseQueryDefinition queryDef) {
            startField("merchandise");

            _queryBuilder.append('{');
            queryDef.define(new MerchandiseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The quantity of the merchandise that the customer intends to purchase.
        */
        public BaseCartLineQuery quantity() {
            startField("quantity");

            return this;
        }

        /**
        * The selling plan associated with the cart line and the effect that each selling plan has on variants
        * when they're purchased.
        */
        public BaseCartLineQuery sellingPlanAllocation(SellingPlanAllocationQueryDefinition queryDef) {
            startField("sellingPlanAllocation");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public BaseCartLineQuery onCartLine(CartLineQueryDefinition queryDef) {
            startInlineFragment("CartLine");
            queryDef.define(new CartLineQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public BaseCartLineQuery onComponentizableCartLine(ComponentizableCartLineQueryDefinition queryDef) {
            startInlineFragment("ComponentizableCartLine");
            queryDef.define(new ComponentizableCartLineQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface BaseCartLine {
        String getGraphQlTypeName();

        Attribute getAttribute();

        List<Attribute> getAttributes();

        CartLineCost getCost();

        List<CartDiscountAllocation> getDiscountAllocations();

        CartLineEstimatedCost getEstimatedCost();

        ID getId();

        Merchandise getMerchandise();

        Integer getQuantity();

        SellingPlanAllocation getSellingPlanAllocation();
    }

    /**
    * Represents a cart line common fields.
    */
    public static class UnknownBaseCartLine extends AbstractResponse<UnknownBaseCartLine> implements BaseCartLine {
        public UnknownBaseCartLine() {
        }

        public UnknownBaseCartLine(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "attribute": {
                        Attribute optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Attribute(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "attributes": {
                        List<Attribute> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Attribute(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "cost": {
                        responseData.put(key, new CartLineCost(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "discountAllocations": {
                        List<CartDiscountAllocation> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownCartDiscountAllocation.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "estimatedCost": {
                        responseData.put(key, new CartLineEstimatedCost(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "merchandise": {
                        responseData.put(key, UnknownMerchandise.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "quantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "sellingPlanAllocation": {
                        SellingPlanAllocation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new SellingPlanAllocation(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static BaseCartLine create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "CartLine": {
                    return new CartLine(fields);
                }

                case "ComponentizableCartLine": {
                    return new ComponentizableCartLine(fields);
                }

                default: {
                    return new UnknownBaseCartLine(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * An attribute associated with the cart line.
        */

        public Attribute getAttribute() {
            return (Attribute) get("attribute");
        }

        public UnknownBaseCartLine setAttribute(Attribute arg) {
            optimisticData.put(getKey("attribute"), arg);
            return this;
        }

        /**
        * The attributes associated with the cart line. Attributes are represented as key-value pairs.
        */

        public List<Attribute> getAttributes() {
            return (List<Attribute>) get("attributes");
        }

        public UnknownBaseCartLine setAttributes(List<Attribute> arg) {
            optimisticData.put(getKey("attributes"), arg);
            return this;
        }

        /**
        * The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change
        * and changes will be reflected at checkout.
        */

        public CartLineCost getCost() {
            return (CartLineCost) get("cost");
        }

        public UnknownBaseCartLine setCost(CartLineCost arg) {
            optimisticData.put(getKey("cost"), arg);
            return this;
        }

        /**
        * The discounts that have been applied to the cart line.
        */

        public List<CartDiscountAllocation> getDiscountAllocations() {
            return (List<CartDiscountAllocation>) get("discountAllocations");
        }

        public UnknownBaseCartLine setDiscountAllocations(List<CartDiscountAllocation> arg) {
            optimisticData.put(getKey("discountAllocations"), arg);
            return this;
        }

        /**
        * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs
        * are subject to change and changes will be reflected at checkout.
        *
        * @deprecated Use `cost` instead.
        */

        public CartLineEstimatedCost getEstimatedCost() {
            return (CartLineEstimatedCost) get("estimatedCost");
        }

        public UnknownBaseCartLine setEstimatedCost(CartLineEstimatedCost arg) {
            optimisticData.put(getKey("estimatedCost"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public UnknownBaseCartLine setId(ID arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The merchandise that the buyer intends to purchase.
        */

        public Merchandise getMerchandise() {
            return (Merchandise) get("merchandise");
        }

        public UnknownBaseCartLine setMerchandise(Merchandise arg) {
            optimisticData.put(getKey("merchandise"), arg);
            return this;
        }

        /**
        * The quantity of the merchandise that the customer intends to purchase.
        */

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public UnknownBaseCartLine setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        /**
        * The selling plan associated with the cart line and the effect that each selling plan has on variants
        * when they're purchased.
        */

        public SellingPlanAllocation getSellingPlanAllocation() {
            return (SellingPlanAllocation) get("sellingPlanAllocation");
        }

        public UnknownBaseCartLine setSellingPlanAllocation(SellingPlanAllocation arg) {
            optimisticData.put(getKey("sellingPlanAllocation"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "attribute": return true;

                case "attributes": return true;

                case "cost": return true;

                case "discountAllocations": return false;

                case "estimatedCost": return true;

                case "id": return false;

                case "merchandise": return false;

                case "quantity": return false;

                case "sellingPlanAllocation": return true;

                default: return false;
            }
        }
    }

    public interface BaseCartLineConnectionQueryDefinition {
        void define(BaseCartLineConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple BaseCartLines.
    */
    public static class BaseCartLineConnectionQuery extends Query<BaseCartLineConnectionQuery> {
        BaseCartLineConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public BaseCartLineConnectionQuery edges(BaseCartLineEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new BaseCartLineEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in BaseCartLineEdge.
        */
        public BaseCartLineConnectionQuery nodes(BaseCartLineQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new BaseCartLineQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public BaseCartLineConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple BaseCartLines.
    */
    public static class BaseCartLineConnection extends AbstractResponse<BaseCartLineConnection> {
        public BaseCartLineConnection() {
        }

        public BaseCartLineConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<BaseCartLineEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new BaseCartLineEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<BaseCartLine> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownBaseCartLine.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "BaseCartLineConnection";
        }

        /**
        * A list of edges.
        */

        public List<BaseCartLineEdge> getEdges() {
            return (List<BaseCartLineEdge>) get("edges");
        }

        public BaseCartLineConnection setEdges(List<BaseCartLineEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in BaseCartLineEdge.
        */

        public List<BaseCartLine> getNodes() {
            return (List<BaseCartLine>) get("nodes");
        }

        public BaseCartLineConnection setNodes(List<BaseCartLine> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public BaseCartLineConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return false;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface BaseCartLineEdgeQueryDefinition {
        void define(BaseCartLineEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one BaseCartLine and a cursor during pagination.
    */
    public static class BaseCartLineEdgeQuery extends Query<BaseCartLineEdgeQuery> {
        BaseCartLineEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public BaseCartLineEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of BaseCartLineEdge.
        */
        public BaseCartLineEdgeQuery node(BaseCartLineQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new BaseCartLineQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one BaseCartLine and a cursor during pagination.
    */
    public static class BaseCartLineEdge extends AbstractResponse<BaseCartLineEdge> {
        public BaseCartLineEdge() {
        }

        public BaseCartLineEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, UnknownBaseCartLine.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "BaseCartLineEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public BaseCartLineEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of BaseCartLineEdge.
        */

        public BaseCartLine getNode() {
            return (BaseCartLine) get("node");
        }

        public BaseCartLineEdge setNode(BaseCartLine arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return false;

                default: return false;
            }
        }
    }

    public interface BlogQueryDefinition {
        void define(BlogQuery _queryBuilder);
    }

    /**
    * An online store blog.
    */
    public static class BlogQuery extends Query<BlogQuery> {
        BlogQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * Find an article by its handle.
        */
        public BlogQuery articleByHandle(String handle, ArticleQueryDefinition queryDef) {
            startField("articleByHandle");

            _queryBuilder.append("(handle:");
            Query.appendQuotedString(_queryBuilder, handle.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ArticlesArguments extends Arguments {
            ArticlesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public ArticlesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public ArticlesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public ArticlesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public ArticlesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public ArticlesArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public ArticlesArguments sortKey(ArticleSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Apply one or multiple filters to the query.
            * | name | description | acceptable_values | default_value | example_use |
            * | ---- | ---- | ---- | ---- | ---- |
            * | author |
            * | blog_title |
            * | created_at |
            * | tag |
            * | tag_not |
            * | updated_at |
            * Refer to the detailed [search syntax](https://shopify.dev/api/usage/search-syntax) for more
            * information about using filters.
            */
            public ArticlesArguments query(String value) {
                if (value != null) {
                    startArgument("query");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface ArticlesArgumentsDefinition {
            void define(ArticlesArguments args);
        }

        /**
        * List of the blog's articles.
        */
        public BlogQuery articles(ArticleConnectionQueryDefinition queryDef) {
            return articles(args -> {}, queryDef);
        }

        /**
        * List of the blog's articles.
        */
        public BlogQuery articles(ArticlesArgumentsDefinition argsDef, ArticleConnectionQueryDefinition queryDef) {
            startField("articles");

            ArticlesArguments args = new ArticlesArguments(_queryBuilder);
            argsDef.define(args);
            ArticlesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ArticleConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The authors who have contributed to the blog.
        */
        public BlogQuery authors(ArticleAuthorQueryDefinition queryDef) {
            startField("authors");

            _queryBuilder.append('{');
            queryDef.define(new ArticleAuthorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A human-friendly unique string for the Blog automatically generated from its title.
        */
        public BlogQuery handle() {
            startField("handle");

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public BlogQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public BlogQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public BlogQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */
        public BlogQuery onlineStoreUrl() {
            startField("onlineStoreUrl");

            return this;
        }

        /**
        * The blog's SEO information.
        */
        public BlogQuery seo(SEOQueryDefinition queryDef) {
            startField("seo");

            _queryBuilder.append('{');
            queryDef.define(new SEOQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The blogs’s title.
        */
        public BlogQuery title() {
            startField("title");

            return this;
        }
    }

    /**
    * An online store blog.
    */
    public static class Blog extends AbstractResponse<Blog> implements HasMetafields, MenuItemResource, MetafieldParentResource, Node, OnlineStorePublishable {
        public Blog() {
        }

        public Blog(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "articleByHandle": {
                        Article optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Article(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "articles": {
                        responseData.put(key, new ArticleConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "authors": {
                        List<ArticleAuthor> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ArticleAuthor(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "onlineStoreUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "seo": {
                        SEO optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new SEO(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Blog(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Blog";
        }

        /**
        * Find an article by its handle.
        */

        public Article getArticleByHandle() {
            return (Article) get("articleByHandle");
        }

        public Blog setArticleByHandle(Article arg) {
            optimisticData.put(getKey("articleByHandle"), arg);
            return this;
        }

        /**
        * List of the blog's articles.
        */

        public ArticleConnection getArticles() {
            return (ArticleConnection) get("articles");
        }

        public Blog setArticles(ArticleConnection arg) {
            optimisticData.put(getKey("articles"), arg);
            return this;
        }

        /**
        * The authors who have contributed to the blog.
        */

        public List<ArticleAuthor> getAuthors() {
            return (List<ArticleAuthor>) get("authors");
        }

        public Blog setAuthors(List<ArticleAuthor> arg) {
            optimisticData.put(getKey("authors"), arg);
            return this;
        }

        /**
        * A human-friendly unique string for the Blog automatically generated from its title.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public Blog setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Blog setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Blog setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */

        public String getOnlineStoreUrl() {
            return (String) get("onlineStoreUrl");
        }

        public Blog setOnlineStoreUrl(String arg) {
            optimisticData.put(getKey("onlineStoreUrl"), arg);
            return this;
        }

        /**
        * The blog's SEO information.
        */

        public SEO getSeo() {
            return (SEO) get("seo");
        }

        public Blog setSeo(SEO arg) {
            optimisticData.put(getKey("seo"), arg);
            return this;
        }

        /**
        * The blogs’s title.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public Blog setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "articleByHandle": return true;

                case "articles": return true;

                case "authors": return true;

                case "handle": return false;

                case "id": return false;

                case "metafield": return true;

                case "metafields": return true;

                case "onlineStoreUrl": return false;

                case "seo": return true;

                case "title": return false;

                default: return false;
            }
        }
    }

    public interface BlogConnectionQueryDefinition {
        void define(BlogConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Blogs.
    */
    public static class BlogConnectionQuery extends Query<BlogConnectionQuery> {
        BlogConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public BlogConnectionQuery edges(BlogEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new BlogEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in BlogEdge.
        */
        public BlogConnectionQuery nodes(BlogQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public BlogConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Blogs.
    */
    public static class BlogConnection extends AbstractResponse<BlogConnection> {
        public BlogConnection() {
        }

        public BlogConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<BlogEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new BlogEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Blog> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Blog(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "BlogConnection";
        }

        /**
        * A list of edges.
        */

        public List<BlogEdge> getEdges() {
            return (List<BlogEdge>) get("edges");
        }

        public BlogConnection setEdges(List<BlogEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in BlogEdge.
        */

        public List<Blog> getNodes() {
            return (List<Blog>) get("nodes");
        }

        public BlogConnection setNodes(List<Blog> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public BlogConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface BlogEdgeQueryDefinition {
        void define(BlogEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Blog and a cursor during pagination.
    */
    public static class BlogEdgeQuery extends Query<BlogEdgeQuery> {
        BlogEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public BlogEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of BlogEdge.
        */
        public BlogEdgeQuery node(BlogQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Blog and a cursor during pagination.
    */
    public static class BlogEdge extends AbstractResponse<BlogEdge> {
        public BlogEdge() {
        }

        public BlogEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Blog(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "BlogEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public BlogEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of BlogEdge.
        */

        public Blog getNode() {
            return (Blog) get("node");
        }

        public BlogEdge setNode(Blog arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the Blog query.
    */
    public enum BlogSortKeys {
        /**
        * Sort by the `handle` value.
        */
        HANDLE,

        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        /**
        * Sort by the `title` value.
        */
        TITLE,

        UNKNOWN_VALUE;

        public static BlogSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "HANDLE": {
                    return HANDLE;
                }

                case "ID": {
                    return ID;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                case "TITLE": {
                    return TITLE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case HANDLE: {
                    return "HANDLE";
                }

                case ID: {
                    return "ID";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                case TITLE: {
                    return "TITLE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface BrandQueryDefinition {
        void define(BrandQuery _queryBuilder);
    }

    /**
    * The store's [branding
    * configuration](https://help.shopify.com/en/manual/promoting-marketing/managing-brand-assets).
    */
    public static class BrandQuery extends Query<BrandQuery> {
        BrandQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The colors of the store's brand.
        */
        public BrandQuery colors(BrandColorsQueryDefinition queryDef) {
            startField("colors");

            _queryBuilder.append('{');
            queryDef.define(new BrandColorsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The store's cover image.
        */
        public BrandQuery coverImage(MediaImageQueryDefinition queryDef) {
            startField("coverImage");

            _queryBuilder.append('{');
            queryDef.define(new MediaImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The store's default logo.
        */
        public BrandQuery logo(MediaImageQueryDefinition queryDef) {
            startField("logo");

            _queryBuilder.append('{');
            queryDef.define(new MediaImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The store's short description.
        */
        public BrandQuery shortDescription() {
            startField("shortDescription");

            return this;
        }

        /**
        * The store's slogan.
        */
        public BrandQuery slogan() {
            startField("slogan");

            return this;
        }

        /**
        * The store's preferred logo for square UI elements.
        */
        public BrandQuery squareLogo(MediaImageQueryDefinition queryDef) {
            startField("squareLogo");

            _queryBuilder.append('{');
            queryDef.define(new MediaImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The store's [branding
    * configuration](https://help.shopify.com/en/manual/promoting-marketing/managing-brand-assets).
    */
    public static class Brand extends AbstractResponse<Brand> {
        public Brand() {
        }

        public Brand(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "colors": {
                        responseData.put(key, new BrandColors(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "coverImage": {
                        MediaImage optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaImage(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "logo": {
                        MediaImage optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaImage(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shortDescription": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "slogan": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "squareLogo": {
                        MediaImage optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaImage(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Brand";
        }

        /**
        * The colors of the store's brand.
        */

        public BrandColors getColors() {
            return (BrandColors) get("colors");
        }

        public Brand setColors(BrandColors arg) {
            optimisticData.put(getKey("colors"), arg);
            return this;
        }

        /**
        * The store's cover image.
        */

        public MediaImage getCoverImage() {
            return (MediaImage) get("coverImage");
        }

        public Brand setCoverImage(MediaImage arg) {
            optimisticData.put(getKey("coverImage"), arg);
            return this;
        }

        /**
        * The store's default logo.
        */

        public MediaImage getLogo() {
            return (MediaImage) get("logo");
        }

        public Brand setLogo(MediaImage arg) {
            optimisticData.put(getKey("logo"), arg);
            return this;
        }

        /**
        * The store's short description.
        */

        public String getShortDescription() {
            return (String) get("shortDescription");
        }

        public Brand setShortDescription(String arg) {
            optimisticData.put(getKey("shortDescription"), arg);
            return this;
        }

        /**
        * The store's slogan.
        */

        public String getSlogan() {
            return (String) get("slogan");
        }

        public Brand setSlogan(String arg) {
            optimisticData.put(getKey("slogan"), arg);
            return this;
        }

        /**
        * The store's preferred logo for square UI elements.
        */

        public MediaImage getSquareLogo() {
            return (MediaImage) get("squareLogo");
        }

        public Brand setSquareLogo(MediaImage arg) {
            optimisticData.put(getKey("squareLogo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "colors": return true;

                case "coverImage": return true;

                case "logo": return true;

                case "shortDescription": return false;

                case "slogan": return false;

                case "squareLogo": return true;

                default: return false;
            }
        }
    }

    public interface BrandColorGroupQueryDefinition {
        void define(BrandColorGroupQuery _queryBuilder);
    }

    /**
    * A group of related colors for the shop's brand.
    */
    public static class BrandColorGroupQuery extends Query<BrandColorGroupQuery> {
        BrandColorGroupQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The background color.
        */
        public BrandColorGroupQuery background() {
            startField("background");

            return this;
        }

        /**
        * The foreground color.
        */
        public BrandColorGroupQuery foreground() {
            startField("foreground");

            return this;
        }
    }

    /**
    * A group of related colors for the shop's brand.
    */
    public static class BrandColorGroup extends AbstractResponse<BrandColorGroup> {
        public BrandColorGroup() {
        }

        public BrandColorGroup(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "background": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "foreground": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "BrandColorGroup";
        }

        /**
        * The background color.
        */

        public String getBackground() {
            return (String) get("background");
        }

        public BrandColorGroup setBackground(String arg) {
            optimisticData.put(getKey("background"), arg);
            return this;
        }

        /**
        * The foreground color.
        */

        public String getForeground() {
            return (String) get("foreground");
        }

        public BrandColorGroup setForeground(String arg) {
            optimisticData.put(getKey("foreground"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "background": return false;

                case "foreground": return false;

                default: return false;
            }
        }
    }

    public interface BrandColorsQueryDefinition {
        void define(BrandColorsQuery _queryBuilder);
    }

    /**
    * The colors of the shop's brand.
    */
    public static class BrandColorsQuery extends Query<BrandColorsQuery> {
        BrandColorsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The shop's primary brand colors.
        */
        public BrandColorsQuery primary(BrandColorGroupQueryDefinition queryDef) {
            startField("primary");

            _queryBuilder.append('{');
            queryDef.define(new BrandColorGroupQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The shop's secondary brand colors.
        */
        public BrandColorsQuery secondary(BrandColorGroupQueryDefinition queryDef) {
            startField("secondary");

            _queryBuilder.append('{');
            queryDef.define(new BrandColorGroupQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The colors of the shop's brand.
    */
    public static class BrandColors extends AbstractResponse<BrandColors> {
        public BrandColors() {
        }

        public BrandColors(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "primary": {
                        List<BrandColorGroup> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new BrandColorGroup(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "secondary": {
                        List<BrandColorGroup> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new BrandColorGroup(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "BrandColors";
        }

        /**
        * The shop's primary brand colors.
        */

        public List<BrandColorGroup> getPrimary() {
            return (List<BrandColorGroup>) get("primary");
        }

        public BrandColors setPrimary(List<BrandColorGroup> arg) {
            optimisticData.put(getKey("primary"), arg);
            return this;
        }

        /**
        * The shop's secondary brand colors.
        */

        public List<BrandColorGroup> getSecondary() {
            return (List<BrandColorGroup>) get("secondary");
        }

        public BrandColors setSecondary(List<BrandColorGroup> arg) {
            optimisticData.put(getKey("secondary"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "primary": return true;

                case "secondary": return true;

                default: return false;
            }
        }
    }

    public static class BuyerInput implements Serializable {
        private String customerAccessToken;

        private Input<ID> companyLocationId = Input.undefined();

        public BuyerInput(String customerAccessToken) {
            this.customerAccessToken = customerAccessToken;
        }

        public String getCustomerAccessToken() {
            return customerAccessToken;
        }

        public BuyerInput setCustomerAccessToken(String customerAccessToken) {
            this.customerAccessToken = customerAccessToken;
            return this;
        }

        public ID getCompanyLocationId() {
            return companyLocationId.getValue();
        }

        public Input<ID> getCompanyLocationIdInput() {
            return companyLocationId;
        }

        public BuyerInput setCompanyLocationId(ID companyLocationId) {
            this.companyLocationId = Input.optional(companyLocationId);
            return this;
        }

        public BuyerInput setCompanyLocationIdInput(Input<ID> companyLocationId) {
            if (companyLocationId == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.companyLocationId = companyLocationId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            if (this.companyLocationId.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("companyLocationId:");
                if (companyLocationId.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, companyLocationId.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * Card brand, such as Visa or Mastercard, which can be used for payments.
    */
    public enum CardBrand {
        /**
        * American Express.
        */
        AMERICAN_EXPRESS,

        /**
        * Diners Club.
        */
        DINERS_CLUB,

        /**
        * Discover.
        */
        DISCOVER,

        /**
        * JCB.
        */
        JCB,

        /**
        * Mastercard.
        */
        MASTERCARD,

        /**
        * Visa.
        */
        VISA,

        UNKNOWN_VALUE;

        public static CardBrand fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "AMERICAN_EXPRESS": {
                    return AMERICAN_EXPRESS;
                }

                case "DINERS_CLUB": {
                    return DINERS_CLUB;
                }

                case "DISCOVER": {
                    return DISCOVER;
                }

                case "JCB": {
                    return JCB;
                }

                case "MASTERCARD": {
                    return MASTERCARD;
                }

                case "VISA": {
                    return VISA;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case AMERICAN_EXPRESS: {
                    return "AMERICAN_EXPRESS";
                }

                case DINERS_CLUB: {
                    return "DINERS_CLUB";
                }

                case DISCOVER: {
                    return "DISCOVER";
                }

                case JCB: {
                    return "JCB";
                }

                case MASTERCARD: {
                    return "MASTERCARD";
                }

                case VISA: {
                    return "VISA";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface CartQueryDefinition {
        void define(CartQuery _queryBuilder);
    }

    /**
    * A cart represents the merchandise that a buyer intends to purchase,
    * and the estimated cost associated with the cart. Learn how to
    * [interact with a
    * cart](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
    * during a customer's session.
    */
    public static class CartQuery extends Query<CartQuery> {
        CartQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The gift cards that have been applied to the cart.
        */
        public CartQuery appliedGiftCards(AppliedGiftCardQueryDefinition queryDef) {
            startField("appliedGiftCards");

            _queryBuilder.append('{');
            queryDef.define(new AppliedGiftCardQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * An attribute associated with the cart.
        */
        public CartQuery attribute(String key, AttributeQueryDefinition queryDef) {
            startField("attribute");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The attributes associated with the cart. Attributes are represented as key-value pairs.
        */
        public CartQuery attributes(AttributeQueryDefinition queryDef) {
            startField("attributes");

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information about the buyer that's interacting with the cart.
        */
        public CartQuery buyerIdentity(CartBuyerIdentityQueryDefinition queryDef) {
            startField("buyerIdentity");

            _queryBuilder.append('{');
            queryDef.define(new CartBuyerIdentityQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The URL of the checkout for the cart.
        */
        public CartQuery checkoutUrl() {
            startField("checkoutUrl");

            return this;
        }

        /**
        * The estimated costs that the buyer will pay at checkout. The costs are subject to change and changes
        * will be reflected at checkout. The `cost` field uses the `buyerIdentity` field to determine
        * [international
        * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
        */
        public CartQuery cost(CartCostQueryDefinition queryDef) {
            startField("cost");

            _queryBuilder.append('{');
            queryDef.define(new CartCostQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The date and time when the cart was created.
        */
        public CartQuery createdAt() {
            startField("createdAt");

            return this;
        }

        public class DeliveryGroupsArguments extends Arguments {
            DeliveryGroupsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public DeliveryGroupsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public DeliveryGroupsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public DeliveryGroupsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public DeliveryGroupsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public DeliveryGroupsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Whether to include [carrier-calculated delivery
            * rates](https://help.shopify.com/en/manual/shipping/setting-up-and-managing-your-shipping/enabling-sh
            * ipping-carriers) in the response.
            * By default, only static shipping rates are returned. This argument requires mandatory usage of the
            * [`@defer` directive](https://shopify.dev/docs/api/storefront#directives).
            * For more information, refer to [fetching carrier-calculated rates for the cart using
            * `@defer`](https://shopify.dev/docs/storefronts/headless/building-with-the-storefront-api/defer#fetch
            * ing-carrier-calculated-rates-for-the-cart-using-defer).
            */
            public DeliveryGroupsArguments withCarrierRates(Boolean value) {
                if (value != null) {
                    startArgument("withCarrierRates");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface DeliveryGroupsArgumentsDefinition {
            void define(DeliveryGroupsArguments args);
        }

        /**
        * The delivery groups available for the cart, based on the buyer identity default
        * delivery address preference or the default address of the logged-in customer.
        */
        public CartQuery deliveryGroups(CartDeliveryGroupConnectionQueryDefinition queryDef) {
            return deliveryGroups(args -> {}, queryDef);
        }

        /**
        * The delivery groups available for the cart, based on the buyer identity default
        * delivery address preference or the default address of the logged-in customer.
        */
        public CartQuery deliveryGroups(DeliveryGroupsArgumentsDefinition argsDef, CartDeliveryGroupConnectionQueryDefinition queryDef) {
            startField("deliveryGroups");

            DeliveryGroupsArguments args = new DeliveryGroupsArguments(_queryBuilder);
            argsDef.define(args);
            DeliveryGroupsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new CartDeliveryGroupConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The discounts that have been applied to the entire cart.
        */
        public CartQuery discountAllocations(CartDiscountAllocationQueryDefinition queryDef) {
            startField("discountAllocations");

            _queryBuilder.append('{');
            queryDef.define(new CartDiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The case-insensitive discount codes that the customer added at checkout.
        */
        public CartQuery discountCodes(CartDiscountCodeQueryDefinition queryDef) {
            startField("discountCodes");

            _queryBuilder.append('{');
            queryDef.define(new CartDiscountCodeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated costs that the buyer will pay at checkout. The estimated costs are subject to change
        * and changes will be reflected at checkout. The `estimatedCost` field uses the `buyerIdentity` field
        * to determine [international
        * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
        *
        * @deprecated Use `cost` instead.
        */
        @Deprecated
        public CartQuery estimatedCost(CartEstimatedCostQueryDefinition queryDef) {
            startField("estimatedCost");

            _queryBuilder.append('{');
            queryDef.define(new CartEstimatedCostQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class LinesArguments extends Arguments {
            LinesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public LinesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public LinesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public LinesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public LinesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public LinesArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface LinesArgumentsDefinition {
            void define(LinesArguments args);
        }

        /**
        * A list of lines containing information about the items the customer intends to purchase.
        */
        public CartQuery lines(BaseCartLineConnectionQueryDefinition queryDef) {
            return lines(args -> {}, queryDef);
        }

        /**
        * A list of lines containing information about the items the customer intends to purchase.
        */
        public CartQuery lines(LinesArgumentsDefinition argsDef, BaseCartLineConnectionQueryDefinition queryDef) {
            startField("lines");

            LinesArguments args = new LinesArguments(_queryBuilder);
            argsDef.define(args);
            LinesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new BaseCartLineConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CartQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CartQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public CartQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A note that's associated with the cart. For example, the note can be a personalized message to the
        * buyer.
        */
        public CartQuery note() {
            startField("note");

            return this;
        }

        /**
        * The total number of items in the cart.
        */
        public CartQuery totalQuantity() {
            startField("totalQuantity");

            return this;
        }

        /**
        * The date and time when the cart was updated.
        */
        public CartQuery updatedAt() {
            startField("updatedAt");

            return this;
        }
    }

    /**
    * A cart represents the merchandise that a buyer intends to purchase,
    * and the estimated cost associated with the cart. Learn how to
    * [interact with a
    * cart](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
    * during a customer's session.
    */
    public static class Cart extends AbstractResponse<Cart> implements HasMetafields, MetafieldParentResource, Node {
        public Cart() {
        }

        public Cart(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "appliedGiftCards": {
                        List<AppliedGiftCard> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new AppliedGiftCard(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "attribute": {
                        Attribute optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Attribute(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "attributes": {
                        List<Attribute> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Attribute(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "buyerIdentity": {
                        responseData.put(key, new CartBuyerIdentity(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "checkoutUrl": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "cost": {
                        responseData.put(key, new CartCost(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "createdAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "deliveryGroups": {
                        responseData.put(key, new CartDeliveryGroupConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "discountAllocations": {
                        List<CartDiscountAllocation> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownCartDiscountAllocation.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "discountCodes": {
                        List<CartDiscountCode> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartDiscountCode(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "estimatedCost": {
                        responseData.put(key, new CartEstimatedCost(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "lines": {
                        responseData.put(key, new BaseCartLineConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "note": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "totalQuantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Cart(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Cart";
        }

        /**
        * The gift cards that have been applied to the cart.
        */

        public List<AppliedGiftCard> getAppliedGiftCards() {
            return (List<AppliedGiftCard>) get("appliedGiftCards");
        }

        public Cart setAppliedGiftCards(List<AppliedGiftCard> arg) {
            optimisticData.put(getKey("appliedGiftCards"), arg);
            return this;
        }

        /**
        * An attribute associated with the cart.
        */

        public Attribute getAttribute() {
            return (Attribute) get("attribute");
        }

        public Cart setAttribute(Attribute arg) {
            optimisticData.put(getKey("attribute"), arg);
            return this;
        }

        /**
        * The attributes associated with the cart. Attributes are represented as key-value pairs.
        */

        public List<Attribute> getAttributes() {
            return (List<Attribute>) get("attributes");
        }

        public Cart setAttributes(List<Attribute> arg) {
            optimisticData.put(getKey("attributes"), arg);
            return this;
        }

        /**
        * Information about the buyer that's interacting with the cart.
        */

        public CartBuyerIdentity getBuyerIdentity() {
            return (CartBuyerIdentity) get("buyerIdentity");
        }

        public Cart setBuyerIdentity(CartBuyerIdentity arg) {
            optimisticData.put(getKey("buyerIdentity"), arg);
            return this;
        }

        /**
        * The URL of the checkout for the cart.
        */

        public String getCheckoutUrl() {
            return (String) get("checkoutUrl");
        }

        public Cart setCheckoutUrl(String arg) {
            optimisticData.put(getKey("checkoutUrl"), arg);
            return this;
        }

        /**
        * The estimated costs that the buyer will pay at checkout. The costs are subject to change and changes
        * will be reflected at checkout. The `cost` field uses the `buyerIdentity` field to determine
        * [international
        * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
        */

        public CartCost getCost() {
            return (CartCost) get("cost");
        }

        public Cart setCost(CartCost arg) {
            optimisticData.put(getKey("cost"), arg);
            return this;
        }

        /**
        * The date and time when the cart was created.
        */

        public DateTime getCreatedAt() {
            return (DateTime) get("createdAt");
        }

        public Cart setCreatedAt(DateTime arg) {
            optimisticData.put(getKey("createdAt"), arg);
            return this;
        }

        /**
        * The delivery groups available for the cart, based on the buyer identity default
        * delivery address preference or the default address of the logged-in customer.
        */

        public CartDeliveryGroupConnection getDeliveryGroups() {
            return (CartDeliveryGroupConnection) get("deliveryGroups");
        }

        public Cart setDeliveryGroups(CartDeliveryGroupConnection arg) {
            optimisticData.put(getKey("deliveryGroups"), arg);
            return this;
        }

        /**
        * The discounts that have been applied to the entire cart.
        */

        public List<CartDiscountAllocation> getDiscountAllocations() {
            return (List<CartDiscountAllocation>) get("discountAllocations");
        }

        public Cart setDiscountAllocations(List<CartDiscountAllocation> arg) {
            optimisticData.put(getKey("discountAllocations"), arg);
            return this;
        }

        /**
        * The case-insensitive discount codes that the customer added at checkout.
        */

        public List<CartDiscountCode> getDiscountCodes() {
            return (List<CartDiscountCode>) get("discountCodes");
        }

        public Cart setDiscountCodes(List<CartDiscountCode> arg) {
            optimisticData.put(getKey("discountCodes"), arg);
            return this;
        }

        /**
        * The estimated costs that the buyer will pay at checkout. The estimated costs are subject to change
        * and changes will be reflected at checkout. The `estimatedCost` field uses the `buyerIdentity` field
        * to determine [international
        * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
        *
        * @deprecated Use `cost` instead.
        */

        public CartEstimatedCost getEstimatedCost() {
            return (CartEstimatedCost) get("estimatedCost");
        }

        public Cart setEstimatedCost(CartEstimatedCost arg) {
            optimisticData.put(getKey("estimatedCost"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * A list of lines containing information about the items the customer intends to purchase.
        */

        public BaseCartLineConnection getLines() {
            return (BaseCartLineConnection) get("lines");
        }

        public Cart setLines(BaseCartLineConnection arg) {
            optimisticData.put(getKey("lines"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Cart setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Cart setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * A note that's associated with the cart. For example, the note can be a personalized message to the
        * buyer.
        */

        public String getNote() {
            return (String) get("note");
        }

        public Cart setNote(String arg) {
            optimisticData.put(getKey("note"), arg);
            return this;
        }

        /**
        * The total number of items in the cart.
        */

        public Integer getTotalQuantity() {
            return (Integer) get("totalQuantity");
        }

        public Cart setTotalQuantity(Integer arg) {
            optimisticData.put(getKey("totalQuantity"), arg);
            return this;
        }

        /**
        * The date and time when the cart was updated.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public Cart setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "appliedGiftCards": return true;

                case "attribute": return true;

                case "attributes": return true;

                case "buyerIdentity": return true;

                case "checkoutUrl": return false;

                case "cost": return true;

                case "createdAt": return false;

                case "deliveryGroups": return true;

                case "discountAllocations": return false;

                case "discountCodes": return true;

                case "estimatedCost": return true;

                case "id": return false;

                case "lines": return true;

                case "metafield": return true;

                case "metafields": return true;

                case "note": return false;

                case "totalQuantity": return false;

                case "updatedAt": return false;

                default: return false;
            }
        }
    }

    public interface CartAttributesUpdatePayloadQueryDefinition {
        void define(CartAttributesUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartAttributesUpdate` mutation.
    */
    public static class CartAttributesUpdatePayloadQuery extends Query<CartAttributesUpdatePayloadQuery> {
        CartAttributesUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartAttributesUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartAttributesUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartAttributesUpdate` mutation.
    */
    public static class CartAttributesUpdatePayload extends AbstractResponse<CartAttributesUpdatePayload> {
        public CartAttributesUpdatePayload() {
        }

        public CartAttributesUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartAttributesUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartAttributesUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartAttributesUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartAutomaticDiscountAllocationQueryDefinition {
        void define(CartAutomaticDiscountAllocationQuery _queryBuilder);
    }

    /**
    * The discounts automatically applied to the cart line based on prerequisites that have been met.
    */
    public static class CartAutomaticDiscountAllocationQuery extends Query<CartAutomaticDiscountAllocationQuery> {
        CartAutomaticDiscountAllocationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The discounted amount that has been applied to the cart line.
        */
        public CartAutomaticDiscountAllocationQuery discountedAmount(MoneyV2QueryDefinition queryDef) {
            startField("discountedAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public CartAutomaticDiscountAllocationQuery targetType() {
            startField("targetType");

            return this;
        }

        /**
        * The title of the allocated discount.
        */
        public CartAutomaticDiscountAllocationQuery title() {
            startField("title");

            return this;
        }
    }

    /**
    * The discounts automatically applied to the cart line based on prerequisites that have been met.
    */
    public static class CartAutomaticDiscountAllocation extends AbstractResponse<CartAutomaticDiscountAllocation> implements CartDiscountAllocation {
        public CartAutomaticDiscountAllocation() {
        }

        public CartAutomaticDiscountAllocation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discountedAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartAutomaticDiscountAllocation";
        }

        /**
        * The discounted amount that has been applied to the cart line.
        */

        public MoneyV2 getDiscountedAmount() {
            return (MoneyV2) get("discountedAmount");
        }

        public CartAutomaticDiscountAllocation setDiscountedAmount(MoneyV2 arg) {
            optimisticData.put(getKey("discountedAmount"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public CartAutomaticDiscountAllocation setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        /**
        * The title of the allocated discount.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public CartAutomaticDiscountAllocation setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discountedAmount": return true;

                case "targetType": return false;

                case "title": return false;

                default: return false;
            }
        }
    }

    public interface CartBillingAddressUpdatePayloadQueryDefinition {
        void define(CartBillingAddressUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartBillingAddressUpdate` mutation.
    */
    public static class CartBillingAddressUpdatePayloadQuery extends Query<CartBillingAddressUpdatePayloadQuery> {
        CartBillingAddressUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartBillingAddressUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartBillingAddressUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartBillingAddressUpdate` mutation.
    */
    public static class CartBillingAddressUpdatePayload extends AbstractResponse<CartBillingAddressUpdatePayload> {
        public CartBillingAddressUpdatePayload() {
        }

        public CartBillingAddressUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartBillingAddressUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartBillingAddressUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartBillingAddressUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartBuyerIdentityQueryDefinition {
        void define(CartBuyerIdentityQuery _queryBuilder);
    }

    /**
    * Represents information about the buyer that is interacting with the cart.
    */
    public static class CartBuyerIdentityQuery extends Query<CartBuyerIdentityQuery> {
        CartBuyerIdentityQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The country where the buyer is located.
        */
        public CartBuyerIdentityQuery countryCode() {
            startField("countryCode");

            return this;
        }

        /**
        * The customer account associated with the cart.
        */
        public CartBuyerIdentityQuery customer(CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * An ordered set of delivery addresses tied to the buyer that is interacting with the cart.
        * The rank of the preferences is determined by the order of the addresses in the array. Preferences
        * can be used to populate relevant fields in the checkout flow.
        */
        public CartBuyerIdentityQuery deliveryAddressPreferences(DeliveryAddressQueryDefinition queryDef) {
            startField("deliveryAddressPreferences");

            _queryBuilder.append('{');
            queryDef.define(new DeliveryAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The email address of the buyer that's interacting with the cart.
        */
        public CartBuyerIdentityQuery email() {
            startField("email");

            return this;
        }

        /**
        * The phone number of the buyer that's interacting with the cart.
        */
        public CartBuyerIdentityQuery phone() {
            startField("phone");

            return this;
        }

        /**
        * A set of preferences tied to the buyer interacting with the cart. Preferences are used to prefill
        * fields in at checkout to streamline information collection. 
        * Preferences are not synced back to the cart if they are overwritten.
        */
        public CartBuyerIdentityQuery preferences(CartPreferencesQueryDefinition queryDef) {
            startField("preferences");

            _queryBuilder.append('{');
            queryDef.define(new CartPreferencesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The purchasing company associated with the cart.
        */
        public CartBuyerIdentityQuery purchasingCompany(PurchasingCompanyQueryDefinition queryDef) {
            startField("purchasingCompany");

            _queryBuilder.append('{');
            queryDef.define(new PurchasingCompanyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents information about the buyer that is interacting with the cart.
    */
    public static class CartBuyerIdentity extends AbstractResponse<CartBuyerIdentity> {
        public CartBuyerIdentity() {
        }

        public CartBuyerIdentity(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "countryCode": {
                        CountryCode optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = CountryCode.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "deliveryAddressPreferences": {
                        List<DeliveryAddress> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownDeliveryAddress.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "email": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "preferences": {
                        CartPreferences optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartPreferences(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "purchasingCompany": {
                        PurchasingCompany optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new PurchasingCompany(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartBuyerIdentity";
        }

        /**
        * The country where the buyer is located.
        */

        public CountryCode getCountryCode() {
            return (CountryCode) get("countryCode");
        }

        public CartBuyerIdentity setCountryCode(CountryCode arg) {
            optimisticData.put(getKey("countryCode"), arg);
            return this;
        }

        /**
        * The customer account associated with the cart.
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public CartBuyerIdentity setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * An ordered set of delivery addresses tied to the buyer that is interacting with the cart.
        * The rank of the preferences is determined by the order of the addresses in the array. Preferences
        * can be used to populate relevant fields in the checkout flow.
        */

        public List<DeliveryAddress> getDeliveryAddressPreferences() {
            return (List<DeliveryAddress>) get("deliveryAddressPreferences");
        }

        public CartBuyerIdentity setDeliveryAddressPreferences(List<DeliveryAddress> arg) {
            optimisticData.put(getKey("deliveryAddressPreferences"), arg);
            return this;
        }

        /**
        * The email address of the buyer that's interacting with the cart.
        */

        public String getEmail() {
            return (String) get("email");
        }

        public CartBuyerIdentity setEmail(String arg) {
            optimisticData.put(getKey("email"), arg);
            return this;
        }

        /**
        * The phone number of the buyer that's interacting with the cart.
        */

        public String getPhone() {
            return (String) get("phone");
        }

        public CartBuyerIdentity setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        /**
        * A set of preferences tied to the buyer interacting with the cart. Preferences are used to prefill
        * fields in at checkout to streamline information collection. 
        * Preferences are not synced back to the cart if they are overwritten.
        */

        public CartPreferences getPreferences() {
            return (CartPreferences) get("preferences");
        }

        public CartBuyerIdentity setPreferences(CartPreferences arg) {
            optimisticData.put(getKey("preferences"), arg);
            return this;
        }

        /**
        * The purchasing company associated with the cart.
        */

        public PurchasingCompany getPurchasingCompany() {
            return (PurchasingCompany) get("purchasingCompany");
        }

        public CartBuyerIdentity setPurchasingCompany(PurchasingCompany arg) {
            optimisticData.put(getKey("purchasingCompany"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "countryCode": return false;

                case "customer": return true;

                case "deliveryAddressPreferences": return false;

                case "email": return false;

                case "phone": return false;

                case "preferences": return true;

                case "purchasingCompany": return true;

                default: return false;
            }
        }
    }

    public static class CartBuyerIdentityInput implements Serializable {
        private Input<String> email = Input.undefined();

        private Input<String> phone = Input.undefined();

        private Input<ID> companyLocationId = Input.undefined();

        private Input<CountryCode> countryCode = Input.undefined();

        private Input<String> customerAccessToken = Input.undefined();

        private Input<List<DeliveryAddressInput>> deliveryAddressPreferences = Input.undefined();

        private Input<CartPreferencesInput> preferences = Input.undefined();

        public String getEmail() {
            return email.getValue();
        }

        public Input<String> getEmailInput() {
            return email;
        }

        public CartBuyerIdentityInput setEmail(String email) {
            this.email = Input.optional(email);
            return this;
        }

        public CartBuyerIdentityInput setEmailInput(Input<String> email) {
            if (email == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.email = email;
            return this;
        }

        public String getPhone() {
            return phone.getValue();
        }

        public Input<String> getPhoneInput() {
            return phone;
        }

        public CartBuyerIdentityInput setPhone(String phone) {
            this.phone = Input.optional(phone);
            return this;
        }

        public CartBuyerIdentityInput setPhoneInput(Input<String> phone) {
            if (phone == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.phone = phone;
            return this;
        }

        public ID getCompanyLocationId() {
            return companyLocationId.getValue();
        }

        public Input<ID> getCompanyLocationIdInput() {
            return companyLocationId;
        }

        public CartBuyerIdentityInput setCompanyLocationId(ID companyLocationId) {
            this.companyLocationId = Input.optional(companyLocationId);
            return this;
        }

        public CartBuyerIdentityInput setCompanyLocationIdInput(Input<ID> companyLocationId) {
            if (companyLocationId == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.companyLocationId = companyLocationId;
            return this;
        }

        public CountryCode getCountryCode() {
            return countryCode.getValue();
        }

        public Input<CountryCode> getCountryCodeInput() {
            return countryCode;
        }

        public CartBuyerIdentityInput setCountryCode(CountryCode countryCode) {
            this.countryCode = Input.optional(countryCode);
            return this;
        }

        public CartBuyerIdentityInput setCountryCodeInput(Input<CountryCode> countryCode) {
            if (countryCode == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.countryCode = countryCode;
            return this;
        }

        public String getCustomerAccessToken() {
            return customerAccessToken.getValue();
        }

        public Input<String> getCustomerAccessTokenInput() {
            return customerAccessToken;
        }

        public CartBuyerIdentityInput setCustomerAccessToken(String customerAccessToken) {
            this.customerAccessToken = Input.optional(customerAccessToken);
            return this;
        }

        public CartBuyerIdentityInput setCustomerAccessTokenInput(Input<String> customerAccessToken) {
            if (customerAccessToken == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.customerAccessToken = customerAccessToken;
            return this;
        }

        public List<DeliveryAddressInput> getDeliveryAddressPreferences() {
            return deliveryAddressPreferences.getValue();
        }

        public Input<List<DeliveryAddressInput>> getDeliveryAddressPreferencesInput() {
            return deliveryAddressPreferences;
        }

        public CartBuyerIdentityInput setDeliveryAddressPreferences(List<DeliveryAddressInput> deliveryAddressPreferences) {
            this.deliveryAddressPreferences = Input.optional(deliveryAddressPreferences);
            return this;
        }

        public CartBuyerIdentityInput setDeliveryAddressPreferencesInput(Input<List<DeliveryAddressInput>> deliveryAddressPreferences) {
            if (deliveryAddressPreferences == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.deliveryAddressPreferences = deliveryAddressPreferences;
            return this;
        }

        public CartPreferencesInput getPreferences() {
            return preferences.getValue();
        }

        public Input<CartPreferencesInput> getPreferencesInput() {
            return preferences;
        }

        public CartBuyerIdentityInput setPreferences(CartPreferencesInput preferences) {
            this.preferences = Input.optional(preferences);
            return this;
        }

        public CartBuyerIdentityInput setPreferencesInput(Input<CartPreferencesInput> preferences) {
            if (preferences == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.preferences = preferences;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.email.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("email:");
                if (email.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, email.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.phone.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                if (phone.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, phone.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.companyLocationId.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("companyLocationId:");
                if (companyLocationId.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, companyLocationId.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.countryCode.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("countryCode:");
                if (countryCode.getValue() != null) {
                    _queryBuilder.append(countryCode.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.customerAccessToken.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customerAccessToken:");
                if (customerAccessToken.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, customerAccessToken.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.deliveryAddressPreferences.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("deliveryAddressPreferences:");
                if (deliveryAddressPreferences.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (DeliveryAddressInput item1 : deliveryAddressPreferences.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.preferences.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("preferences:");
                if (preferences.getValue() != null) {
                    preferences.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface CartBuyerIdentityUpdatePayloadQueryDefinition {
        void define(CartBuyerIdentityUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartBuyerIdentityUpdate` mutation.
    */
    public static class CartBuyerIdentityUpdatePayloadQuery extends Query<CartBuyerIdentityUpdatePayloadQuery> {
        CartBuyerIdentityUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartBuyerIdentityUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartBuyerIdentityUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartBuyerIdentityUpdate` mutation.
    */
    public static class CartBuyerIdentityUpdatePayload extends AbstractResponse<CartBuyerIdentityUpdatePayload> {
        public CartBuyerIdentityUpdatePayload() {
        }

        public CartBuyerIdentityUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartBuyerIdentityUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartBuyerIdentityUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartBuyerIdentityUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    /**
    * Represents how credit card details are provided for a direct payment.
    */
    public enum CartCardSource {
        /**
        * The credit card was provided by a third party and vaulted on their system.
        * Using this value requires a separate permission from Shopify.
        */
        SAVED_CREDIT_CARD,

        UNKNOWN_VALUE;

        public static CartCardSource fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "SAVED_CREDIT_CARD": {
                    return SAVED_CREDIT_CARD;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case SAVED_CREDIT_CARD: {
                    return "SAVED_CREDIT_CARD";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface CartCodeDiscountAllocationQueryDefinition {
        void define(CartCodeDiscountAllocationQuery _queryBuilder);
    }

    /**
    * The discount that has been applied to the cart line using a discount code.
    */
    public static class CartCodeDiscountAllocationQuery extends Query<CartCodeDiscountAllocationQuery> {
        CartCodeDiscountAllocationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The code used to apply the discount.
        */
        public CartCodeDiscountAllocationQuery code() {
            startField("code");

            return this;
        }

        /**
        * The discounted amount that has been applied to the cart line.
        */
        public CartCodeDiscountAllocationQuery discountedAmount(MoneyV2QueryDefinition queryDef) {
            startField("discountedAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public CartCodeDiscountAllocationQuery targetType() {
            startField("targetType");

            return this;
        }
    }

    /**
    * The discount that has been applied to the cart line using a discount code.
    */
    public static class CartCodeDiscountAllocation extends AbstractResponse<CartCodeDiscountAllocation> implements CartDiscountAllocation {
        public CartCodeDiscountAllocation() {
        }

        public CartCodeDiscountAllocation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "discountedAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartCodeDiscountAllocation";
        }

        /**
        * The code used to apply the discount.
        */

        public String getCode() {
            return (String) get("code");
        }

        public CartCodeDiscountAllocation setCode(String arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The discounted amount that has been applied to the cart line.
        */

        public MoneyV2 getDiscountedAmount() {
            return (MoneyV2) get("discountedAmount");
        }

        public CartCodeDiscountAllocation setDiscountedAmount(MoneyV2 arg) {
            optimisticData.put(getKey("discountedAmount"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public CartCodeDiscountAllocation setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "discountedAmount": return true;

                case "targetType": return false;

                default: return false;
            }
        }
    }

    public interface CartCompletionActionQueryDefinition {
        void define(CartCompletionActionQuery _queryBuilder);
    }

    /**
    * The completion action to checkout a cart.
    */
    public static class CartCompletionActionQuery extends Query<CartCompletionActionQuery> {
        CartCompletionActionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public CartCompletionActionQuery onCompletePaymentChallenge(CompletePaymentChallengeQueryDefinition queryDef) {
            startInlineFragment("CompletePaymentChallenge");
            queryDef.define(new CompletePaymentChallengeQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface CartCompletionAction {
        String getGraphQlTypeName();
    }

    /**
    * The completion action to checkout a cart.
    */
    public static class UnknownCartCompletionAction extends AbstractResponse<UnknownCartCompletionAction> implements CartCompletionAction {
        public UnknownCartCompletionAction() {
        }

        public UnknownCartCompletionAction(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static CartCompletionAction create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "CompletePaymentChallenge": {
                    return new CompletePaymentChallenge(fields);
                }

                default: {
                    return new UnknownCartCompletionAction(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface CartCompletionActionRequiredQueryDefinition {
        void define(CartCompletionActionRequiredQuery _queryBuilder);
    }

    /**
    * The required completion action to checkout a cart.
    */
    public static class CartCompletionActionRequiredQuery extends Query<CartCompletionActionRequiredQuery> {
        CartCompletionActionRequiredQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The action required to complete the cart completion attempt.
        */
        public CartCompletionActionRequiredQuery action(CartCompletionActionQueryDefinition queryDef) {
            startField("action");

            _queryBuilder.append('{');
            queryDef.define(new CartCompletionActionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The ID of the cart completion attempt.
        */
        public CartCompletionActionRequiredQuery id() {
            startField("id");

            return this;
        }
    }

    /**
    * The required completion action to checkout a cart.
    */
    public static class CartCompletionActionRequired extends AbstractResponse<CartCompletionActionRequired> implements CartCompletionAttemptResult {
        public CartCompletionActionRequired() {
        }

        public CartCompletionActionRequired(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "action": {
                        CartCompletionAction optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownCartCompletionAction.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartCompletionActionRequired";
        }

        /**
        * The action required to complete the cart completion attempt.
        */

        public CartCompletionAction getAction() {
            return (CartCompletionAction) get("action");
        }

        public CartCompletionActionRequired setAction(CartCompletionAction arg) {
            optimisticData.put(getKey("action"), arg);
            return this;
        }

        /**
        * The ID of the cart completion attempt.
        */

        public String getId() {
            return (String) get("id");
        }

        public CartCompletionActionRequired setId(String arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "action": return false;

                case "id": return false;

                default: return false;
            }
        }
    }

    public interface CartCompletionAttemptResultQueryDefinition {
        void define(CartCompletionAttemptResultQuery _queryBuilder);
    }

    /**
    * The result of a cart completion attempt.
    */
    public static class CartCompletionAttemptResultQuery extends Query<CartCompletionAttemptResultQuery> {
        CartCompletionAttemptResultQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public CartCompletionAttemptResultQuery onCartCompletionActionRequired(CartCompletionActionRequiredQueryDefinition queryDef) {
            startInlineFragment("CartCompletionActionRequired");
            queryDef.define(new CartCompletionActionRequiredQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public CartCompletionAttemptResultQuery onCartCompletionFailed(CartCompletionFailedQueryDefinition queryDef) {
            startInlineFragment("CartCompletionFailed");
            queryDef.define(new CartCompletionFailedQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public CartCompletionAttemptResultQuery onCartCompletionProcessing(CartCompletionProcessingQueryDefinition queryDef) {
            startInlineFragment("CartCompletionProcessing");
            queryDef.define(new CartCompletionProcessingQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public CartCompletionAttemptResultQuery onCartCompletionSuccess(CartCompletionSuccessQueryDefinition queryDef) {
            startInlineFragment("CartCompletionSuccess");
            queryDef.define(new CartCompletionSuccessQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface CartCompletionAttemptResult {
        String getGraphQlTypeName();
    }

    /**
    * The result of a cart completion attempt.
    */
    public static class UnknownCartCompletionAttemptResult extends AbstractResponse<UnknownCartCompletionAttemptResult> implements CartCompletionAttemptResult {
        public UnknownCartCompletionAttemptResult() {
        }

        public UnknownCartCompletionAttemptResult(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static CartCompletionAttemptResult create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "CartCompletionActionRequired": {
                    return new CartCompletionActionRequired(fields);
                }

                case "CartCompletionFailed": {
                    return new CartCompletionFailed(fields);
                }

                case "CartCompletionProcessing": {
                    return new CartCompletionProcessing(fields);
                }

                case "CartCompletionSuccess": {
                    return new CartCompletionSuccess(fields);
                }

                default: {
                    return new UnknownCartCompletionAttemptResult(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface CartCompletionFailedQueryDefinition {
        void define(CartCompletionFailedQuery _queryBuilder);
    }

    /**
    * A failed completion to checkout a cart.
    */
    public static class CartCompletionFailedQuery extends Query<CartCompletionFailedQuery> {
        CartCompletionFailedQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The errors that caused the checkout to fail.
        */
        public CartCompletionFailedQuery errors(CompletionErrorQueryDefinition queryDef) {
            startField("errors");

            _queryBuilder.append('{');
            queryDef.define(new CompletionErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The ID of the cart completion attempt.
        */
        public CartCompletionFailedQuery id() {
            startField("id");

            return this;
        }
    }

    /**
    * A failed completion to checkout a cart.
    */
    public static class CartCompletionFailed extends AbstractResponse<CartCompletionFailed> implements CartCompletionAttemptResult {
        public CartCompletionFailed() {
        }

        public CartCompletionFailed(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "errors": {
                        List<CompletionError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CompletionError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartCompletionFailed";
        }

        /**
        * The errors that caused the checkout to fail.
        */

        public List<CompletionError> getErrors() {
            return (List<CompletionError>) get("errors");
        }

        public CartCompletionFailed setErrors(List<CompletionError> arg) {
            optimisticData.put(getKey("errors"), arg);
            return this;
        }

        /**
        * The ID of the cart completion attempt.
        */

        public String getId() {
            return (String) get("id");
        }

        public CartCompletionFailed setId(String arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "errors": return true;

                case "id": return false;

                default: return false;
            }
        }
    }

    public interface CartCompletionProcessingQueryDefinition {
        void define(CartCompletionProcessingQuery _queryBuilder);
    }

    /**
    * A cart checkout completion that's still processing.
    */
    public static class CartCompletionProcessingQuery extends Query<CartCompletionProcessingQuery> {
        CartCompletionProcessingQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The ID of the cart completion attempt.
        */
        public CartCompletionProcessingQuery id() {
            startField("id");

            return this;
        }

        /**
        * The number of milliseconds to wait before polling again.
        */
        public CartCompletionProcessingQuery pollDelay() {
            startField("pollDelay");

            return this;
        }
    }

    /**
    * A cart checkout completion that's still processing.
    */
    public static class CartCompletionProcessing extends AbstractResponse<CartCompletionProcessing> implements CartCompletionAttemptResult {
        public CartCompletionProcessing() {
        }

        public CartCompletionProcessing(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "pollDelay": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartCompletionProcessing";
        }

        /**
        * The ID of the cart completion attempt.
        */

        public String getId() {
            return (String) get("id");
        }

        public CartCompletionProcessing setId(String arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The number of milliseconds to wait before polling again.
        */

        public Integer getPollDelay() {
            return (Integer) get("pollDelay");
        }

        public CartCompletionProcessing setPollDelay(Integer arg) {
            optimisticData.put(getKey("pollDelay"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "id": return false;

                case "pollDelay": return false;

                default: return false;
            }
        }
    }

    public interface CartCompletionSuccessQueryDefinition {
        void define(CartCompletionSuccessQuery _queryBuilder);
    }

    /**
    * A successful completion to checkout a cart and a created order.
    */
    public static class CartCompletionSuccessQuery extends Query<CartCompletionSuccessQuery> {
        CartCompletionSuccessQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The date and time when the job completed.
        */
        public CartCompletionSuccessQuery completedAt() {
            startField("completedAt");

            return this;
        }

        /**
        * The ID of the cart completion attempt.
        */
        public CartCompletionSuccessQuery id() {
            startField("id");

            return this;
        }

        /**
        * The ID of the order that's created in Shopify.
        */
        public CartCompletionSuccessQuery orderId() {
            startField("orderId");

            return this;
        }

        /**
        * The URL of the order confirmation in Shopify.
        */
        public CartCompletionSuccessQuery orderUrl() {
            startField("orderUrl");

            return this;
        }
    }

    /**
    * A successful completion to checkout a cart and a created order.
    */
    public static class CartCompletionSuccess extends AbstractResponse<CartCompletionSuccess> implements CartCompletionAttemptResult {
        public CartCompletionSuccess() {
        }

        public CartCompletionSuccess(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "completedAt": {
                        DateTime optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = Utils.parseDateTime(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "orderId": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "orderUrl": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartCompletionSuccess";
        }

        /**
        * The date and time when the job completed.
        */

        public DateTime getCompletedAt() {
            return (DateTime) get("completedAt");
        }

        public CartCompletionSuccess setCompletedAt(DateTime arg) {
            optimisticData.put(getKey("completedAt"), arg);
            return this;
        }

        /**
        * The ID of the cart completion attempt.
        */

        public String getId() {
            return (String) get("id");
        }

        public CartCompletionSuccess setId(String arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The ID of the order that's created in Shopify.
        */

        public ID getOrderId() {
            return (ID) get("orderId");
        }

        public CartCompletionSuccess setOrderId(ID arg) {
            optimisticData.put(getKey("orderId"), arg);
            return this;
        }

        /**
        * The URL of the order confirmation in Shopify.
        */

        public String getOrderUrl() {
            return (String) get("orderUrl");
        }

        public CartCompletionSuccess setOrderUrl(String arg) {
            optimisticData.put(getKey("orderUrl"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "completedAt": return false;

                case "id": return false;

                case "orderId": return false;

                case "orderUrl": return false;

                default: return false;
            }
        }
    }

    public interface CartCostQueryDefinition {
        void define(CartCostQuery _queryBuilder);
    }

    /**
    * The costs that the buyer will pay at checkout.
    * The cart cost uses
    * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to
    * determine
    * [international
    * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
    */
    public static class CartCostQuery extends Query<CartCostQuery> {
        CartCostQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout
        * charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has
        * no deferred payments, then the checkout charge amount is equivalent to `subtotalAmount`.
        */
        public CartCostQuery checkoutChargeAmount(MoneyV2QueryDefinition queryDef) {
            startField("checkoutChargeAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The amount, before taxes and cart-level discounts, for the customer to pay.
        */
        public CartCostQuery subtotalAmount(MoneyV2QueryDefinition queryDef) {
            startField("subtotalAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether the subtotal amount is estimated.
        */
        public CartCostQuery subtotalAmountEstimated() {
            startField("subtotalAmountEstimated");

            return this;
        }

        /**
        * The total amount for the customer to pay.
        */
        public CartCostQuery totalAmount(MoneyV2QueryDefinition queryDef) {
            startField("totalAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether the total amount is estimated.
        */
        public CartCostQuery totalAmountEstimated() {
            startField("totalAmountEstimated");

            return this;
        }

        /**
        * The duty amount for the customer to pay at checkout.
        */
        public CartCostQuery totalDutyAmount(MoneyV2QueryDefinition queryDef) {
            startField("totalDutyAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether the total duty amount is estimated.
        */
        public CartCostQuery totalDutyAmountEstimated() {
            startField("totalDutyAmountEstimated");

            return this;
        }

        /**
        * The tax amount for the customer to pay at checkout.
        */
        public CartCostQuery totalTaxAmount(MoneyV2QueryDefinition queryDef) {
            startField("totalTaxAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether the total tax amount is estimated.
        */
        public CartCostQuery totalTaxAmountEstimated() {
            startField("totalTaxAmountEstimated");

            return this;
        }
    }

    /**
    * The costs that the buyer will pay at checkout.
    * The cart cost uses
    * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to
    * determine
    * [international
    * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
    */
    public static class CartCost extends AbstractResponse<CartCost> {
        public CartCost() {
        }

        public CartCost(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "checkoutChargeAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "subtotalAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "subtotalAmountEstimated": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "totalAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalAmountEstimated": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "totalDutyAmount": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "totalDutyAmountEstimated": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "totalTaxAmount": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "totalTaxAmountEstimated": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartCost";
        }

        /**
        * The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout
        * charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has
        * no deferred payments, then the checkout charge amount is equivalent to `subtotalAmount`.
        */

        public MoneyV2 getCheckoutChargeAmount() {
            return (MoneyV2) get("checkoutChargeAmount");
        }

        public CartCost setCheckoutChargeAmount(MoneyV2 arg) {
            optimisticData.put(getKey("checkoutChargeAmount"), arg);
            return this;
        }

        /**
        * The amount, before taxes and cart-level discounts, for the customer to pay.
        */

        public MoneyV2 getSubtotalAmount() {
            return (MoneyV2) get("subtotalAmount");
        }

        public CartCost setSubtotalAmount(MoneyV2 arg) {
            optimisticData.put(getKey("subtotalAmount"), arg);
            return this;
        }

        /**
        * Whether the subtotal amount is estimated.
        */

        public Boolean getSubtotalAmountEstimated() {
            return (Boolean) get("subtotalAmountEstimated");
        }

        public CartCost setSubtotalAmountEstimated(Boolean arg) {
            optimisticData.put(getKey("subtotalAmountEstimated"), arg);
            return this;
        }

        /**
        * The total amount for the customer to pay.
        */

        public MoneyV2 getTotalAmount() {
            return (MoneyV2) get("totalAmount");
        }

        public CartCost setTotalAmount(MoneyV2 arg) {
            optimisticData.put(getKey("totalAmount"), arg);
            return this;
        }

        /**
        * Whether the total amount is estimated.
        */

        public Boolean getTotalAmountEstimated() {
            return (Boolean) get("totalAmountEstimated");
        }

        public CartCost setTotalAmountEstimated(Boolean arg) {
            optimisticData.put(getKey("totalAmountEstimated"), arg);
            return this;
        }

        /**
        * The duty amount for the customer to pay at checkout.
        */

        public MoneyV2 getTotalDutyAmount() {
            return (MoneyV2) get("totalDutyAmount");
        }

        public CartCost setTotalDutyAmount(MoneyV2 arg) {
            optimisticData.put(getKey("totalDutyAmount"), arg);
            return this;
        }

        /**
        * Whether the total duty amount is estimated.
        */

        public Boolean getTotalDutyAmountEstimated() {
            return (Boolean) get("totalDutyAmountEstimated");
        }

        public CartCost setTotalDutyAmountEstimated(Boolean arg) {
            optimisticData.put(getKey("totalDutyAmountEstimated"), arg);
            return this;
        }

        /**
        * The tax amount for the customer to pay at checkout.
        */

        public MoneyV2 getTotalTaxAmount() {
            return (MoneyV2) get("totalTaxAmount");
        }

        public CartCost setTotalTaxAmount(MoneyV2 arg) {
            optimisticData.put(getKey("totalTaxAmount"), arg);
            return this;
        }

        /**
        * Whether the total tax amount is estimated.
        */

        public Boolean getTotalTaxAmountEstimated() {
            return (Boolean) get("totalTaxAmountEstimated");
        }

        public CartCost setTotalTaxAmountEstimated(Boolean arg) {
            optimisticData.put(getKey("totalTaxAmountEstimated"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "checkoutChargeAmount": return true;

                case "subtotalAmount": return true;

                case "subtotalAmountEstimated": return false;

                case "totalAmount": return true;

                case "totalAmountEstimated": return false;

                case "totalDutyAmount": return true;

                case "totalDutyAmountEstimated": return false;

                case "totalTaxAmount": return true;

                case "totalTaxAmountEstimated": return false;

                default: return false;
            }
        }
    }

    public interface CartCreatePayloadQueryDefinition {
        void define(CartCreatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartCreate` mutation.
    */
    public static class CartCreatePayloadQuery extends Query<CartCreatePayloadQuery> {
        CartCreatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The new cart.
        */
        public CartCreatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartCreatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartCreate` mutation.
    */
    public static class CartCreatePayload extends AbstractResponse<CartCreatePayload> {
        public CartCreatePayload() {
        }

        public CartCreatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartCreatePayload";
        }

        /**
        * The new cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartCreatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartCreatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartCustomDiscountAllocationQueryDefinition {
        void define(CartCustomDiscountAllocationQuery _queryBuilder);
    }

    /**
    * The discounts automatically applied to the cart line based on prerequisites that have been met.
    */
    public static class CartCustomDiscountAllocationQuery extends Query<CartCustomDiscountAllocationQuery> {
        CartCustomDiscountAllocationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The discounted amount that has been applied to the cart line.
        */
        public CartCustomDiscountAllocationQuery discountedAmount(MoneyV2QueryDefinition queryDef) {
            startField("discountedAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public CartCustomDiscountAllocationQuery targetType() {
            startField("targetType");

            return this;
        }

        /**
        * The title of the allocated discount.
        */
        public CartCustomDiscountAllocationQuery title() {
            startField("title");

            return this;
        }
    }

    /**
    * The discounts automatically applied to the cart line based on prerequisites that have been met.
    */
    public static class CartCustomDiscountAllocation extends AbstractResponse<CartCustomDiscountAllocation> implements CartDiscountAllocation {
        public CartCustomDiscountAllocation() {
        }

        public CartCustomDiscountAllocation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discountedAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartCustomDiscountAllocation";
        }

        /**
        * The discounted amount that has been applied to the cart line.
        */

        public MoneyV2 getDiscountedAmount() {
            return (MoneyV2) get("discountedAmount");
        }

        public CartCustomDiscountAllocation setDiscountedAmount(MoneyV2 arg) {
            optimisticData.put(getKey("discountedAmount"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public CartCustomDiscountAllocation setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        /**
        * The title of the allocated discount.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public CartCustomDiscountAllocation setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discountedAmount": return true;

                case "targetType": return false;

                case "title": return false;

                default: return false;
            }
        }
    }

    public interface CartDeliveryCoordinatesPreferenceQueryDefinition {
        void define(CartDeliveryCoordinatesPreferenceQuery _queryBuilder);
    }

    /**
    * Preferred location used to find the closest pick up point based on coordinates.
    */
    public static class CartDeliveryCoordinatesPreferenceQuery extends Query<CartDeliveryCoordinatesPreferenceQuery> {
        CartDeliveryCoordinatesPreferenceQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The two-letter code for the country of the preferred location.
        * For example, US.
        */
        public CartDeliveryCoordinatesPreferenceQuery countryCode() {
            startField("countryCode");

            return this;
        }

        /**
        * The geographic latitude for a given location. Coordinates are required in order to set pickUpHandle
        * for pickup points.
        */
        public CartDeliveryCoordinatesPreferenceQuery latitude() {
            startField("latitude");

            return this;
        }

        /**
        * The geographic longitude for a given location. Coordinates are required in order to set pickUpHandle
        * for pickup points.
        */
        public CartDeliveryCoordinatesPreferenceQuery longitude() {
            startField("longitude");

            return this;
        }
    }

    /**
    * Preferred location used to find the closest pick up point based on coordinates.
    */
    public static class CartDeliveryCoordinatesPreference extends AbstractResponse<CartDeliveryCoordinatesPreference> {
        public CartDeliveryCoordinatesPreference() {
        }

        public CartDeliveryCoordinatesPreference(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "countryCode": {
                        responseData.put(key, CountryCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "latitude": {
                        responseData.put(key, jsonAsDouble(field.getValue(), key));

                        break;
                    }

                    case "longitude": {
                        responseData.put(key, jsonAsDouble(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartDeliveryCoordinatesPreference";
        }

        /**
        * The two-letter code for the country of the preferred location.
        * For example, US.
        */

        public CountryCode getCountryCode() {
            return (CountryCode) get("countryCode");
        }

        public CartDeliveryCoordinatesPreference setCountryCode(CountryCode arg) {
            optimisticData.put(getKey("countryCode"), arg);
            return this;
        }

        /**
        * The geographic latitude for a given location. Coordinates are required in order to set pickUpHandle
        * for pickup points.
        */

        public Double getLatitude() {
            return (Double) get("latitude");
        }

        public CartDeliveryCoordinatesPreference setLatitude(Double arg) {
            optimisticData.put(getKey("latitude"), arg);
            return this;
        }

        /**
        * The geographic longitude for a given location. Coordinates are required in order to set pickUpHandle
        * for pickup points.
        */

        public Double getLongitude() {
            return (Double) get("longitude");
        }

        public CartDeliveryCoordinatesPreference setLongitude(Double arg) {
            optimisticData.put(getKey("longitude"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "countryCode": return false;

                case "latitude": return false;

                case "longitude": return false;

                default: return false;
            }
        }
    }

    public static class CartDeliveryCoordinatesPreferenceInput implements Serializable {
        private double latitude;

        private double longitude;

        private CountryCode countryCode;

        public CartDeliveryCoordinatesPreferenceInput(double latitude, double longitude, CountryCode countryCode) {
            this.latitude = latitude;

            this.longitude = longitude;

            this.countryCode = countryCode;
        }

        public double getLatitude() {
            return latitude;
        }

        public CartDeliveryCoordinatesPreferenceInput setLatitude(double latitude) {
            this.latitude = latitude;
            return this;
        }

        public double getLongitude() {
            return longitude;
        }

        public CartDeliveryCoordinatesPreferenceInput setLongitude(double longitude) {
            this.longitude = longitude;
            return this;
        }

        public CountryCode getCountryCode() {
            return countryCode;
        }

        public CartDeliveryCoordinatesPreferenceInput setCountryCode(CountryCode countryCode) {
            this.countryCode = countryCode;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("latitude:");
            _queryBuilder.append(latitude);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("longitude:");
            _queryBuilder.append(longitude);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("countryCode:");
            _queryBuilder.append(countryCode.toString());

            _queryBuilder.append('}');
        }
    }

    public interface CartDeliveryGroupQueryDefinition {
        void define(CartDeliveryGroupQuery _queryBuilder);
    }

    /**
    * Information about the options available for one or more line items to be delivered to a specific
    * address.
    */
    public static class CartDeliveryGroupQuery extends Query<CartDeliveryGroupQuery> {
        CartDeliveryGroupQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public class CartLinesArguments extends Arguments {
            CartLinesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public CartLinesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public CartLinesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public CartLinesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public CartLinesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public CartLinesArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CartLinesArgumentsDefinition {
            void define(CartLinesArguments args);
        }

        /**
        * A list of cart lines for the delivery group.
        */
        public CartDeliveryGroupQuery cartLines(BaseCartLineConnectionQueryDefinition queryDef) {
            return cartLines(args -> {}, queryDef);
        }

        /**
        * A list of cart lines for the delivery group.
        */
        public CartDeliveryGroupQuery cartLines(CartLinesArgumentsDefinition argsDef, BaseCartLineConnectionQueryDefinition queryDef) {
            startField("cartLines");

            CartLinesArguments args = new CartLinesArguments(_queryBuilder);
            argsDef.define(args);
            CartLinesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new BaseCartLineConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The destination address for the delivery group.
        */
        public CartDeliveryGroupQuery deliveryAddress(MailingAddressQueryDefinition queryDef) {
            startField("deliveryAddress");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The delivery options available for the delivery group.
        */
        public CartDeliveryGroupQuery deliveryOptions(CartDeliveryOptionQueryDefinition queryDef) {
            startField("deliveryOptions");

            _queryBuilder.append('{');
            queryDef.define(new CartDeliveryOptionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The type of merchandise in the delivery group.
        */
        public CartDeliveryGroupQuery groupType() {
            startField("groupType");

            return this;
        }

        /**
        * The ID for the delivery group.
        */
        public CartDeliveryGroupQuery id() {
            startField("id");

            return this;
        }

        /**
        * The selected delivery option for the delivery group.
        */
        public CartDeliveryGroupQuery selectedDeliveryOption(CartDeliveryOptionQueryDefinition queryDef) {
            startField("selectedDeliveryOption");

            _queryBuilder.append('{');
            queryDef.define(new CartDeliveryOptionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Information about the options available for one or more line items to be delivered to a specific
    * address.
    */
    public static class CartDeliveryGroup extends AbstractResponse<CartDeliveryGroup> {
        public CartDeliveryGroup() {
        }

        public CartDeliveryGroup(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cartLines": {
                        responseData.put(key, new BaseCartLineConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "deliveryAddress": {
                        responseData.put(key, new MailingAddress(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "deliveryOptions": {
                        List<CartDeliveryOption> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartDeliveryOption(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "groupType": {
                        responseData.put(key, CartDeliveryGroupType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "selectedDeliveryOption": {
                        CartDeliveryOption optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartDeliveryOption(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartDeliveryGroup";
        }

        /**
        * A list of cart lines for the delivery group.
        */

        public BaseCartLineConnection getCartLines() {
            return (BaseCartLineConnection) get("cartLines");
        }

        public CartDeliveryGroup setCartLines(BaseCartLineConnection arg) {
            optimisticData.put(getKey("cartLines"), arg);
            return this;
        }

        /**
        * The destination address for the delivery group.
        */

        public MailingAddress getDeliveryAddress() {
            return (MailingAddress) get("deliveryAddress");
        }

        public CartDeliveryGroup setDeliveryAddress(MailingAddress arg) {
            optimisticData.put(getKey("deliveryAddress"), arg);
            return this;
        }

        /**
        * The delivery options available for the delivery group.
        */

        public List<CartDeliveryOption> getDeliveryOptions() {
            return (List<CartDeliveryOption>) get("deliveryOptions");
        }

        public CartDeliveryGroup setDeliveryOptions(List<CartDeliveryOption> arg) {
            optimisticData.put(getKey("deliveryOptions"), arg);
            return this;
        }

        /**
        * The type of merchandise in the delivery group.
        */

        public CartDeliveryGroupType getGroupType() {
            return (CartDeliveryGroupType) get("groupType");
        }

        public CartDeliveryGroup setGroupType(CartDeliveryGroupType arg) {
            optimisticData.put(getKey("groupType"), arg);
            return this;
        }

        /**
        * The ID for the delivery group.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public CartDeliveryGroup setId(ID arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The selected delivery option for the delivery group.
        */

        public CartDeliveryOption getSelectedDeliveryOption() {
            return (CartDeliveryOption) get("selectedDeliveryOption");
        }

        public CartDeliveryGroup setSelectedDeliveryOption(CartDeliveryOption arg) {
            optimisticData.put(getKey("selectedDeliveryOption"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cartLines": return true;

                case "deliveryAddress": return true;

                case "deliveryOptions": return true;

                case "groupType": return false;

                case "id": return false;

                case "selectedDeliveryOption": return true;

                default: return false;
            }
        }
    }

    public interface CartDeliveryGroupConnectionQueryDefinition {
        void define(CartDeliveryGroupConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple CartDeliveryGroups.
    */
    public static class CartDeliveryGroupConnectionQuery extends Query<CartDeliveryGroupConnectionQuery> {
        CartDeliveryGroupConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public CartDeliveryGroupConnectionQuery edges(CartDeliveryGroupEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new CartDeliveryGroupEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in CartDeliveryGroupEdge.
        */
        public CartDeliveryGroupConnectionQuery nodes(CartDeliveryGroupQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new CartDeliveryGroupQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public CartDeliveryGroupConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple CartDeliveryGroups.
    */
    public static class CartDeliveryGroupConnection extends AbstractResponse<CartDeliveryGroupConnection> {
        public CartDeliveryGroupConnection() {
        }

        public CartDeliveryGroupConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<CartDeliveryGroupEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartDeliveryGroupEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<CartDeliveryGroup> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartDeliveryGroup(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartDeliveryGroupConnection";
        }

        /**
        * A list of edges.
        */

        public List<CartDeliveryGroupEdge> getEdges() {
            return (List<CartDeliveryGroupEdge>) get("edges");
        }

        public CartDeliveryGroupConnection setEdges(List<CartDeliveryGroupEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in CartDeliveryGroupEdge.
        */

        public List<CartDeliveryGroup> getNodes() {
            return (List<CartDeliveryGroup>) get("nodes");
        }

        public CartDeliveryGroupConnection setNodes(List<CartDeliveryGroup> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public CartDeliveryGroupConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface CartDeliveryGroupEdgeQueryDefinition {
        void define(CartDeliveryGroupEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one CartDeliveryGroup and a cursor during pagination.
    */
    public static class CartDeliveryGroupEdgeQuery extends Query<CartDeliveryGroupEdgeQuery> {
        CartDeliveryGroupEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public CartDeliveryGroupEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of CartDeliveryGroupEdge.
        */
        public CartDeliveryGroupEdgeQuery node(CartDeliveryGroupQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new CartDeliveryGroupQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one CartDeliveryGroup and a cursor during pagination.
    */
    public static class CartDeliveryGroupEdge extends AbstractResponse<CartDeliveryGroupEdge> {
        public CartDeliveryGroupEdge() {
        }

        public CartDeliveryGroupEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new CartDeliveryGroup(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartDeliveryGroupEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public CartDeliveryGroupEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of CartDeliveryGroupEdge.
        */

        public CartDeliveryGroup getNode() {
            return (CartDeliveryGroup) get("node");
        }

        public CartDeliveryGroupEdge setNode(CartDeliveryGroup arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    /**
    * Defines what type of merchandise is in the delivery group.
    */
    public enum CartDeliveryGroupType {
        /**
        * The delivery group only contains merchandise that is either a one time purchase or a first delivery
        * of
        * subscription merchandise.
        */
        ONE_TIME_PURCHASE,

        /**
        * The delivery group only contains subscription merchandise.
        */
        SUBSCRIPTION,

        UNKNOWN_VALUE;

        public static CartDeliveryGroupType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ONE_TIME_PURCHASE": {
                    return ONE_TIME_PURCHASE;
                }

                case "SUBSCRIPTION": {
                    return SUBSCRIPTION;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ONE_TIME_PURCHASE: {
                    return "ONE_TIME_PURCHASE";
                }

                case SUBSCRIPTION: {
                    return "SUBSCRIPTION";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface CartDeliveryOptionQueryDefinition {
        void define(CartDeliveryOptionQuery _queryBuilder);
    }

    /**
    * Information about a delivery option.
    */
    public static class CartDeliveryOptionQuery extends Query<CartDeliveryOptionQuery> {
        CartDeliveryOptionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The code of the delivery option.
        */
        public CartDeliveryOptionQuery code() {
            startField("code");

            return this;
        }

        /**
        * The method for the delivery option.
        */
        public CartDeliveryOptionQuery deliveryMethodType() {
            startField("deliveryMethodType");

            return this;
        }

        /**
        * The description of the delivery option.
        */
        public CartDeliveryOptionQuery description() {
            startField("description");

            return this;
        }

        /**
        * The estimated cost for the delivery option.
        */
        public CartDeliveryOptionQuery estimatedCost(MoneyV2QueryDefinition queryDef) {
            startField("estimatedCost");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The unique identifier of the delivery option.
        */
        public CartDeliveryOptionQuery handle() {
            startField("handle");

            return this;
        }

        /**
        * The title of the delivery option.
        */
        public CartDeliveryOptionQuery title() {
            startField("title");

            return this;
        }
    }

    /**
    * Information about a delivery option.
    */
    public static class CartDeliveryOption extends AbstractResponse<CartDeliveryOption> {
        public CartDeliveryOption() {
        }

        public CartDeliveryOption(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "deliveryMethodType": {
                        responseData.put(key, DeliveryMethodType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "estimatedCost": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartDeliveryOption";
        }

        /**
        * The code of the delivery option.
        */

        public String getCode() {
            return (String) get("code");
        }

        public CartDeliveryOption setCode(String arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The method for the delivery option.
        */

        public DeliveryMethodType getDeliveryMethodType() {
            return (DeliveryMethodType) get("deliveryMethodType");
        }

        public CartDeliveryOption setDeliveryMethodType(DeliveryMethodType arg) {
            optimisticData.put(getKey("deliveryMethodType"), arg);
            return this;
        }

        /**
        * The description of the delivery option.
        */

        public String getDescription() {
            return (String) get("description");
        }

        public CartDeliveryOption setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * The estimated cost for the delivery option.
        */

        public MoneyV2 getEstimatedCost() {
            return (MoneyV2) get("estimatedCost");
        }

        public CartDeliveryOption setEstimatedCost(MoneyV2 arg) {
            optimisticData.put(getKey("estimatedCost"), arg);
            return this;
        }

        /**
        * The unique identifier of the delivery option.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public CartDeliveryOption setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * The title of the delivery option.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public CartDeliveryOption setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "deliveryMethodType": return false;

                case "description": return false;

                case "estimatedCost": return true;

                case "handle": return false;

                case "title": return false;

                default: return false;
            }
        }
    }

    public interface CartDeliveryPreferenceQueryDefinition {
        void define(CartDeliveryPreferenceQuery _queryBuilder);
    }

    /**
    * A set of preferences tied to the buyer interacting with the cart. Preferences are used to prefill
    * fields in at checkout to streamline information collection. 
    * Preferences are not synced back to the cart if they are overwritten.
    */
    public static class CartDeliveryPreferenceQuery extends Query<CartDeliveryPreferenceQuery> {
        CartDeliveryPreferenceQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Preferred location used to find the closest pick up point based on coordinates.
        */
        public CartDeliveryPreferenceQuery coordinates(CartDeliveryCoordinatesPreferenceQueryDefinition queryDef) {
            startField("coordinates");

            _queryBuilder.append('{');
            queryDef.define(new CartDeliveryCoordinatesPreferenceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The preferred delivery methods such as shipping, local pickup or through pickup points.
        */
        public CartDeliveryPreferenceQuery deliveryMethod() {
            startField("deliveryMethod");

            return this;
        }

        /**
        * The pickup handle prefills checkout fields with the location for either local pickup or pickup
        * points delivery methods.
        * It accepts both location ID for local pickup and external IDs for pickup points.
        */
        public CartDeliveryPreferenceQuery pickupHandle() {
            startField("pickupHandle");

            return this;
        }
    }

    /**
    * A set of preferences tied to the buyer interacting with the cart. Preferences are used to prefill
    * fields in at checkout to streamline information collection. 
    * Preferences are not synced back to the cart if they are overwritten.
    */
    public static class CartDeliveryPreference extends AbstractResponse<CartDeliveryPreference> {
        public CartDeliveryPreference() {
        }

        public CartDeliveryPreference(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "coordinates": {
                        CartDeliveryCoordinatesPreference optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartDeliveryCoordinatesPreference(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "deliveryMethod": {
                        List<PreferenceDeliveryMethodType> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(PreferenceDeliveryMethodType.fromGraphQl(jsonAsString(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pickupHandle": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartDeliveryPreference";
        }

        /**
        * Preferred location used to find the closest pick up point based on coordinates.
        */

        public CartDeliveryCoordinatesPreference getCoordinates() {
            return (CartDeliveryCoordinatesPreference) get("coordinates");
        }

        public CartDeliveryPreference setCoordinates(CartDeliveryCoordinatesPreference arg) {
            optimisticData.put(getKey("coordinates"), arg);
            return this;
        }

        /**
        * The preferred delivery methods such as shipping, local pickup or through pickup points.
        */

        public List<PreferenceDeliveryMethodType> getDeliveryMethod() {
            return (List<PreferenceDeliveryMethodType>) get("deliveryMethod");
        }

        public CartDeliveryPreference setDeliveryMethod(List<PreferenceDeliveryMethodType> arg) {
            optimisticData.put(getKey("deliveryMethod"), arg);
            return this;
        }

        /**
        * The pickup handle prefills checkout fields with the location for either local pickup or pickup
        * points delivery methods.
        * It accepts both location ID for local pickup and external IDs for pickup points.
        */

        public List<String> getPickupHandle() {
            return (List<String>) get("pickupHandle");
        }

        public CartDeliveryPreference setPickupHandle(List<String> arg) {
            optimisticData.put(getKey("pickupHandle"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "coordinates": return true;

                case "deliveryMethod": return false;

                case "pickupHandle": return false;

                default: return false;
            }
        }
    }

    public static class CartDeliveryPreferenceInput implements Serializable {
        private Input<List<PreferenceDeliveryMethodType>> deliveryMethod = Input.undefined();

        private Input<List<String>> pickupHandle = Input.undefined();

        private Input<List<CartDeliveryCoordinatesPreferenceInput>> coordinates = Input.undefined();

        public List<PreferenceDeliveryMethodType> getDeliveryMethod() {
            return deliveryMethod.getValue();
        }

        public Input<List<PreferenceDeliveryMethodType>> getDeliveryMethodInput() {
            return deliveryMethod;
        }

        public CartDeliveryPreferenceInput setDeliveryMethod(List<PreferenceDeliveryMethodType> deliveryMethod) {
            this.deliveryMethod = Input.optional(deliveryMethod);
            return this;
        }

        public CartDeliveryPreferenceInput setDeliveryMethodInput(Input<List<PreferenceDeliveryMethodType>> deliveryMethod) {
            if (deliveryMethod == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.deliveryMethod = deliveryMethod;
            return this;
        }

        public List<String> getPickupHandle() {
            return pickupHandle.getValue();
        }

        public Input<List<String>> getPickupHandleInput() {
            return pickupHandle;
        }

        public CartDeliveryPreferenceInput setPickupHandle(List<String> pickupHandle) {
            this.pickupHandle = Input.optional(pickupHandle);
            return this;
        }

        public CartDeliveryPreferenceInput setPickupHandleInput(Input<List<String>> pickupHandle) {
            if (pickupHandle == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.pickupHandle = pickupHandle;
            return this;
        }

        public List<CartDeliveryCoordinatesPreferenceInput> getCoordinates() {
            return coordinates.getValue();
        }

        public Input<List<CartDeliveryCoordinatesPreferenceInput>> getCoordinatesInput() {
            return coordinates;
        }

        public CartDeliveryPreferenceInput setCoordinates(List<CartDeliveryCoordinatesPreferenceInput> coordinates) {
            this.coordinates = Input.optional(coordinates);
            return this;
        }

        public CartDeliveryPreferenceInput setCoordinatesInput(Input<List<CartDeliveryCoordinatesPreferenceInput>> coordinates) {
            if (coordinates == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.coordinates = coordinates;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.deliveryMethod.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("deliveryMethod:");
                if (deliveryMethod.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (PreferenceDeliveryMethodType item1 : deliveryMethod.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            _queryBuilder.append(item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.pickupHandle.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("pickupHandle:");
                if (pickupHandle.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (String item1 : pickupHandle.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            Query.appendQuotedString(_queryBuilder, item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.coordinates.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("coordinates:");
                if (coordinates.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (CartDeliveryCoordinatesPreferenceInput item1 : coordinates.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public static class CartDirectPaymentMethodInput implements Serializable {
        private MailingAddressInput billingAddress;

        private String sessionId;

        private Input<CartCardSource> cardSource = Input.undefined();

        public CartDirectPaymentMethodInput(MailingAddressInput billingAddress, String sessionId) {
            this.billingAddress = billingAddress;

            this.sessionId = sessionId;
        }

        public MailingAddressInput getBillingAddress() {
            return billingAddress;
        }

        public CartDirectPaymentMethodInput setBillingAddress(MailingAddressInput billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public String getSessionId() {
            return sessionId;
        }

        public CartDirectPaymentMethodInput setSessionId(String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public CartCardSource getCardSource() {
            return cardSource.getValue();
        }

        public Input<CartCardSource> getCardSourceInput() {
            return cardSource;
        }

        public CartDirectPaymentMethodInput setCardSource(CartCardSource cardSource) {
            this.cardSource = Input.optional(cardSource);
            return this;
        }

        public CartDirectPaymentMethodInput setCardSourceInput(Input<CartCardSource> cardSource) {
            if (cardSource == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.cardSource = cardSource;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("billingAddress:");
            billingAddress.appendTo(_queryBuilder);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("sessionId:");
            Query.appendQuotedString(_queryBuilder, sessionId.toString());

            if (this.cardSource.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("cardSource:");
                if (cardSource.getValue() != null) {
                    _queryBuilder.append(cardSource.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface CartDiscountAllocationQueryDefinition {
        void define(CartDiscountAllocationQuery _queryBuilder);
    }

    /**
    * The discounts that have been applied to the cart line.
    */
    public static class CartDiscountAllocationQuery extends Query<CartDiscountAllocationQuery> {
        CartDiscountAllocationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        /**
        * The discounted amount that has been applied to the cart line.
        */
        public CartDiscountAllocationQuery discountedAmount(MoneyV2QueryDefinition queryDef) {
            startField("discountedAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public CartDiscountAllocationQuery targetType() {
            startField("targetType");

            return this;
        }

        public CartDiscountAllocationQuery onCartAutomaticDiscountAllocation(CartAutomaticDiscountAllocationQueryDefinition queryDef) {
            startInlineFragment("CartAutomaticDiscountAllocation");
            queryDef.define(new CartAutomaticDiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public CartDiscountAllocationQuery onCartCodeDiscountAllocation(CartCodeDiscountAllocationQueryDefinition queryDef) {
            startInlineFragment("CartCodeDiscountAllocation");
            queryDef.define(new CartCodeDiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public CartDiscountAllocationQuery onCartCustomDiscountAllocation(CartCustomDiscountAllocationQueryDefinition queryDef) {
            startInlineFragment("CartCustomDiscountAllocation");
            queryDef.define(new CartCustomDiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface CartDiscountAllocation {
        String getGraphQlTypeName();

        MoneyV2 getDiscountedAmount();

        DiscountApplicationTargetType getTargetType();
    }

    /**
    * The discounts that have been applied to the cart line.
    */
    public static class UnknownCartDiscountAllocation extends AbstractResponse<UnknownCartDiscountAllocation> implements CartDiscountAllocation {
        public UnknownCartDiscountAllocation() {
        }

        public UnknownCartDiscountAllocation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discountedAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static CartDiscountAllocation create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "CartAutomaticDiscountAllocation": {
                    return new CartAutomaticDiscountAllocation(fields);
                }

                case "CartCodeDiscountAllocation": {
                    return new CartCodeDiscountAllocation(fields);
                }

                case "CartCustomDiscountAllocation": {
                    return new CartCustomDiscountAllocation(fields);
                }

                default: {
                    return new UnknownCartDiscountAllocation(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * The discounted amount that has been applied to the cart line.
        */

        public MoneyV2 getDiscountedAmount() {
            return (MoneyV2) get("discountedAmount");
        }

        public UnknownCartDiscountAllocation setDiscountedAmount(MoneyV2 arg) {
            optimisticData.put(getKey("discountedAmount"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public UnknownCartDiscountAllocation setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discountedAmount": return true;

                case "targetType": return false;

                default: return false;
            }
        }
    }

    public interface CartDiscountCodeQueryDefinition {
        void define(CartDiscountCodeQuery _queryBuilder);
    }

    /**
    * The discount codes applied to the cart.
    */
    public static class CartDiscountCodeQuery extends Query<CartDiscountCodeQuery> {
        CartDiscountCodeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Whether the discount code is applicable to the cart's current contents.
        */
        public CartDiscountCodeQuery applicable() {
            startField("applicable");

            return this;
        }

        /**
        * The code for the discount.
        */
        public CartDiscountCodeQuery code() {
            startField("code");

            return this;
        }
    }

    /**
    * The discount codes applied to the cart.
    */
    public static class CartDiscountCode extends AbstractResponse<CartDiscountCode> {
        public CartDiscountCode() {
        }

        public CartDiscountCode(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "applicable": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "code": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartDiscountCode";
        }

        /**
        * Whether the discount code is applicable to the cart's current contents.
        */

        public Boolean getApplicable() {
            return (Boolean) get("applicable");
        }

        public CartDiscountCode setApplicable(Boolean arg) {
            optimisticData.put(getKey("applicable"), arg);
            return this;
        }

        /**
        * The code for the discount.
        */

        public String getCode() {
            return (String) get("code");
        }

        public CartDiscountCode setCode(String arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "applicable": return false;

                case "code": return false;

                default: return false;
            }
        }
    }

    public interface CartDiscountCodesUpdatePayloadQueryDefinition {
        void define(CartDiscountCodesUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartDiscountCodesUpdate` mutation.
    */
    public static class CartDiscountCodesUpdatePayloadQuery extends Query<CartDiscountCodesUpdatePayloadQuery> {
        CartDiscountCodesUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartDiscountCodesUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartDiscountCodesUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartDiscountCodesUpdate` mutation.
    */
    public static class CartDiscountCodesUpdatePayload extends AbstractResponse<CartDiscountCodesUpdatePayload> {
        public CartDiscountCodesUpdatePayload() {
        }

        public CartDiscountCodesUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartDiscountCodesUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartDiscountCodesUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartDiscountCodesUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    /**
    * Possible error codes that can be returned by `CartUserError`.
    */
    public enum CartErrorCode {
        /**
        * The specified address field contains emojis.
        */
        ADDRESS_FIELD_CONTAINS_EMOJIS,

        /**
        * The specified address field contains HTML tags.
        */
        ADDRESS_FIELD_CONTAINS_HTML_TAGS,

        /**
        * The specified address field contains a URL.
        */
        ADDRESS_FIELD_CONTAINS_URL,

        /**
        * The specified address field does not match the expected pattern.
        */
        ADDRESS_FIELD_DOES_NOT_MATCH_EXPECTED_PATTERN,

        /**
        * The specified address field is required.
        */
        ADDRESS_FIELD_IS_REQUIRED,

        /**
        * The specified address field is too long.
        */
        ADDRESS_FIELD_IS_TOO_LONG,

        /**
        * The input value is invalid.
        */
        INVALID,

        /**
        * Company location not found or not allowed.
        */
        INVALID_COMPANY_LOCATION,

        /**
        * Delivery group was not found in cart.
        */
        INVALID_DELIVERY_GROUP,

        /**
        * Delivery option was not valid.
        */
        INVALID_DELIVERY_OPTION,

        /**
        * The quantity must be a multiple of the specified increment.
        */
        INVALID_INCREMENT,

        /**
        * Merchandise line was not found in cart.
        */
        INVALID_MERCHANDISE_LINE,

        /**
        * The metafields were not valid.
        */
        INVALID_METAFIELDS,

        /**
        * The payment wasn't valid.
        */
        INVALID_PAYMENT,

        /**
        * Cannot update payment on an empty cart
        */
        INVALID_PAYMENT_EMPTY_CART,

        /**
        * The given zip code is invalid for the provided country.
        */
        INVALID_ZIP_CODE_FOR_COUNTRY,

        /**
        * The given zip code is invalid for the provided province.
        */
        INVALID_ZIP_CODE_FOR_PROVINCE,

        /**
        * The input value should be less than the maximum value allowed.
        */
        LESS_THAN,

        /**
        * The quantity must be below the specified maximum for the item.
        */
        MAXIMUM_EXCEEDED,

        /**
        * The quantity must be above the specified minimum for the item.
        */
        MINIMUM_NOT_MET,

        /**
        * The customer access token is required when setting a company location.
        */
        MISSING_CUSTOMER_ACCESS_TOKEN,

        /**
        * Missing discount code.
        */
        MISSING_DISCOUNT_CODE,

        /**
        * Missing note.
        */
        MISSING_NOTE,

        /**
        * The note length must be below the specified maximum.
        */
        NOTE_TOO_LONG,

        /**
        * The payment method is not supported.
        */
        PAYMENT_METHOD_NOT_SUPPORTED,

        /**
        * The given province cannot be found.
        */
        PROVINCE_NOT_FOUND,

        /**
        * A general error occurred during address validation.
        */
        UNSPECIFIED_ADDRESS_ERROR,

        /**
        * Validation failed.
        */
        VALIDATION_CUSTOM,

        /**
        * The given zip code is unsupported.
        */
        ZIP_CODE_NOT_SUPPORTED,

        UNKNOWN_VALUE;

        public static CartErrorCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ADDRESS_FIELD_CONTAINS_EMOJIS": {
                    return ADDRESS_FIELD_CONTAINS_EMOJIS;
                }

                case "ADDRESS_FIELD_CONTAINS_HTML_TAGS": {
                    return ADDRESS_FIELD_CONTAINS_HTML_TAGS;
                }

                case "ADDRESS_FIELD_CONTAINS_URL": {
                    return ADDRESS_FIELD_CONTAINS_URL;
                }

                case "ADDRESS_FIELD_DOES_NOT_MATCH_EXPECTED_PATTERN": {
                    return ADDRESS_FIELD_DOES_NOT_MATCH_EXPECTED_PATTERN;
                }

                case "ADDRESS_FIELD_IS_REQUIRED": {
                    return ADDRESS_FIELD_IS_REQUIRED;
                }

                case "ADDRESS_FIELD_IS_TOO_LONG": {
                    return ADDRESS_FIELD_IS_TOO_LONG;
                }

                case "INVALID": {
                    return INVALID;
                }

                case "INVALID_COMPANY_LOCATION": {
                    return INVALID_COMPANY_LOCATION;
                }

                case "INVALID_DELIVERY_GROUP": {
                    return INVALID_DELIVERY_GROUP;
                }

                case "INVALID_DELIVERY_OPTION": {
                    return INVALID_DELIVERY_OPTION;
                }

                case "INVALID_INCREMENT": {
                    return INVALID_INCREMENT;
                }

                case "INVALID_MERCHANDISE_LINE": {
                    return INVALID_MERCHANDISE_LINE;
                }

                case "INVALID_METAFIELDS": {
                    return INVALID_METAFIELDS;
                }

                case "INVALID_PAYMENT": {
                    return INVALID_PAYMENT;
                }

                case "INVALID_PAYMENT_EMPTY_CART": {
                    return INVALID_PAYMENT_EMPTY_CART;
                }

                case "INVALID_ZIP_CODE_FOR_COUNTRY": {
                    return INVALID_ZIP_CODE_FOR_COUNTRY;
                }

                case "INVALID_ZIP_CODE_FOR_PROVINCE": {
                    return INVALID_ZIP_CODE_FOR_PROVINCE;
                }

                case "LESS_THAN": {
                    return LESS_THAN;
                }

                case "MAXIMUM_EXCEEDED": {
                    return MAXIMUM_EXCEEDED;
                }

                case "MINIMUM_NOT_MET": {
                    return MINIMUM_NOT_MET;
                }

                case "MISSING_CUSTOMER_ACCESS_TOKEN": {
                    return MISSING_CUSTOMER_ACCESS_TOKEN;
                }

                case "MISSING_DISCOUNT_CODE": {
                    return MISSING_DISCOUNT_CODE;
                }

                case "MISSING_NOTE": {
                    return MISSING_NOTE;
                }

                case "NOTE_TOO_LONG": {
                    return NOTE_TOO_LONG;
                }

                case "PAYMENT_METHOD_NOT_SUPPORTED": {
                    return PAYMENT_METHOD_NOT_SUPPORTED;
                }

                case "PROVINCE_NOT_FOUND": {
                    return PROVINCE_NOT_FOUND;
                }

                case "UNSPECIFIED_ADDRESS_ERROR": {
                    return UNSPECIFIED_ADDRESS_ERROR;
                }

                case "VALIDATION_CUSTOM": {
                    return VALIDATION_CUSTOM;
                }

                case "ZIP_CODE_NOT_SUPPORTED": {
                    return ZIP_CODE_NOT_SUPPORTED;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ADDRESS_FIELD_CONTAINS_EMOJIS: {
                    return "ADDRESS_FIELD_CONTAINS_EMOJIS";
                }

                case ADDRESS_FIELD_CONTAINS_HTML_TAGS: {
                    return "ADDRESS_FIELD_CONTAINS_HTML_TAGS";
                }

                case ADDRESS_FIELD_CONTAINS_URL: {
                    return "ADDRESS_FIELD_CONTAINS_URL";
                }

                case ADDRESS_FIELD_DOES_NOT_MATCH_EXPECTED_PATTERN: {
                    return "ADDRESS_FIELD_DOES_NOT_MATCH_EXPECTED_PATTERN";
                }

                case ADDRESS_FIELD_IS_REQUIRED: {
                    return "ADDRESS_FIELD_IS_REQUIRED";
                }

                case ADDRESS_FIELD_IS_TOO_LONG: {
                    return "ADDRESS_FIELD_IS_TOO_LONG";
                }

                case INVALID: {
                    return "INVALID";
                }

                case INVALID_COMPANY_LOCATION: {
                    return "INVALID_COMPANY_LOCATION";
                }

                case INVALID_DELIVERY_GROUP: {
                    return "INVALID_DELIVERY_GROUP";
                }

                case INVALID_DELIVERY_OPTION: {
                    return "INVALID_DELIVERY_OPTION";
                }

                case INVALID_INCREMENT: {
                    return "INVALID_INCREMENT";
                }

                case INVALID_MERCHANDISE_LINE: {
                    return "INVALID_MERCHANDISE_LINE";
                }

                case INVALID_METAFIELDS: {
                    return "INVALID_METAFIELDS";
                }

                case INVALID_PAYMENT: {
                    return "INVALID_PAYMENT";
                }

                case INVALID_PAYMENT_EMPTY_CART: {
                    return "INVALID_PAYMENT_EMPTY_CART";
                }

                case INVALID_ZIP_CODE_FOR_COUNTRY: {
                    return "INVALID_ZIP_CODE_FOR_COUNTRY";
                }

                case INVALID_ZIP_CODE_FOR_PROVINCE: {
                    return "INVALID_ZIP_CODE_FOR_PROVINCE";
                }

                case LESS_THAN: {
                    return "LESS_THAN";
                }

                case MAXIMUM_EXCEEDED: {
                    return "MAXIMUM_EXCEEDED";
                }

                case MINIMUM_NOT_MET: {
                    return "MINIMUM_NOT_MET";
                }

                case MISSING_CUSTOMER_ACCESS_TOKEN: {
                    return "MISSING_CUSTOMER_ACCESS_TOKEN";
                }

                case MISSING_DISCOUNT_CODE: {
                    return "MISSING_DISCOUNT_CODE";
                }

                case MISSING_NOTE: {
                    return "MISSING_NOTE";
                }

                case NOTE_TOO_LONG: {
                    return "NOTE_TOO_LONG";
                }

                case PAYMENT_METHOD_NOT_SUPPORTED: {
                    return "PAYMENT_METHOD_NOT_SUPPORTED";
                }

                case PROVINCE_NOT_FOUND: {
                    return "PROVINCE_NOT_FOUND";
                }

                case UNSPECIFIED_ADDRESS_ERROR: {
                    return "UNSPECIFIED_ADDRESS_ERROR";
                }

                case VALIDATION_CUSTOM: {
                    return "VALIDATION_CUSTOM";
                }

                case ZIP_CODE_NOT_SUPPORTED: {
                    return "ZIP_CODE_NOT_SUPPORTED";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface CartEstimatedCostQueryDefinition {
        void define(CartEstimatedCostQuery _queryBuilder);
    }

    /**
    * The estimated costs that the buyer will pay at checkout. The estimated cost uses
    * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to
    * determine [international
    * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
    */
    public static class CartEstimatedCostQuery extends Query<CartEstimatedCostQuery> {
        CartEstimatedCostQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout
        * charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has
        * no deferred payments, then the checkout charge amount is equivalent to`subtotal_amount`.
        */
        public CartEstimatedCostQuery checkoutChargeAmount(MoneyV2QueryDefinition queryDef) {
            startField("checkoutChargeAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated amount, before taxes and discounts, for the customer to pay.
        */
        public CartEstimatedCostQuery subtotalAmount(MoneyV2QueryDefinition queryDef) {
            startField("subtotalAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated total amount for the customer to pay.
        */
        public CartEstimatedCostQuery totalAmount(MoneyV2QueryDefinition queryDef) {
            startField("totalAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated duty amount for the customer to pay at checkout.
        */
        public CartEstimatedCostQuery totalDutyAmount(MoneyV2QueryDefinition queryDef) {
            startField("totalDutyAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated tax amount for the customer to pay at checkout.
        */
        public CartEstimatedCostQuery totalTaxAmount(MoneyV2QueryDefinition queryDef) {
            startField("totalTaxAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The estimated costs that the buyer will pay at checkout. The estimated cost uses
    * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to
    * determine [international
    * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
    */
    public static class CartEstimatedCost extends AbstractResponse<CartEstimatedCost> {
        public CartEstimatedCost() {
        }

        public CartEstimatedCost(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "checkoutChargeAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "subtotalAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalDutyAmount": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "totalTaxAmount": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartEstimatedCost";
        }

        /**
        * The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout
        * charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has
        * no deferred payments, then the checkout charge amount is equivalent to`subtotal_amount`.
        */

        public MoneyV2 getCheckoutChargeAmount() {
            return (MoneyV2) get("checkoutChargeAmount");
        }

        public CartEstimatedCost setCheckoutChargeAmount(MoneyV2 arg) {
            optimisticData.put(getKey("checkoutChargeAmount"), arg);
            return this;
        }

        /**
        * The estimated amount, before taxes and discounts, for the customer to pay.
        */

        public MoneyV2 getSubtotalAmount() {
            return (MoneyV2) get("subtotalAmount");
        }

        public CartEstimatedCost setSubtotalAmount(MoneyV2 arg) {
            optimisticData.put(getKey("subtotalAmount"), arg);
            return this;
        }

        /**
        * The estimated total amount for the customer to pay.
        */

        public MoneyV2 getTotalAmount() {
            return (MoneyV2) get("totalAmount");
        }

        public CartEstimatedCost setTotalAmount(MoneyV2 arg) {
            optimisticData.put(getKey("totalAmount"), arg);
            return this;
        }

        /**
        * The estimated duty amount for the customer to pay at checkout.
        */

        public MoneyV2 getTotalDutyAmount() {
            return (MoneyV2) get("totalDutyAmount");
        }

        public CartEstimatedCost setTotalDutyAmount(MoneyV2 arg) {
            optimisticData.put(getKey("totalDutyAmount"), arg);
            return this;
        }

        /**
        * The estimated tax amount for the customer to pay at checkout.
        */

        public MoneyV2 getTotalTaxAmount() {
            return (MoneyV2) get("totalTaxAmount");
        }

        public CartEstimatedCost setTotalTaxAmount(MoneyV2 arg) {
            optimisticData.put(getKey("totalTaxAmount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "checkoutChargeAmount": return true;

                case "subtotalAmount": return true;

                case "totalAmount": return true;

                case "totalDutyAmount": return true;

                case "totalTaxAmount": return true;

                default: return false;
            }
        }
    }

    public static class CartFreePaymentMethodInput implements Serializable {
        private MailingAddressInput billingAddress;

        public CartFreePaymentMethodInput(MailingAddressInput billingAddress) {
            this.billingAddress = billingAddress;
        }

        public MailingAddressInput getBillingAddress() {
            return billingAddress;
        }

        public CartFreePaymentMethodInput setBillingAddress(MailingAddressInput billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("billingAddress:");
            billingAddress.appendTo(_queryBuilder);

            _queryBuilder.append('}');
        }
    }

    public interface CartGiftCardCodesUpdatePayloadQueryDefinition {
        void define(CartGiftCardCodesUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartGiftCardCodesUpdate` mutation.
    */
    public static class CartGiftCardCodesUpdatePayloadQuery extends Query<CartGiftCardCodesUpdatePayloadQuery> {
        CartGiftCardCodesUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartGiftCardCodesUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartGiftCardCodesUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartGiftCardCodesUpdate` mutation.
    */
    public static class CartGiftCardCodesUpdatePayload extends AbstractResponse<CartGiftCardCodesUpdatePayload> {
        public CartGiftCardCodesUpdatePayload() {
        }

        public CartGiftCardCodesUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartGiftCardCodesUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartGiftCardCodesUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartGiftCardCodesUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public static class CartInput implements Serializable {
        private Input<List<AttributeInput>> attributes = Input.undefined();

        private Input<List<CartLineInput>> lines = Input.undefined();

        private Input<List<String>> discountCodes = Input.undefined();

        private Input<List<String>> giftCardCodes = Input.undefined();

        private Input<String> note = Input.undefined();

        private Input<CartBuyerIdentityInput> buyerIdentity = Input.undefined();

        private Input<List<CartInputMetafieldInput>> metafields = Input.undefined();

        public List<AttributeInput> getAttributes() {
            return attributes.getValue();
        }

        public Input<List<AttributeInput>> getAttributesInput() {
            return attributes;
        }

        public CartInput setAttributes(List<AttributeInput> attributes) {
            this.attributes = Input.optional(attributes);
            return this;
        }

        public CartInput setAttributesInput(Input<List<AttributeInput>> attributes) {
            if (attributes == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.attributes = attributes;
            return this;
        }

        public List<CartLineInput> getLines() {
            return lines.getValue();
        }

        public Input<List<CartLineInput>> getLinesInput() {
            return lines;
        }

        public CartInput setLines(List<CartLineInput> lines) {
            this.lines = Input.optional(lines);
            return this;
        }

        public CartInput setLinesInput(Input<List<CartLineInput>> lines) {
            if (lines == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.lines = lines;
            return this;
        }

        public List<String> getDiscountCodes() {
            return discountCodes.getValue();
        }

        public Input<List<String>> getDiscountCodesInput() {
            return discountCodes;
        }

        public CartInput setDiscountCodes(List<String> discountCodes) {
            this.discountCodes = Input.optional(discountCodes);
            return this;
        }

        public CartInput setDiscountCodesInput(Input<List<String>> discountCodes) {
            if (discountCodes == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.discountCodes = discountCodes;
            return this;
        }

        public List<String> getGiftCardCodes() {
            return giftCardCodes.getValue();
        }

        public Input<List<String>> getGiftCardCodesInput() {
            return giftCardCodes;
        }

        public CartInput setGiftCardCodes(List<String> giftCardCodes) {
            this.giftCardCodes = Input.optional(giftCardCodes);
            return this;
        }

        public CartInput setGiftCardCodesInput(Input<List<String>> giftCardCodes) {
            if (giftCardCodes == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.giftCardCodes = giftCardCodes;
            return this;
        }

        public String getNote() {
            return note.getValue();
        }

        public Input<String> getNoteInput() {
            return note;
        }

        public CartInput setNote(String note) {
            this.note = Input.optional(note);
            return this;
        }

        public CartInput setNoteInput(Input<String> note) {
            if (note == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.note = note;
            return this;
        }

        public CartBuyerIdentityInput getBuyerIdentity() {
            return buyerIdentity.getValue();
        }

        public Input<CartBuyerIdentityInput> getBuyerIdentityInput() {
            return buyerIdentity;
        }

        public CartInput setBuyerIdentity(CartBuyerIdentityInput buyerIdentity) {
            this.buyerIdentity = Input.optional(buyerIdentity);
            return this;
        }

        public CartInput setBuyerIdentityInput(Input<CartBuyerIdentityInput> buyerIdentity) {
            if (buyerIdentity == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.buyerIdentity = buyerIdentity;
            return this;
        }

        public List<CartInputMetafieldInput> getMetafields() {
            return metafields.getValue();
        }

        public Input<List<CartInputMetafieldInput>> getMetafieldsInput() {
            return metafields;
        }

        public CartInput setMetafields(List<CartInputMetafieldInput> metafields) {
            this.metafields = Input.optional(metafields);
            return this;
        }

        public CartInput setMetafieldsInput(Input<List<CartInputMetafieldInput>> metafields) {
            if (metafields == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.metafields = metafields;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.attributes.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("attributes:");
                if (attributes.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (AttributeInput item1 : attributes.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.lines.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("lines:");
                if (lines.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (CartLineInput item1 : lines.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.discountCodes.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discountCodes:");
                if (discountCodes.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (String item1 : discountCodes.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            Query.appendQuotedString(_queryBuilder, item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.giftCardCodes.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("giftCardCodes:");
                if (giftCardCodes.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (String item1 : giftCardCodes.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            Query.appendQuotedString(_queryBuilder, item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.note.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("note:");
                if (note.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, note.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.buyerIdentity.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("buyerIdentity:");
                if (buyerIdentity.getValue() != null) {
                    buyerIdentity.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.metafields.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("metafields:");
                if (metafields.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (CartInputMetafieldInput item1 : metafields.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public static class CartInputMetafieldInput implements Serializable {
        private String key;

        private String value;

        private String type;

        public CartInputMetafieldInput(String key, String value, String type) {
            this.key = key;

            this.value = value;

            this.type = type;
        }

        public String getKey() {
            return key;
        }

        public CartInputMetafieldInput setKey(String key) {
            this.key = key;
            return this;
        }

        public String getValue() {
            return value;
        }

        public CartInputMetafieldInput setValue(String value) {
            this.value = value;
            return this;
        }

        public String getType() {
            return type;
        }

        public CartInputMetafieldInput setType(String type) {
            this.type = type;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("value:");
            Query.appendQuotedString(_queryBuilder, value.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("type:");
            Query.appendQuotedString(_queryBuilder, type.toString());

            _queryBuilder.append('}');
        }
    }

    public interface CartLineQueryDefinition {
        void define(CartLineQuery _queryBuilder);
    }

    /**
    * Represents information about the merchandise in the cart.
    */
    public static class CartLineQuery extends Query<CartLineQuery> {
        CartLineQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * An attribute associated with the cart line.
        */
        public CartLineQuery attribute(String key, AttributeQueryDefinition queryDef) {
            startField("attribute");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The attributes associated with the cart line. Attributes are represented as key-value pairs.
        */
        public CartLineQuery attributes(AttributeQueryDefinition queryDef) {
            startField("attributes");

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change
        * and changes will be reflected at checkout.
        */
        public CartLineQuery cost(CartLineCostQueryDefinition queryDef) {
            startField("cost");

            _queryBuilder.append('{');
            queryDef.define(new CartLineCostQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The discounts that have been applied to the cart line.
        */
        public CartLineQuery discountAllocations(CartDiscountAllocationQueryDefinition queryDef) {
            startField("discountAllocations");

            _queryBuilder.append('{');
            queryDef.define(new CartDiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs
        * are subject to change and changes will be reflected at checkout.
        *
        * @deprecated Use `cost` instead.
        */
        @Deprecated
        public CartLineQuery estimatedCost(CartLineEstimatedCostQueryDefinition queryDef) {
            startField("estimatedCost");

            _queryBuilder.append('{');
            queryDef.define(new CartLineEstimatedCostQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The merchandise that the buyer intends to purchase.
        */
        public CartLineQuery merchandise(MerchandiseQueryDefinition queryDef) {
            startField("merchandise");

            _queryBuilder.append('{');
            queryDef.define(new MerchandiseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The quantity of the merchandise that the customer intends to purchase.
        */
        public CartLineQuery quantity() {
            startField("quantity");

            return this;
        }

        /**
        * The selling plan associated with the cart line and the effect that each selling plan has on variants
        * when they're purchased.
        */
        public CartLineQuery sellingPlanAllocation(SellingPlanAllocationQueryDefinition queryDef) {
            startField("sellingPlanAllocation");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents information about the merchandise in the cart.
    */
    public static class CartLine extends AbstractResponse<CartLine> implements BaseCartLine, Node {
        public CartLine() {
        }

        public CartLine(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "attribute": {
                        Attribute optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Attribute(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "attributes": {
                        List<Attribute> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Attribute(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "cost": {
                        responseData.put(key, new CartLineCost(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "discountAllocations": {
                        List<CartDiscountAllocation> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownCartDiscountAllocation.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "estimatedCost": {
                        responseData.put(key, new CartLineEstimatedCost(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "merchandise": {
                        responseData.put(key, UnknownMerchandise.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "quantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "sellingPlanAllocation": {
                        SellingPlanAllocation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new SellingPlanAllocation(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public CartLine(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "CartLine";
        }

        /**
        * An attribute associated with the cart line.
        */

        public Attribute getAttribute() {
            return (Attribute) get("attribute");
        }

        public CartLine setAttribute(Attribute arg) {
            optimisticData.put(getKey("attribute"), arg);
            return this;
        }

        /**
        * The attributes associated with the cart line. Attributes are represented as key-value pairs.
        */

        public List<Attribute> getAttributes() {
            return (List<Attribute>) get("attributes");
        }

        public CartLine setAttributes(List<Attribute> arg) {
            optimisticData.put(getKey("attributes"), arg);
            return this;
        }

        /**
        * The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change
        * and changes will be reflected at checkout.
        */

        public CartLineCost getCost() {
            return (CartLineCost) get("cost");
        }

        public CartLine setCost(CartLineCost arg) {
            optimisticData.put(getKey("cost"), arg);
            return this;
        }

        /**
        * The discounts that have been applied to the cart line.
        */

        public List<CartDiscountAllocation> getDiscountAllocations() {
            return (List<CartDiscountAllocation>) get("discountAllocations");
        }

        public CartLine setDiscountAllocations(List<CartDiscountAllocation> arg) {
            optimisticData.put(getKey("discountAllocations"), arg);
            return this;
        }

        /**
        * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs
        * are subject to change and changes will be reflected at checkout.
        *
        * @deprecated Use `cost` instead.
        */

        public CartLineEstimatedCost getEstimatedCost() {
            return (CartLineEstimatedCost) get("estimatedCost");
        }

        public CartLine setEstimatedCost(CartLineEstimatedCost arg) {
            optimisticData.put(getKey("estimatedCost"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The merchandise that the buyer intends to purchase.
        */

        public Merchandise getMerchandise() {
            return (Merchandise) get("merchandise");
        }

        public CartLine setMerchandise(Merchandise arg) {
            optimisticData.put(getKey("merchandise"), arg);
            return this;
        }

        /**
        * The quantity of the merchandise that the customer intends to purchase.
        */

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public CartLine setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        /**
        * The selling plan associated with the cart line and the effect that each selling plan has on variants
        * when they're purchased.
        */

        public SellingPlanAllocation getSellingPlanAllocation() {
            return (SellingPlanAllocation) get("sellingPlanAllocation");
        }

        public CartLine setSellingPlanAllocation(SellingPlanAllocation arg) {
            optimisticData.put(getKey("sellingPlanAllocation"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "attribute": return true;

                case "attributes": return true;

                case "cost": return true;

                case "discountAllocations": return false;

                case "estimatedCost": return true;

                case "id": return false;

                case "merchandise": return false;

                case "quantity": return false;

                case "sellingPlanAllocation": return true;

                default: return false;
            }
        }
    }

    public interface CartLineCostQueryDefinition {
        void define(CartLineCostQuery _queryBuilder);
    }

    /**
    * The cost of the merchandise line that the buyer will pay at checkout.
    */
    public static class CartLineCostQuery extends Query<CartLineCostQuery> {
        CartLineCostQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The amount of the merchandise line.
        */
        public CartLineCostQuery amountPerQuantity(MoneyV2QueryDefinition queryDef) {
            startField("amountPerQuantity");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The compare at amount of the merchandise line.
        */
        public CartLineCostQuery compareAtAmountPerQuantity(MoneyV2QueryDefinition queryDef) {
            startField("compareAtAmountPerQuantity");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The cost of the merchandise line before line-level discounts.
        */
        public CartLineCostQuery subtotalAmount(MoneyV2QueryDefinition queryDef) {
            startField("subtotalAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total cost of the merchandise line.
        */
        public CartLineCostQuery totalAmount(MoneyV2QueryDefinition queryDef) {
            startField("totalAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The cost of the merchandise line that the buyer will pay at checkout.
    */
    public static class CartLineCost extends AbstractResponse<CartLineCost> {
        public CartLineCost() {
        }

        public CartLineCost(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "amountPerQuantity": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "compareAtAmountPerQuantity": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "subtotalAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartLineCost";
        }

        /**
        * The amount of the merchandise line.
        */

        public MoneyV2 getAmountPerQuantity() {
            return (MoneyV2) get("amountPerQuantity");
        }

        public CartLineCost setAmountPerQuantity(MoneyV2 arg) {
            optimisticData.put(getKey("amountPerQuantity"), arg);
            return this;
        }

        /**
        * The compare at amount of the merchandise line.
        */

        public MoneyV2 getCompareAtAmountPerQuantity() {
            return (MoneyV2) get("compareAtAmountPerQuantity");
        }

        public CartLineCost setCompareAtAmountPerQuantity(MoneyV2 arg) {
            optimisticData.put(getKey("compareAtAmountPerQuantity"), arg);
            return this;
        }

        /**
        * The cost of the merchandise line before line-level discounts.
        */

        public MoneyV2 getSubtotalAmount() {
            return (MoneyV2) get("subtotalAmount");
        }

        public CartLineCost setSubtotalAmount(MoneyV2 arg) {
            optimisticData.put(getKey("subtotalAmount"), arg);
            return this;
        }

        /**
        * The total cost of the merchandise line.
        */

        public MoneyV2 getTotalAmount() {
            return (MoneyV2) get("totalAmount");
        }

        public CartLineCost setTotalAmount(MoneyV2 arg) {
            optimisticData.put(getKey("totalAmount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "amountPerQuantity": return true;

                case "compareAtAmountPerQuantity": return true;

                case "subtotalAmount": return true;

                case "totalAmount": return true;

                default: return false;
            }
        }
    }

    public interface CartLineEstimatedCostQueryDefinition {
        void define(CartLineEstimatedCostQuery _queryBuilder);
    }

    /**
    * The estimated cost of the merchandise line that the buyer will pay at checkout.
    */
    public static class CartLineEstimatedCostQuery extends Query<CartLineEstimatedCostQuery> {
        CartLineEstimatedCostQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The amount of the merchandise line.
        */
        public CartLineEstimatedCostQuery amount(MoneyV2QueryDefinition queryDef) {
            startField("amount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The compare at amount of the merchandise line.
        */
        public CartLineEstimatedCostQuery compareAtAmount(MoneyV2QueryDefinition queryDef) {
            startField("compareAtAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated cost of the merchandise line before discounts.
        */
        public CartLineEstimatedCostQuery subtotalAmount(MoneyV2QueryDefinition queryDef) {
            startField("subtotalAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated total cost of the merchandise line.
        */
        public CartLineEstimatedCostQuery totalAmount(MoneyV2QueryDefinition queryDef) {
            startField("totalAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The estimated cost of the merchandise line that the buyer will pay at checkout.
    */
    public static class CartLineEstimatedCost extends AbstractResponse<CartLineEstimatedCost> {
        public CartLineEstimatedCost() {
        }

        public CartLineEstimatedCost(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "amount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "compareAtAmount": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "subtotalAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartLineEstimatedCost";
        }

        /**
        * The amount of the merchandise line.
        */

        public MoneyV2 getAmount() {
            return (MoneyV2) get("amount");
        }

        public CartLineEstimatedCost setAmount(MoneyV2 arg) {
            optimisticData.put(getKey("amount"), arg);
            return this;
        }

        /**
        * The compare at amount of the merchandise line.
        */

        public MoneyV2 getCompareAtAmount() {
            return (MoneyV2) get("compareAtAmount");
        }

        public CartLineEstimatedCost setCompareAtAmount(MoneyV2 arg) {
            optimisticData.put(getKey("compareAtAmount"), arg);
            return this;
        }

        /**
        * The estimated cost of the merchandise line before discounts.
        */

        public MoneyV2 getSubtotalAmount() {
            return (MoneyV2) get("subtotalAmount");
        }

        public CartLineEstimatedCost setSubtotalAmount(MoneyV2 arg) {
            optimisticData.put(getKey("subtotalAmount"), arg);
            return this;
        }

        /**
        * The estimated total cost of the merchandise line.
        */

        public MoneyV2 getTotalAmount() {
            return (MoneyV2) get("totalAmount");
        }

        public CartLineEstimatedCost setTotalAmount(MoneyV2 arg) {
            optimisticData.put(getKey("totalAmount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "amount": return true;

                case "compareAtAmount": return true;

                case "subtotalAmount": return true;

                case "totalAmount": return true;

                default: return false;
            }
        }
    }

    public static class CartLineInput implements Serializable {
        private ID merchandiseId;

        private Input<List<AttributeInput>> attributes = Input.undefined();

        private Input<Integer> quantity = Input.undefined();

        private Input<ID> sellingPlanId = Input.undefined();

        public CartLineInput(ID merchandiseId) {
            this.merchandiseId = merchandiseId;
        }

        public ID getMerchandiseId() {
            return merchandiseId;
        }

        public CartLineInput setMerchandiseId(ID merchandiseId) {
            this.merchandiseId = merchandiseId;
            return this;
        }

        public List<AttributeInput> getAttributes() {
            return attributes.getValue();
        }

        public Input<List<AttributeInput>> getAttributesInput() {
            return attributes;
        }

        public CartLineInput setAttributes(List<AttributeInput> attributes) {
            this.attributes = Input.optional(attributes);
            return this;
        }

        public CartLineInput setAttributesInput(Input<List<AttributeInput>> attributes) {
            if (attributes == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.attributes = attributes;
            return this;
        }

        public Integer getQuantity() {
            return quantity.getValue();
        }

        public Input<Integer> getQuantityInput() {
            return quantity;
        }

        public CartLineInput setQuantity(Integer quantity) {
            this.quantity = Input.optional(quantity);
            return this;
        }

        public CartLineInput setQuantityInput(Input<Integer> quantity) {
            if (quantity == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.quantity = quantity;
            return this;
        }

        public ID getSellingPlanId() {
            return sellingPlanId.getValue();
        }

        public Input<ID> getSellingPlanIdInput() {
            return sellingPlanId;
        }

        public CartLineInput setSellingPlanId(ID sellingPlanId) {
            this.sellingPlanId = Input.optional(sellingPlanId);
            return this;
        }

        public CartLineInput setSellingPlanIdInput(Input<ID> sellingPlanId) {
            if (sellingPlanId == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.sellingPlanId = sellingPlanId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("merchandiseId:");
            Query.appendQuotedString(_queryBuilder, merchandiseId.toString());

            if (this.attributes.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("attributes:");
                if (attributes.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (AttributeInput item1 : attributes.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.quantity.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                if (quantity.getValue() != null) {
                    _queryBuilder.append(quantity.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.sellingPlanId.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sellingPlanId:");
                if (sellingPlanId.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, sellingPlanId.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public static class CartLineUpdateInput implements Serializable {
        private ID id;

        private Input<Integer> quantity = Input.undefined();

        private Input<ID> merchandiseId = Input.undefined();

        private Input<List<AttributeInput>> attributes = Input.undefined();

        private Input<ID> sellingPlanId = Input.undefined();

        public CartLineUpdateInput(ID id) {
            this.id = id;
        }

        public ID getId() {
            return id;
        }

        public CartLineUpdateInput setId(ID id) {
            this.id = id;
            return this;
        }

        public Integer getQuantity() {
            return quantity.getValue();
        }

        public Input<Integer> getQuantityInput() {
            return quantity;
        }

        public CartLineUpdateInput setQuantity(Integer quantity) {
            this.quantity = Input.optional(quantity);
            return this;
        }

        public CartLineUpdateInput setQuantityInput(Input<Integer> quantity) {
            if (quantity == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.quantity = quantity;
            return this;
        }

        public ID getMerchandiseId() {
            return merchandiseId.getValue();
        }

        public Input<ID> getMerchandiseIdInput() {
            return merchandiseId;
        }

        public CartLineUpdateInput setMerchandiseId(ID merchandiseId) {
            this.merchandiseId = Input.optional(merchandiseId);
            return this;
        }

        public CartLineUpdateInput setMerchandiseIdInput(Input<ID> merchandiseId) {
            if (merchandiseId == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.merchandiseId = merchandiseId;
            return this;
        }

        public List<AttributeInput> getAttributes() {
            return attributes.getValue();
        }

        public Input<List<AttributeInput>> getAttributesInput() {
            return attributes;
        }

        public CartLineUpdateInput setAttributes(List<AttributeInput> attributes) {
            this.attributes = Input.optional(attributes);
            return this;
        }

        public CartLineUpdateInput setAttributesInput(Input<List<AttributeInput>> attributes) {
            if (attributes == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.attributes = attributes;
            return this;
        }

        public ID getSellingPlanId() {
            return sellingPlanId.getValue();
        }

        public Input<ID> getSellingPlanIdInput() {
            return sellingPlanId;
        }

        public CartLineUpdateInput setSellingPlanId(ID sellingPlanId) {
            this.sellingPlanId = Input.optional(sellingPlanId);
            return this;
        }

        public CartLineUpdateInput setSellingPlanIdInput(Input<ID> sellingPlanId) {
            if (sellingPlanId == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.sellingPlanId = sellingPlanId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("id:");
            Query.appendQuotedString(_queryBuilder, id.toString());

            if (this.quantity.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                if (quantity.getValue() != null) {
                    _queryBuilder.append(quantity.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.merchandiseId.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("merchandiseId:");
                if (merchandiseId.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, merchandiseId.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.attributes.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("attributes:");
                if (attributes.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (AttributeInput item1 : attributes.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.sellingPlanId.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sellingPlanId:");
                if (sellingPlanId.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, sellingPlanId.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface CartLinesAddPayloadQueryDefinition {
        void define(CartLinesAddPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartLinesAdd` mutation.
    */
    public static class CartLinesAddPayloadQuery extends Query<CartLinesAddPayloadQuery> {
        CartLinesAddPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartLinesAddPayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartLinesAddPayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartLinesAdd` mutation.
    */
    public static class CartLinesAddPayload extends AbstractResponse<CartLinesAddPayload> {
        public CartLinesAddPayload() {
        }

        public CartLinesAddPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartLinesAddPayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartLinesAddPayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartLinesAddPayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartLinesRemovePayloadQueryDefinition {
        void define(CartLinesRemovePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartLinesRemove` mutation.
    */
    public static class CartLinesRemovePayloadQuery extends Query<CartLinesRemovePayloadQuery> {
        CartLinesRemovePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartLinesRemovePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartLinesRemovePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartLinesRemove` mutation.
    */
    public static class CartLinesRemovePayload extends AbstractResponse<CartLinesRemovePayload> {
        public CartLinesRemovePayload() {
        }

        public CartLinesRemovePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartLinesRemovePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartLinesRemovePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartLinesRemovePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartLinesUpdatePayloadQueryDefinition {
        void define(CartLinesUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartLinesUpdate` mutation.
    */
    public static class CartLinesUpdatePayloadQuery extends Query<CartLinesUpdatePayloadQuery> {
        CartLinesUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartLinesUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartLinesUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartLinesUpdate` mutation.
    */
    public static class CartLinesUpdatePayload extends AbstractResponse<CartLinesUpdatePayload> {
        public CartLinesUpdatePayload() {
        }

        public CartLinesUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartLinesUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartLinesUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartLinesUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public static class CartMetafieldDeleteInput implements Serializable {
        private ID ownerId;

        private String key;

        public CartMetafieldDeleteInput(ID ownerId, String key) {
            this.ownerId = ownerId;

            this.key = key;
        }

        public ID getOwnerId() {
            return ownerId;
        }

        public CartMetafieldDeleteInput setOwnerId(ID ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public String getKey() {
            return key;
        }

        public CartMetafieldDeleteInput setKey(String key) {
            this.key = key;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("ownerId:");
            Query.appendQuotedString(_queryBuilder, ownerId.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append('}');
        }
    }

    public interface CartMetafieldDeletePayloadQueryDefinition {
        void define(CartMetafieldDeletePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartMetafieldDelete` mutation.
    */
    public static class CartMetafieldDeletePayloadQuery extends Query<CartMetafieldDeletePayloadQuery> {
        CartMetafieldDeletePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The ID of the deleted cart metafield.
        */
        public CartMetafieldDeletePayloadQuery deletedId() {
            startField("deletedId");

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartMetafieldDeletePayloadQuery userErrors(MetafieldDeleteUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldDeleteUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartMetafieldDelete` mutation.
    */
    public static class CartMetafieldDeletePayload extends AbstractResponse<CartMetafieldDeletePayload> {
        public CartMetafieldDeletePayload() {
        }

        public CartMetafieldDeletePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "deletedId": {
                        ID optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ID(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<MetafieldDeleteUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MetafieldDeleteUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartMetafieldDeletePayload";
        }

        /**
        * The ID of the deleted cart metafield.
        */

        public ID getDeletedId() {
            return (ID) get("deletedId");
        }

        public CartMetafieldDeletePayload setDeletedId(ID arg) {
            optimisticData.put(getKey("deletedId"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<MetafieldDeleteUserError> getUserErrors() {
            return (List<MetafieldDeleteUserError>) get("userErrors");
        }

        public CartMetafieldDeletePayload setUserErrors(List<MetafieldDeleteUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "deletedId": return false;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public static class CartMetafieldsSetInput implements Serializable {
        private ID ownerId;

        private String key;

        private String value;

        private String type;

        public CartMetafieldsSetInput(ID ownerId, String key, String value, String type) {
            this.ownerId = ownerId;

            this.key = key;

            this.value = value;

            this.type = type;
        }

        public ID getOwnerId() {
            return ownerId;
        }

        public CartMetafieldsSetInput setOwnerId(ID ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public String getKey() {
            return key;
        }

        public CartMetafieldsSetInput setKey(String key) {
            this.key = key;
            return this;
        }

        public String getValue() {
            return value;
        }

        public CartMetafieldsSetInput setValue(String value) {
            this.value = value;
            return this;
        }

        public String getType() {
            return type;
        }

        public CartMetafieldsSetInput setType(String type) {
            this.type = type;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("ownerId:");
            Query.appendQuotedString(_queryBuilder, ownerId.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("value:");
            Query.appendQuotedString(_queryBuilder, value.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("type:");
            Query.appendQuotedString(_queryBuilder, type.toString());

            _queryBuilder.append('}');
        }
    }

    public interface CartMetafieldsSetPayloadQueryDefinition {
        void define(CartMetafieldsSetPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartMetafieldsSet` mutation.
    */
    public static class CartMetafieldsSetPayloadQuery extends Query<CartMetafieldsSetPayloadQuery> {
        CartMetafieldsSetPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The list of cart metafields that were set.
        */
        public CartMetafieldsSetPayloadQuery metafields(MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartMetafieldsSetPayloadQuery userErrors(MetafieldsSetUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldsSetUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartMetafieldsSet` mutation.
    */
    public static class CartMetafieldsSetPayload extends AbstractResponse<CartMetafieldsSetPayload> {
        public CartMetafieldsSetPayload() {
        }

        public CartMetafieldsSetPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "metafields": {
                        List<Metafield> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<Metafield> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(new Metafield(jsonAsObject(element1, key)));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<MetafieldsSetUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MetafieldsSetUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartMetafieldsSetPayload";
        }

        /**
        * The list of cart metafields that were set.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public CartMetafieldsSetPayload setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<MetafieldsSetUserError> getUserErrors() {
            return (List<MetafieldsSetUserError>) get("userErrors");
        }

        public CartMetafieldsSetPayload setUserErrors(List<MetafieldsSetUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "metafields": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartNoteUpdatePayloadQueryDefinition {
        void define(CartNoteUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartNoteUpdate` mutation.
    */
    public static class CartNoteUpdatePayloadQuery extends Query<CartNoteUpdatePayloadQuery> {
        CartNoteUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartNoteUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartNoteUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartNoteUpdate` mutation.
    */
    public static class CartNoteUpdatePayload extends AbstractResponse<CartNoteUpdatePayload> {
        public CartNoteUpdatePayload() {
        }

        public CartNoteUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartNoteUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartNoteUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartNoteUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public static class CartPaymentInput implements Serializable {
        private MoneyInput amount;

        private Input<String> sourceIdentifier = Input.undefined();

        private Input<CartFreePaymentMethodInput> freePaymentMethod = Input.undefined();

        private Input<CartDirectPaymentMethodInput> directPaymentMethod = Input.undefined();

        private Input<CartWalletPaymentMethodInput> walletPaymentMethod = Input.undefined();

        public CartPaymentInput(MoneyInput amount) {
            this.amount = amount;
        }

        public MoneyInput getAmount() {
            return amount;
        }

        public CartPaymentInput setAmount(MoneyInput amount) {
            this.amount = amount;
            return this;
        }

        public String getSourceIdentifier() {
            return sourceIdentifier.getValue();
        }

        public Input<String> getSourceIdentifierInput() {
            return sourceIdentifier;
        }

        public CartPaymentInput setSourceIdentifier(String sourceIdentifier) {
            this.sourceIdentifier = Input.optional(sourceIdentifier);
            return this;
        }

        public CartPaymentInput setSourceIdentifierInput(Input<String> sourceIdentifier) {
            if (sourceIdentifier == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.sourceIdentifier = sourceIdentifier;
            return this;
        }

        public CartFreePaymentMethodInput getFreePaymentMethod() {
            return freePaymentMethod.getValue();
        }

        public Input<CartFreePaymentMethodInput> getFreePaymentMethodInput() {
            return freePaymentMethod;
        }

        public CartPaymentInput setFreePaymentMethod(CartFreePaymentMethodInput freePaymentMethod) {
            this.freePaymentMethod = Input.optional(freePaymentMethod);
            return this;
        }

        public CartPaymentInput setFreePaymentMethodInput(Input<CartFreePaymentMethodInput> freePaymentMethod) {
            if (freePaymentMethod == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.freePaymentMethod = freePaymentMethod;
            return this;
        }

        public CartDirectPaymentMethodInput getDirectPaymentMethod() {
            return directPaymentMethod.getValue();
        }

        public Input<CartDirectPaymentMethodInput> getDirectPaymentMethodInput() {
            return directPaymentMethod;
        }

        public CartPaymentInput setDirectPaymentMethod(CartDirectPaymentMethodInput directPaymentMethod) {
            this.directPaymentMethod = Input.optional(directPaymentMethod);
            return this;
        }

        public CartPaymentInput setDirectPaymentMethodInput(Input<CartDirectPaymentMethodInput> directPaymentMethod) {
            if (directPaymentMethod == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.directPaymentMethod = directPaymentMethod;
            return this;
        }

        public CartWalletPaymentMethodInput getWalletPaymentMethod() {
            return walletPaymentMethod.getValue();
        }

        public Input<CartWalletPaymentMethodInput> getWalletPaymentMethodInput() {
            return walletPaymentMethod;
        }

        public CartPaymentInput setWalletPaymentMethod(CartWalletPaymentMethodInput walletPaymentMethod) {
            this.walletPaymentMethod = Input.optional(walletPaymentMethod);
            return this;
        }

        public CartPaymentInput setWalletPaymentMethodInput(Input<CartWalletPaymentMethodInput> walletPaymentMethod) {
            if (walletPaymentMethod == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.walletPaymentMethod = walletPaymentMethod;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("amount:");
            amount.appendTo(_queryBuilder);

            if (this.sourceIdentifier.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sourceIdentifier:");
                if (sourceIdentifier.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, sourceIdentifier.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.freePaymentMethod.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freePaymentMethod:");
                if (freePaymentMethod.getValue() != null) {
                    freePaymentMethod.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.directPaymentMethod.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("directPaymentMethod:");
                if (directPaymentMethod.getValue() != null) {
                    directPaymentMethod.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.walletPaymentMethod.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("walletPaymentMethod:");
                if (walletPaymentMethod.getValue() != null) {
                    walletPaymentMethod.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface CartPaymentUpdatePayloadQueryDefinition {
        void define(CartPaymentUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartPaymentUpdate` mutation.
    */
    public static class CartPaymentUpdatePayloadQuery extends Query<CartPaymentUpdatePayloadQuery> {
        CartPaymentUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartPaymentUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartPaymentUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartPaymentUpdate` mutation.
    */
    public static class CartPaymentUpdatePayload extends AbstractResponse<CartPaymentUpdatePayload> {
        public CartPaymentUpdatePayload() {
        }

        public CartPaymentUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartPaymentUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartPaymentUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartPaymentUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartPreferencesQueryDefinition {
        void define(CartPreferencesQuery _queryBuilder);
    }

    /**
    * A set of preferences tied to the buyer interacting with the cart. Preferences are used to prefill
    * fields in at checkout to streamline information collection. 
    * Preferences are not synced back to the cart if they are overwritten.
    */
    public static class CartPreferencesQuery extends Query<CartPreferencesQuery> {
        CartPreferencesQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Delivery preferences can be used to prefill the delivery section in at checkout.
        */
        public CartPreferencesQuery delivery(CartDeliveryPreferenceQueryDefinition queryDef) {
            startField("delivery");

            _queryBuilder.append('{');
            queryDef.define(new CartDeliveryPreferenceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Wallet preferences are used to populate relevant payment fields in the checkout flow.
        * Accepted value: `["shop_pay"]`.
        */
        public CartPreferencesQuery wallet() {
            startField("wallet");

            return this;
        }
    }

    /**
    * A set of preferences tied to the buyer interacting with the cart. Preferences are used to prefill
    * fields in at checkout to streamline information collection. 
    * Preferences are not synced back to the cart if they are overwritten.
    */
    public static class CartPreferences extends AbstractResponse<CartPreferences> {
        public CartPreferences() {
        }

        public CartPreferences(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "delivery": {
                        CartDeliveryPreference optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartDeliveryPreference(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "wallet": {
                        List<String> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<String> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(jsonAsString(element1, key));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartPreferences";
        }

        /**
        * Delivery preferences can be used to prefill the delivery section in at checkout.
        */

        public CartDeliveryPreference getDelivery() {
            return (CartDeliveryPreference) get("delivery");
        }

        public CartPreferences setDelivery(CartDeliveryPreference arg) {
            optimisticData.put(getKey("delivery"), arg);
            return this;
        }

        /**
        * Wallet preferences are used to populate relevant payment fields in the checkout flow.
        * Accepted value: `["shop_pay"]`.
        */

        public List<String> getWallet() {
            return (List<String>) get("wallet");
        }

        public CartPreferences setWallet(List<String> arg) {
            optimisticData.put(getKey("wallet"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "delivery": return true;

                case "wallet": return false;

                default: return false;
            }
        }
    }

    public static class CartPreferencesInput implements Serializable {
        private Input<List<CartDeliveryPreferenceInput>> delivery = Input.undefined();

        private Input<List<String>> wallet = Input.undefined();

        public List<CartDeliveryPreferenceInput> getDelivery() {
            return delivery.getValue();
        }

        public Input<List<CartDeliveryPreferenceInput>> getDeliveryInput() {
            return delivery;
        }

        public CartPreferencesInput setDelivery(List<CartDeliveryPreferenceInput> delivery) {
            this.delivery = Input.optional(delivery);
            return this;
        }

        public CartPreferencesInput setDeliveryInput(Input<List<CartDeliveryPreferenceInput>> delivery) {
            if (delivery == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.delivery = delivery;
            return this;
        }

        public List<String> getWallet() {
            return wallet.getValue();
        }

        public Input<List<String>> getWalletInput() {
            return wallet;
        }

        public CartPreferencesInput setWallet(List<String> wallet) {
            this.wallet = Input.optional(wallet);
            return this;
        }

        public CartPreferencesInput setWalletInput(Input<List<String>> wallet) {
            if (wallet == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.wallet = wallet;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.delivery.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("delivery:");
                if (delivery.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (CartDeliveryPreferenceInput item1 : delivery.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.wallet.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("wallet:");
                if (wallet.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (String item1 : wallet.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            Query.appendQuotedString(_queryBuilder, item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public static class CartSelectedDeliveryOptionInput implements Serializable {
        private ID deliveryGroupId;

        private String deliveryOptionHandle;

        public CartSelectedDeliveryOptionInput(ID deliveryGroupId, String deliveryOptionHandle) {
            this.deliveryGroupId = deliveryGroupId;

            this.deliveryOptionHandle = deliveryOptionHandle;
        }

        public ID getDeliveryGroupId() {
            return deliveryGroupId;
        }

        public CartSelectedDeliveryOptionInput setDeliveryGroupId(ID deliveryGroupId) {
            this.deliveryGroupId = deliveryGroupId;
            return this;
        }

        public String getDeliveryOptionHandle() {
            return deliveryOptionHandle;
        }

        public CartSelectedDeliveryOptionInput setDeliveryOptionHandle(String deliveryOptionHandle) {
            this.deliveryOptionHandle = deliveryOptionHandle;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("deliveryGroupId:");
            Query.appendQuotedString(_queryBuilder, deliveryGroupId.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("deliveryOptionHandle:");
            Query.appendQuotedString(_queryBuilder, deliveryOptionHandle.toString());

            _queryBuilder.append('}');
        }
    }

    public interface CartSelectedDeliveryOptionsUpdatePayloadQueryDefinition {
        void define(CartSelectedDeliveryOptionsUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartSelectedDeliveryOptionsUpdate` mutation.
    */
    public static class CartSelectedDeliveryOptionsUpdatePayloadQuery extends Query<CartSelectedDeliveryOptionsUpdatePayloadQuery> {
        CartSelectedDeliveryOptionsUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated cart.
        */
        public CartSelectedDeliveryOptionsUpdatePayloadQuery cart(CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartSelectedDeliveryOptionsUpdatePayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartSelectedDeliveryOptionsUpdate` mutation.
    */
    public static class CartSelectedDeliveryOptionsUpdatePayload extends AbstractResponse<CartSelectedDeliveryOptionsUpdatePayload> {
        public CartSelectedDeliveryOptionsUpdatePayload() {
        }

        public CartSelectedDeliveryOptionsUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartSelectedDeliveryOptionsUpdatePayload";
        }

        /**
        * The updated cart.
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public CartSelectedDeliveryOptionsUpdatePayload setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartSelectedDeliveryOptionsUpdatePayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cart": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartSubmitForCompletionPayloadQueryDefinition {
        void define(CartSubmitForCompletionPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `cartSubmitForCompletion` mutation.
    */
    public static class CartSubmitForCompletionPayloadQuery extends Query<CartSubmitForCompletionPayloadQuery> {
        CartSubmitForCompletionPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The result of cart submission for completion.
        */
        public CartSubmitForCompletionPayloadQuery result(CartSubmitForCompletionResultQueryDefinition queryDef) {
            startField("result");

            _queryBuilder.append('{');
            queryDef.define(new CartSubmitForCompletionResultQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CartSubmitForCompletionPayloadQuery userErrors(CartUserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `cartSubmitForCompletion` mutation.
    */
    public static class CartSubmitForCompletionPayload extends AbstractResponse<CartSubmitForCompletionPayload> {
        public CartSubmitForCompletionPayload() {
        }

        public CartSubmitForCompletionPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "result": {
                        CartSubmitForCompletionResult optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownCartSubmitForCompletionResult.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<CartUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartSubmitForCompletionPayload";
        }

        /**
        * The result of cart submission for completion.
        */

        public CartSubmitForCompletionResult getResult() {
            return (CartSubmitForCompletionResult) get("result");
        }

        public CartSubmitForCompletionPayload setResult(CartSubmitForCompletionResult arg) {
            optimisticData.put(getKey("result"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CartUserError> getUserErrors() {
            return (List<CartUserError>) get("userErrors");
        }

        public CartSubmitForCompletionPayload setUserErrors(List<CartUserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "result": return false;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CartSubmitForCompletionResultQueryDefinition {
        void define(CartSubmitForCompletionResultQuery _queryBuilder);
    }

    /**
    * The result of cart submit completion.
    */
    public static class CartSubmitForCompletionResultQuery extends Query<CartSubmitForCompletionResultQuery> {
        CartSubmitForCompletionResultQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public CartSubmitForCompletionResultQuery onSubmitAlreadyAccepted(SubmitAlreadyAcceptedQueryDefinition queryDef) {
            startInlineFragment("SubmitAlreadyAccepted");
            queryDef.define(new SubmitAlreadyAcceptedQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public CartSubmitForCompletionResultQuery onSubmitFailed(SubmitFailedQueryDefinition queryDef) {
            startInlineFragment("SubmitFailed");
            queryDef.define(new SubmitFailedQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public CartSubmitForCompletionResultQuery onSubmitSuccess(SubmitSuccessQueryDefinition queryDef) {
            startInlineFragment("SubmitSuccess");
            queryDef.define(new SubmitSuccessQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public CartSubmitForCompletionResultQuery onSubmitThrottled(SubmitThrottledQueryDefinition queryDef) {
            startInlineFragment("SubmitThrottled");
            queryDef.define(new SubmitThrottledQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface CartSubmitForCompletionResult {
        String getGraphQlTypeName();
    }

    /**
    * The result of cart submit completion.
    */
    public static class UnknownCartSubmitForCompletionResult extends AbstractResponse<UnknownCartSubmitForCompletionResult> implements CartSubmitForCompletionResult {
        public UnknownCartSubmitForCompletionResult() {
        }

        public UnknownCartSubmitForCompletionResult(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static CartSubmitForCompletionResult create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "SubmitAlreadyAccepted": {
                    return new SubmitAlreadyAccepted(fields);
                }

                case "SubmitFailed": {
                    return new SubmitFailed(fields);
                }

                case "SubmitSuccess": {
                    return new SubmitSuccess(fields);
                }

                case "SubmitThrottled": {
                    return new SubmitThrottled(fields);
                }

                default: {
                    return new UnknownCartSubmitForCompletionResult(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface CartUserErrorQueryDefinition {
        void define(CartUserErrorQuery _queryBuilder);
    }

    /**
    * Represents an error that happens during execution of a cart mutation.
    */
    public static class CartUserErrorQuery extends Query<CartUserErrorQuery> {
        CartUserErrorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The error code.
        */
        public CartUserErrorQuery code() {
            startField("code");

            return this;
        }

        /**
        * The path to the input field that caused the error.
        */
        public CartUserErrorQuery field() {
            startField("field");

            return this;
        }

        /**
        * The error message.
        */
        public CartUserErrorQuery message() {
            startField("message");

            return this;
        }
    }

    /**
    * Represents an error that happens during execution of a cart mutation.
    */
    public static class CartUserError extends AbstractResponse<CartUserError> implements DisplayableError {
        public CartUserError() {
        }

        public CartUserError(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        CartErrorCode optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = CartErrorCode.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "field": {
                        List<String> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<String> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(jsonAsString(element1, key));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "message": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CartUserError";
        }

        /**
        * The error code.
        */

        public CartErrorCode getCode() {
            return (CartErrorCode) get("code");
        }

        public CartUserError setCode(CartErrorCode arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The path to the input field that caused the error.
        */

        public List<String> getField() {
            return (List<String>) get("field");
        }

        public CartUserError setField(List<String> arg) {
            optimisticData.put(getKey("field"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public CartUserError setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "field": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    public static class CartWalletPaymentMethodInput implements Serializable {
        private Input<ApplePayWalletContentInput> applePayWalletContent = Input.undefined();

        private Input<ShopPayWalletContentInput> shopPayWalletContent = Input.undefined();

        public ApplePayWalletContentInput getApplePayWalletContent() {
            return applePayWalletContent.getValue();
        }

        public Input<ApplePayWalletContentInput> getApplePayWalletContentInput() {
            return applePayWalletContent;
        }

        public CartWalletPaymentMethodInput setApplePayWalletContent(ApplePayWalletContentInput applePayWalletContent) {
            this.applePayWalletContent = Input.optional(applePayWalletContent);
            return this;
        }

        public CartWalletPaymentMethodInput setApplePayWalletContentInput(Input<ApplePayWalletContentInput> applePayWalletContent) {
            if (applePayWalletContent == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.applePayWalletContent = applePayWalletContent;
            return this;
        }

        public ShopPayWalletContentInput getShopPayWalletContent() {
            return shopPayWalletContent.getValue();
        }

        public Input<ShopPayWalletContentInput> getShopPayWalletContentInput() {
            return shopPayWalletContent;
        }

        public CartWalletPaymentMethodInput setShopPayWalletContent(ShopPayWalletContentInput shopPayWalletContent) {
            this.shopPayWalletContent = Input.optional(shopPayWalletContent);
            return this;
        }

        public CartWalletPaymentMethodInput setShopPayWalletContentInput(Input<ShopPayWalletContentInput> shopPayWalletContent) {
            if (shopPayWalletContent == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.shopPayWalletContent = shopPayWalletContent;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.applePayWalletContent.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("applePayWalletContent:");
                if (applePayWalletContent.getValue() != null) {
                    applePayWalletContent.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.shopPayWalletContent.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shopPayWalletContent:");
                if (shopPayWalletContent.getValue() != null) {
                    shopPayWalletContent.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface CollectionQueryDefinition {
        void define(CollectionQuery _queryBuilder);
    }

    /**
    * A collection represents a grouping of products that a shop owner can create to
    * organize them or make their shops easier to browse.
    */
    public static class CollectionQuery extends Query<CollectionQuery> {
        CollectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        public class DescriptionArguments extends Arguments {
            DescriptionArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Truncates string after the given length.
            */
            public DescriptionArguments truncateAt(Integer value) {
                if (value != null) {
                    startArgument("truncateAt");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface DescriptionArgumentsDefinition {
            void define(DescriptionArguments args);
        }

        /**
        * Stripped description of the collection, single line with HTML tags removed.
        */
        public CollectionQuery description() {
            return description(args -> {});
        }

        /**
        * Stripped description of the collection, single line with HTML tags removed.
        */
        public CollectionQuery description(DescriptionArgumentsDefinition argsDef) {
            startField("description");

            DescriptionArguments args = new DescriptionArguments(_queryBuilder);
            argsDef.define(args);
            DescriptionArguments.end(args);

            return this;
        }

        /**
        * The description of the collection, complete with HTML formatting.
        */
        public CollectionQuery descriptionHtml() {
            startField("descriptionHtml");

            return this;
        }

        /**
        * A human-friendly unique string for the collection automatically generated from its title.
        * Limit of 255 characters.
        */
        public CollectionQuery handle() {
            startField("handle");

            return this;
        }

        /**
        * Image associated with the collection.
        */
        public CollectionQuery image(ImageQueryDefinition queryDef) {
            startField("image");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CollectionQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CollectionQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public CollectionQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */
        public CollectionQuery onlineStoreUrl() {
            startField("onlineStoreUrl");

            return this;
        }

        public class ProductsArguments extends Arguments {
            ProductsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public ProductsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public ProductsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public ProductsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public ProductsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public ProductsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public ProductsArguments sortKey(ProductCollectionSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Returns a subset of products matching all product filters.
            * The input must not contain more than `250` values.
            */
            public ProductsArguments filters(List<ProductFilter> value) {
                if (value != null) {
                    startArgument("filters");
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ProductFilter item1 : value) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }
        }

        public interface ProductsArgumentsDefinition {
            void define(ProductsArguments args);
        }

        /**
        * List of products in the collection.
        */
        public CollectionQuery products(ProductConnectionQueryDefinition queryDef) {
            return products(args -> {}, queryDef);
        }

        /**
        * List of products in the collection.
        */
        public CollectionQuery products(ProductsArgumentsDefinition argsDef, ProductConnectionQueryDefinition queryDef) {
            startField("products");

            ProductsArguments args = new ProductsArguments(_queryBuilder);
            argsDef.define(args);
            ProductsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ProductConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The collection's SEO information.
        */
        public CollectionQuery seo(SEOQueryDefinition queryDef) {
            startField("seo");

            _queryBuilder.append('{');
            queryDef.define(new SEOQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The collection’s name. Limit of 255 characters.
        */
        public CollectionQuery title() {
            startField("title");

            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */
        public CollectionQuery trackingParameters() {
            startField("trackingParameters");

            return this;
        }

        /**
        * The date and time when the collection was last modified.
        */
        public CollectionQuery updatedAt() {
            startField("updatedAt");

            return this;
        }
    }

    /**
    * A collection represents a grouping of products that a shop owner can create to
    * organize them or make their shops easier to browse.
    */
    public static class Collection extends AbstractResponse<Collection> implements HasMetafields, MenuItemResource, MetafieldParentResource, MetafieldReference, Node, OnlineStorePublishable, Trackable {
        public Collection() {
        }

        public Collection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "description": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "descriptionHtml": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "image": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "onlineStoreUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "products": {
                        responseData.put(key, new ProductConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "seo": {
                        responseData.put(key, new SEO(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "trackingParameters": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Collection(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Collection";
        }

        /**
        * Stripped description of the collection, single line with HTML tags removed.
        */

        public String getDescription() {
            return (String) get("description");
        }

        public Collection setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * The description of the collection, complete with HTML formatting.
        */

        public String getDescriptionHtml() {
            return (String) get("descriptionHtml");
        }

        public Collection setDescriptionHtml(String arg) {
            optimisticData.put(getKey("descriptionHtml"), arg);
            return this;
        }

        /**
        * A human-friendly unique string for the collection automatically generated from its title.
        * Limit of 255 characters.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public Collection setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Image associated with the collection.
        */

        public Image getImage() {
            return (Image) get("image");
        }

        public Collection setImage(Image arg) {
            optimisticData.put(getKey("image"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Collection setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Collection setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */

        public String getOnlineStoreUrl() {
            return (String) get("onlineStoreUrl");
        }

        public Collection setOnlineStoreUrl(String arg) {
            optimisticData.put(getKey("onlineStoreUrl"), arg);
            return this;
        }

        /**
        * List of products in the collection.
        */

        public ProductConnection getProducts() {
            return (ProductConnection) get("products");
        }

        public Collection setProducts(ProductConnection arg) {
            optimisticData.put(getKey("products"), arg);
            return this;
        }

        /**
        * The collection's SEO information.
        */

        public SEO getSeo() {
            return (SEO) get("seo");
        }

        public Collection setSeo(SEO arg) {
            optimisticData.put(getKey("seo"), arg);
            return this;
        }

        /**
        * The collection’s name. Limit of 255 characters.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public Collection setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */

        public String getTrackingParameters() {
            return (String) get("trackingParameters");
        }

        public Collection setTrackingParameters(String arg) {
            optimisticData.put(getKey("trackingParameters"), arg);
            return this;
        }

        /**
        * The date and time when the collection was last modified.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public Collection setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "description": return false;

                case "descriptionHtml": return false;

                case "handle": return false;

                case "id": return false;

                case "image": return true;

                case "metafield": return true;

                case "metafields": return true;

                case "onlineStoreUrl": return false;

                case "products": return true;

                case "seo": return true;

                case "title": return false;

                case "trackingParameters": return false;

                case "updatedAt": return false;

                default: return false;
            }
        }
    }

    public interface CollectionConnectionQueryDefinition {
        void define(CollectionConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Collections.
    */
    public static class CollectionConnectionQuery extends Query<CollectionConnectionQuery> {
        CollectionConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public CollectionConnectionQuery edges(CollectionEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new CollectionEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in CollectionEdge.
        */
        public CollectionConnectionQuery nodes(CollectionQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public CollectionConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total count of Collections.
        */
        public CollectionConnectionQuery totalCount() {
            startField("totalCount");

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Collections.
    */
    public static class CollectionConnection extends AbstractResponse<CollectionConnection> {
        public CollectionConnection() {
        }

        public CollectionConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<CollectionEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CollectionEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Collection> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Collection(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalCount": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CollectionConnection";
        }

        /**
        * A list of edges.
        */

        public List<CollectionEdge> getEdges() {
            return (List<CollectionEdge>) get("edges");
        }

        public CollectionConnection setEdges(List<CollectionEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in CollectionEdge.
        */

        public List<Collection> getNodes() {
            return (List<Collection>) get("nodes");
        }

        public CollectionConnection setNodes(List<Collection> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public CollectionConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        /**
        * The total count of Collections.
        */

        public String getTotalCount() {
            return (String) get("totalCount");
        }

        public CollectionConnection setTotalCount(String arg) {
            optimisticData.put(getKey("totalCount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                case "totalCount": return false;

                default: return false;
            }
        }
    }

    public interface CollectionEdgeQueryDefinition {
        void define(CollectionEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Collection and a cursor during pagination.
    */
    public static class CollectionEdgeQuery extends Query<CollectionEdgeQuery> {
        CollectionEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public CollectionEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of CollectionEdge.
        */
        public CollectionEdgeQuery node(CollectionQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Collection and a cursor during pagination.
    */
    public static class CollectionEdge extends AbstractResponse<CollectionEdge> {
        public CollectionEdge() {
        }

        public CollectionEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Collection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CollectionEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public CollectionEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of CollectionEdge.
        */

        public Collection getNode() {
            return (Collection) get("node");
        }

        public CollectionEdge setNode(Collection arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the Collection query.
    */
    public enum CollectionSortKeys {
        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        /**
        * Sort by the `title` value.
        */
        TITLE,

        /**
        * Sort by the `updated_at` value.
        */
        UPDATED_AT,

        UNKNOWN_VALUE;

        public static CollectionSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ID": {
                    return ID;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                case "TITLE": {
                    return TITLE;
                }

                case "UPDATED_AT": {
                    return UPDATED_AT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ID: {
                    return "ID";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                case TITLE: {
                    return "TITLE";
                }

                case UPDATED_AT: {
                    return "UPDATED_AT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface CommentQueryDefinition {
        void define(CommentQuery _queryBuilder);
    }

    /**
    * A comment on an article.
    */
    public static class CommentQuery extends Query<CommentQuery> {
        CommentQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The comment’s author.
        */
        public CommentQuery author(CommentAuthorQueryDefinition queryDef) {
            startField("author");

            _queryBuilder.append('{');
            queryDef.define(new CommentAuthorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ContentArguments extends Arguments {
            ContentArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Truncates string after the given length.
            */
            public ContentArguments truncateAt(Integer value) {
                if (value != null) {
                    startArgument("truncateAt");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface ContentArgumentsDefinition {
            void define(ContentArguments args);
        }

        /**
        * Stripped content of the comment, single line with HTML tags removed.
        */
        public CommentQuery content() {
            return content(args -> {});
        }

        /**
        * Stripped content of the comment, single line with HTML tags removed.
        */
        public CommentQuery content(ContentArgumentsDefinition argsDef) {
            startField("content");

            ContentArguments args = new ContentArguments(_queryBuilder);
            argsDef.define(args);
            ContentArguments.end(args);

            return this;
        }

        /**
        * The content of the comment, complete with HTML formatting.
        */
        public CommentQuery contentHtml() {
            startField("contentHtml");

            return this;
        }
    }

    /**
    * A comment on an article.
    */
    public static class Comment extends AbstractResponse<Comment> implements Node {
        public Comment() {
        }

        public Comment(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "author": {
                        responseData.put(key, new CommentAuthor(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "content": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "contentHtml": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Comment(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Comment";
        }

        /**
        * The comment’s author.
        */

        public CommentAuthor getAuthor() {
            return (CommentAuthor) get("author");
        }

        public Comment setAuthor(CommentAuthor arg) {
            optimisticData.put(getKey("author"), arg);
            return this;
        }

        /**
        * Stripped content of the comment, single line with HTML tags removed.
        */

        public String getContent() {
            return (String) get("content");
        }

        public Comment setContent(String arg) {
            optimisticData.put(getKey("content"), arg);
            return this;
        }

        /**
        * The content of the comment, complete with HTML formatting.
        */

        public String getContentHtml() {
            return (String) get("contentHtml");
        }

        public Comment setContentHtml(String arg) {
            optimisticData.put(getKey("contentHtml"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "author": return true;

                case "content": return false;

                case "contentHtml": return false;

                case "id": return false;

                default: return false;
            }
        }
    }

    public interface CommentAuthorQueryDefinition {
        void define(CommentAuthorQuery _queryBuilder);
    }

    /**
    * The author of a comment.
    */
    public static class CommentAuthorQuery extends Query<CommentAuthorQuery> {
        CommentAuthorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The author's email.
        */
        public CommentAuthorQuery email() {
            startField("email");

            return this;
        }

        /**
        * The author’s name.
        */
        public CommentAuthorQuery name() {
            startField("name");

            return this;
        }
    }

    /**
    * The author of a comment.
    */
    public static class CommentAuthor extends AbstractResponse<CommentAuthor> {
        public CommentAuthor() {
        }

        public CommentAuthor(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "email": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CommentAuthor";
        }

        /**
        * The author's email.
        */

        public String getEmail() {
            return (String) get("email");
        }

        public CommentAuthor setEmail(String arg) {
            optimisticData.put(getKey("email"), arg);
            return this;
        }

        /**
        * The author’s name.
        */

        public String getName() {
            return (String) get("name");
        }

        public CommentAuthor setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "email": return false;

                case "name": return false;

                default: return false;
            }
        }
    }

    public interface CommentConnectionQueryDefinition {
        void define(CommentConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Comments.
    */
    public static class CommentConnectionQuery extends Query<CommentConnectionQuery> {
        CommentConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public CommentConnectionQuery edges(CommentEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new CommentEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in CommentEdge.
        */
        public CommentConnectionQuery nodes(CommentQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new CommentQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public CommentConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Comments.
    */
    public static class CommentConnection extends AbstractResponse<CommentConnection> {
        public CommentConnection() {
        }

        public CommentConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<CommentEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CommentEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Comment> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Comment(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CommentConnection";
        }

        /**
        * A list of edges.
        */

        public List<CommentEdge> getEdges() {
            return (List<CommentEdge>) get("edges");
        }

        public CommentConnection setEdges(List<CommentEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in CommentEdge.
        */

        public List<Comment> getNodes() {
            return (List<Comment>) get("nodes");
        }

        public CommentConnection setNodes(List<Comment> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public CommentConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface CommentEdgeQueryDefinition {
        void define(CommentEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Comment and a cursor during pagination.
    */
    public static class CommentEdgeQuery extends Query<CommentEdgeQuery> {
        CommentEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public CommentEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of CommentEdge.
        */
        public CommentEdgeQuery node(CommentQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new CommentQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Comment and a cursor during pagination.
    */
    public static class CommentEdge extends AbstractResponse<CommentEdge> {
        public CommentEdge() {
        }

        public CommentEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Comment(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CommentEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public CommentEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of CommentEdge.
        */

        public Comment getNode() {
            return (Comment) get("node");
        }

        public CommentEdge setNode(Comment arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface CompanyQueryDefinition {
        void define(CompanyQuery _queryBuilder);
    }

    /**
    * Represents information about a company which is also a customer of the shop.
    */
    public static class CompanyQuery extends Query<CompanyQuery> {
        CompanyQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * was created in Shopify.
        */
        public CompanyQuery createdAt() {
            startField("createdAt");

            return this;
        }

        /**
        * A unique externally-supplied ID for the company.
        */
        public CompanyQuery externalId() {
            startField("externalId");

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CompanyQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CompanyQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public CompanyQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The name of the company.
        */
        public CompanyQuery name() {
            startField("name");

            return this;
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * was last modified.
        */
        public CompanyQuery updatedAt() {
            startField("updatedAt");

            return this;
        }
    }

    /**
    * Represents information about a company which is also a customer of the shop.
    */
    public static class Company extends AbstractResponse<Company> implements HasMetafields, MetafieldParentResource, Node {
        public Company() {
        }

        public Company(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "createdAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "externalId": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Company(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Company";
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * was created in Shopify.
        */

        public DateTime getCreatedAt() {
            return (DateTime) get("createdAt");
        }

        public Company setCreatedAt(DateTime arg) {
            optimisticData.put(getKey("createdAt"), arg);
            return this;
        }

        /**
        * A unique externally-supplied ID for the company.
        */

        public String getExternalId() {
            return (String) get("externalId");
        }

        public Company setExternalId(String arg) {
            optimisticData.put(getKey("externalId"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Company setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Company setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The name of the company.
        */

        public String getName() {
            return (String) get("name");
        }

        public Company setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * was last modified.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public Company setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "createdAt": return false;

                case "externalId": return false;

                case "id": return false;

                case "metafield": return true;

                case "metafields": return true;

                case "name": return false;

                case "updatedAt": return false;

                default: return false;
            }
        }
    }

    public interface CompanyContactQueryDefinition {
        void define(CompanyContactQuery _queryBuilder);
    }

    /**
    * A company's main point of contact.
    */
    public static class CompanyContactQuery extends Query<CompanyContactQuery> {
        CompanyContactQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * contact was created in Shopify.
        */
        public CompanyContactQuery createdAt() {
            startField("createdAt");

            return this;
        }

        /**
        * The company contact's locale (language).
        */
        public CompanyContactQuery locale() {
            startField("locale");

            return this;
        }

        /**
        * The company contact's job title.
        */
        public CompanyContactQuery title() {
            startField("title");

            return this;
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * contact was last modified.
        */
        public CompanyContactQuery updatedAt() {
            startField("updatedAt");

            return this;
        }
    }

    /**
    * A company's main point of contact.
    */
    public static class CompanyContact extends AbstractResponse<CompanyContact> implements Node {
        public CompanyContact() {
        }

        public CompanyContact(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "createdAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "locale": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public CompanyContact(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "CompanyContact";
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * contact was created in Shopify.
        */

        public DateTime getCreatedAt() {
            return (DateTime) get("createdAt");
        }

        public CompanyContact setCreatedAt(DateTime arg) {
            optimisticData.put(getKey("createdAt"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The company contact's locale (language).
        */

        public String getLocale() {
            return (String) get("locale");
        }

        public CompanyContact setLocale(String arg) {
            optimisticData.put(getKey("locale"), arg);
            return this;
        }

        /**
        * The company contact's job title.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public CompanyContact setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * contact was last modified.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public CompanyContact setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "createdAt": return false;

                case "id": return false;

                case "locale": return false;

                case "title": return false;

                case "updatedAt": return false;

                default: return false;
            }
        }
    }

    public interface CompanyLocationQueryDefinition {
        void define(CompanyLocationQuery _queryBuilder);
    }

    /**
    * A company's location.
    */
    public static class CompanyLocationQuery extends Query<CompanyLocationQuery> {
        CompanyLocationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * location was created in Shopify.
        */
        public CompanyLocationQuery createdAt() {
            startField("createdAt");

            return this;
        }

        /**
        * A unique externally-supplied ID for the company.
        */
        public CompanyLocationQuery externalId() {
            startField("externalId");

            return this;
        }

        /**
        * The preferred locale of the company location.
        */
        public CompanyLocationQuery locale() {
            startField("locale");

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CompanyLocationQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CompanyLocationQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public CompanyLocationQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The name of the company location.
        */
        public CompanyLocationQuery name() {
            startField("name");

            return this;
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * location was last modified.
        */
        public CompanyLocationQuery updatedAt() {
            startField("updatedAt");

            return this;
        }
    }

    /**
    * A company's location.
    */
    public static class CompanyLocation extends AbstractResponse<CompanyLocation> implements HasMetafields, MetafieldParentResource, Node {
        public CompanyLocation() {
        }

        public CompanyLocation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "createdAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "externalId": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "locale": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public CompanyLocation(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "CompanyLocation";
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * location was created in Shopify.
        */

        public DateTime getCreatedAt() {
            return (DateTime) get("createdAt");
        }

        public CompanyLocation setCreatedAt(DateTime arg) {
            optimisticData.put(getKey("createdAt"), arg);
            return this;
        }

        /**
        * A unique externally-supplied ID for the company.
        */

        public String getExternalId() {
            return (String) get("externalId");
        }

        public CompanyLocation setExternalId(String arg) {
            optimisticData.put(getKey("externalId"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The preferred locale of the company location.
        */

        public String getLocale() {
            return (String) get("locale");
        }

        public CompanyLocation setLocale(String arg) {
            optimisticData.put(getKey("locale"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public CompanyLocation setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public CompanyLocation setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The name of the company location.
        */

        public String getName() {
            return (String) get("name");
        }

        public CompanyLocation setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company
        * location was last modified.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public CompanyLocation setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "createdAt": return false;

                case "externalId": return false;

                case "id": return false;

                case "locale": return false;

                case "metafield": return true;

                case "metafields": return true;

                case "name": return false;

                case "updatedAt": return false;

                default: return false;
            }
        }
    }

    public interface CompletePaymentChallengeQueryDefinition {
        void define(CompletePaymentChallengeQuery _queryBuilder);
    }

    /**
    * The action for the 3DS payment redirect.
    */
    public static class CompletePaymentChallengeQuery extends Query<CompletePaymentChallengeQuery> {
        CompletePaymentChallengeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The URL for the 3DS payment redirect.
        */
        public CompletePaymentChallengeQuery redirectUrl() {
            startField("redirectUrl");

            return this;
        }
    }

    /**
    * The action for the 3DS payment redirect.
    */
    public static class CompletePaymentChallenge extends AbstractResponse<CompletePaymentChallenge> implements CartCompletionAction {
        public CompletePaymentChallenge() {
        }

        public CompletePaymentChallenge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "redirectUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CompletePaymentChallenge";
        }

        /**
        * The URL for the 3DS payment redirect.
        */

        public String getRedirectUrl() {
            return (String) get("redirectUrl");
        }

        public CompletePaymentChallenge setRedirectUrl(String arg) {
            optimisticData.put(getKey("redirectUrl"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "redirectUrl": return false;

                default: return false;
            }
        }
    }

    public interface CompletionErrorQueryDefinition {
        void define(CompletionErrorQuery _queryBuilder);
    }

    /**
    * An error that occurred during a cart completion attempt.
    */
    public static class CompletionErrorQuery extends Query<CompletionErrorQuery> {
        CompletionErrorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The error code.
        */
        public CompletionErrorQuery code() {
            startField("code");

            return this;
        }

        /**
        * The error message.
        */
        public CompletionErrorQuery message() {
            startField("message");

            return this;
        }
    }

    /**
    * An error that occurred during a cart completion attempt.
    */
    public static class CompletionError extends AbstractResponse<CompletionError> {
        public CompletionError() {
        }

        public CompletionError(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        responseData.put(key, CompletionErrorCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "message": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CompletionError";
        }

        /**
        * The error code.
        */

        public CompletionErrorCode getCode() {
            return (CompletionErrorCode) get("code");
        }

        public CompletionError setCode(CompletionErrorCode arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public CompletionError setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    /**
    * The code of the error that occurred during a cart completion attempt.
    */
    public enum CompletionErrorCode {
        ERROR,

        INVENTORY_RESERVATION_ERROR,

        PAYMENT_AMOUNT_TOO_SMALL,

        PAYMENT_CALL_ISSUER,

        PAYMENT_CARD_DECLINED,

        PAYMENT_ERROR,

        PAYMENT_GATEWAY_NOT_ENABLED_ERROR,

        PAYMENT_INSUFFICIENT_FUNDS,

        PAYMENT_INVALID_BILLING_ADDRESS,

        PAYMENT_INVALID_CREDIT_CARD,

        PAYMENT_INVALID_CURRENCY,

        PAYMENT_INVALID_PAYMENT_METHOD,

        PAYMENT_TRANSIENT_ERROR,

        UNKNOWN_VALUE;

        public static CompletionErrorCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ERROR": {
                    return ERROR;
                }

                case "INVENTORY_RESERVATION_ERROR": {
                    return INVENTORY_RESERVATION_ERROR;
                }

                case "PAYMENT_AMOUNT_TOO_SMALL": {
                    return PAYMENT_AMOUNT_TOO_SMALL;
                }

                case "PAYMENT_CALL_ISSUER": {
                    return PAYMENT_CALL_ISSUER;
                }

                case "PAYMENT_CARD_DECLINED": {
                    return PAYMENT_CARD_DECLINED;
                }

                case "PAYMENT_ERROR": {
                    return PAYMENT_ERROR;
                }

                case "PAYMENT_GATEWAY_NOT_ENABLED_ERROR": {
                    return PAYMENT_GATEWAY_NOT_ENABLED_ERROR;
                }

                case "PAYMENT_INSUFFICIENT_FUNDS": {
                    return PAYMENT_INSUFFICIENT_FUNDS;
                }

                case "PAYMENT_INVALID_BILLING_ADDRESS": {
                    return PAYMENT_INVALID_BILLING_ADDRESS;
                }

                case "PAYMENT_INVALID_CREDIT_CARD": {
                    return PAYMENT_INVALID_CREDIT_CARD;
                }

                case "PAYMENT_INVALID_CURRENCY": {
                    return PAYMENT_INVALID_CURRENCY;
                }

                case "PAYMENT_INVALID_PAYMENT_METHOD": {
                    return PAYMENT_INVALID_PAYMENT_METHOD;
                }

                case "PAYMENT_TRANSIENT_ERROR": {
                    return PAYMENT_TRANSIENT_ERROR;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ERROR: {
                    return "ERROR";
                }

                case INVENTORY_RESERVATION_ERROR: {
                    return "INVENTORY_RESERVATION_ERROR";
                }

                case PAYMENT_AMOUNT_TOO_SMALL: {
                    return "PAYMENT_AMOUNT_TOO_SMALL";
                }

                case PAYMENT_CALL_ISSUER: {
                    return "PAYMENT_CALL_ISSUER";
                }

                case PAYMENT_CARD_DECLINED: {
                    return "PAYMENT_CARD_DECLINED";
                }

                case PAYMENT_ERROR: {
                    return "PAYMENT_ERROR";
                }

                case PAYMENT_GATEWAY_NOT_ENABLED_ERROR: {
                    return "PAYMENT_GATEWAY_NOT_ENABLED_ERROR";
                }

                case PAYMENT_INSUFFICIENT_FUNDS: {
                    return "PAYMENT_INSUFFICIENT_FUNDS";
                }

                case PAYMENT_INVALID_BILLING_ADDRESS: {
                    return "PAYMENT_INVALID_BILLING_ADDRESS";
                }

                case PAYMENT_INVALID_CREDIT_CARD: {
                    return "PAYMENT_INVALID_CREDIT_CARD";
                }

                case PAYMENT_INVALID_CURRENCY: {
                    return "PAYMENT_INVALID_CURRENCY";
                }

                case PAYMENT_INVALID_PAYMENT_METHOD: {
                    return "PAYMENT_INVALID_PAYMENT_METHOD";
                }

                case PAYMENT_TRANSIENT_ERROR: {
                    return "PAYMENT_TRANSIENT_ERROR";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface ComponentizableCartLineQueryDefinition {
        void define(ComponentizableCartLineQuery _queryBuilder);
    }

    /**
    * Represents information about the grouped merchandise in the cart.
    */
    public static class ComponentizableCartLineQuery extends Query<ComponentizableCartLineQuery> {
        ComponentizableCartLineQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * An attribute associated with the cart line.
        */
        public ComponentizableCartLineQuery attribute(String key, AttributeQueryDefinition queryDef) {
            startField("attribute");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The attributes associated with the cart line. Attributes are represented as key-value pairs.
        */
        public ComponentizableCartLineQuery attributes(AttributeQueryDefinition queryDef) {
            startField("attributes");

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change
        * and changes will be reflected at checkout.
        */
        public ComponentizableCartLineQuery cost(CartLineCostQueryDefinition queryDef) {
            startField("cost");

            _queryBuilder.append('{');
            queryDef.define(new CartLineCostQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The discounts that have been applied to the cart line.
        */
        public ComponentizableCartLineQuery discountAllocations(CartDiscountAllocationQueryDefinition queryDef) {
            startField("discountAllocations");

            _queryBuilder.append('{');
            queryDef.define(new CartDiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs
        * are subject to change and changes will be reflected at checkout.
        *
        * @deprecated Use `cost` instead.
        */
        @Deprecated
        public ComponentizableCartLineQuery estimatedCost(CartLineEstimatedCostQueryDefinition queryDef) {
            startField("estimatedCost");

            _queryBuilder.append('{');
            queryDef.define(new CartLineEstimatedCostQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The components of the line item.
        */
        public ComponentizableCartLineQuery lineComponents(CartLineQueryDefinition queryDef) {
            startField("lineComponents");

            _queryBuilder.append('{');
            queryDef.define(new CartLineQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The merchandise that the buyer intends to purchase.
        */
        public ComponentizableCartLineQuery merchandise(MerchandiseQueryDefinition queryDef) {
            startField("merchandise");

            _queryBuilder.append('{');
            queryDef.define(new MerchandiseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The quantity of the merchandise that the customer intends to purchase.
        */
        public ComponentizableCartLineQuery quantity() {
            startField("quantity");

            return this;
        }

        /**
        * The selling plan associated with the cart line and the effect that each selling plan has on variants
        * when they're purchased.
        */
        public ComponentizableCartLineQuery sellingPlanAllocation(SellingPlanAllocationQueryDefinition queryDef) {
            startField("sellingPlanAllocation");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents information about the grouped merchandise in the cart.
    */
    public static class ComponentizableCartLine extends AbstractResponse<ComponentizableCartLine> implements BaseCartLine, Node {
        public ComponentizableCartLine() {
        }

        public ComponentizableCartLine(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "attribute": {
                        Attribute optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Attribute(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "attributes": {
                        List<Attribute> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Attribute(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "cost": {
                        responseData.put(key, new CartLineCost(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "discountAllocations": {
                        List<CartDiscountAllocation> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownCartDiscountAllocation.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "estimatedCost": {
                        responseData.put(key, new CartLineEstimatedCost(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "lineComponents": {
                        List<CartLine> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CartLine(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "merchandise": {
                        responseData.put(key, UnknownMerchandise.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "quantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "sellingPlanAllocation": {
                        SellingPlanAllocation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new SellingPlanAllocation(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public ComponentizableCartLine(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "ComponentizableCartLine";
        }

        /**
        * An attribute associated with the cart line.
        */

        public Attribute getAttribute() {
            return (Attribute) get("attribute");
        }

        public ComponentizableCartLine setAttribute(Attribute arg) {
            optimisticData.put(getKey("attribute"), arg);
            return this;
        }

        /**
        * The attributes associated with the cart line. Attributes are represented as key-value pairs.
        */

        public List<Attribute> getAttributes() {
            return (List<Attribute>) get("attributes");
        }

        public ComponentizableCartLine setAttributes(List<Attribute> arg) {
            optimisticData.put(getKey("attributes"), arg);
            return this;
        }

        /**
        * The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change
        * and changes will be reflected at checkout.
        */

        public CartLineCost getCost() {
            return (CartLineCost) get("cost");
        }

        public ComponentizableCartLine setCost(CartLineCost arg) {
            optimisticData.put(getKey("cost"), arg);
            return this;
        }

        /**
        * The discounts that have been applied to the cart line.
        */

        public List<CartDiscountAllocation> getDiscountAllocations() {
            return (List<CartDiscountAllocation>) get("discountAllocations");
        }

        public ComponentizableCartLine setDiscountAllocations(List<CartDiscountAllocation> arg) {
            optimisticData.put(getKey("discountAllocations"), arg);
            return this;
        }

        /**
        * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs
        * are subject to change and changes will be reflected at checkout.
        *
        * @deprecated Use `cost` instead.
        */

        public CartLineEstimatedCost getEstimatedCost() {
            return (CartLineEstimatedCost) get("estimatedCost");
        }

        public ComponentizableCartLine setEstimatedCost(CartLineEstimatedCost arg) {
            optimisticData.put(getKey("estimatedCost"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The components of the line item.
        */

        public List<CartLine> getLineComponents() {
            return (List<CartLine>) get("lineComponents");
        }

        public ComponentizableCartLine setLineComponents(List<CartLine> arg) {
            optimisticData.put(getKey("lineComponents"), arg);
            return this;
        }

        /**
        * The merchandise that the buyer intends to purchase.
        */

        public Merchandise getMerchandise() {
            return (Merchandise) get("merchandise");
        }

        public ComponentizableCartLine setMerchandise(Merchandise arg) {
            optimisticData.put(getKey("merchandise"), arg);
            return this;
        }

        /**
        * The quantity of the merchandise that the customer intends to purchase.
        */

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public ComponentizableCartLine setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        /**
        * The selling plan associated with the cart line and the effect that each selling plan has on variants
        * when they're purchased.
        */

        public SellingPlanAllocation getSellingPlanAllocation() {
            return (SellingPlanAllocation) get("sellingPlanAllocation");
        }

        public ComponentizableCartLine setSellingPlanAllocation(SellingPlanAllocation arg) {
            optimisticData.put(getKey("sellingPlanAllocation"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "attribute": return true;

                case "attributes": return true;

                case "cost": return true;

                case "discountAllocations": return false;

                case "estimatedCost": return true;

                case "id": return false;

                case "lineComponents": return true;

                case "merchandise": return false;

                case "quantity": return false;

                case "sellingPlanAllocation": return true;

                default: return false;
            }
        }
    }

    public interface CountryQueryDefinition {
        void define(CountryQuery _queryBuilder);
    }

    /**
    * A country.
    */
    public static class CountryQuery extends Query<CountryQuery> {
        CountryQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The languages available for the country.
        */
        public CountryQuery availableLanguages(LanguageQueryDefinition queryDef) {
            startField("availableLanguages");

            _queryBuilder.append('{');
            queryDef.define(new LanguageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The currency of the country.
        */
        public CountryQuery currency(CurrencyQueryDefinition queryDef) {
            startField("currency");

            _queryBuilder.append('{');
            queryDef.define(new CurrencyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The ISO code of the country.
        */
        public CountryQuery isoCode() {
            startField("isoCode");

            return this;
        }

        /**
        * The market that includes this country.
        */
        public CountryQuery market(MarketQueryDefinition queryDef) {
            startField("market");

            _queryBuilder.append('{');
            queryDef.define(new MarketQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The name of the country.
        */
        public CountryQuery name() {
            startField("name");

            return this;
        }

        /**
        * The unit system used in the country.
        */
        public CountryQuery unitSystem() {
            startField("unitSystem");

            return this;
        }
    }

    /**
    * A country.
    */
    public static class Country extends AbstractResponse<Country> {
        public Country() {
        }

        public Country(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "availableLanguages": {
                        List<Language> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Language(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "currency": {
                        responseData.put(key, new Currency(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "isoCode": {
                        responseData.put(key, CountryCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "market": {
                        Market optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Market(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "unitSystem": {
                        responseData.put(key, UnitSystem.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Country";
        }

        /**
        * The languages available for the country.
        */

        public List<Language> getAvailableLanguages() {
            return (List<Language>) get("availableLanguages");
        }

        public Country setAvailableLanguages(List<Language> arg) {
            optimisticData.put(getKey("availableLanguages"), arg);
            return this;
        }

        /**
        * The currency of the country.
        */

        public Currency getCurrency() {
            return (Currency) get("currency");
        }

        public Country setCurrency(Currency arg) {
            optimisticData.put(getKey("currency"), arg);
            return this;
        }

        /**
        * The ISO code of the country.
        */

        public CountryCode getIsoCode() {
            return (CountryCode) get("isoCode");
        }

        public Country setIsoCode(CountryCode arg) {
            optimisticData.put(getKey("isoCode"), arg);
            return this;
        }

        /**
        * The market that includes this country.
        */

        public Market getMarket() {
            return (Market) get("market");
        }

        public Country setMarket(Market arg) {
            optimisticData.put(getKey("market"), arg);
            return this;
        }

        /**
        * The name of the country.
        */

        public String getName() {
            return (String) get("name");
        }

        public Country setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The unit system used in the country.
        */

        public UnitSystem getUnitSystem() {
            return (UnitSystem) get("unitSystem");
        }

        public Country setUnitSystem(UnitSystem arg) {
            optimisticData.put(getKey("unitSystem"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "availableLanguages": return true;

                case "currency": return true;

                case "isoCode": return false;

                case "market": return true;

                case "name": return false;

                case "unitSystem": return false;

                default: return false;
            }
        }
    }

    /**
    * The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
    * If a territory doesn't have a country code value in the `CountryCode` enum, then it might be
    * considered a subdivision
    * of another country. For example, the territories associated with Spain are represented by the
    * country code `ES`,
    * and the territories associated with the United States of America are represented by the country code
    * `US`.
    */
    public enum CountryCode {
        /**
        * Ascension Island.
        */
        AC,

        /**
        * Andorra.
        */
        AD,

        /**
        * United Arab Emirates.
        */
        AE,

        /**
        * Afghanistan.
        */
        AF,

        /**
        * Antigua & Barbuda.
        */
        AG,

        /**
        * Anguilla.
        */
        AI,

        /**
        * Albania.
        */
        AL,

        /**
        * Armenia.
        */
        AM,

        /**
        * Netherlands Antilles.
        */
        AN,

        /**
        * Angola.
        */
        AO,

        /**
        * Argentina.
        */
        AR,

        /**
        * Austria.
        */
        AT,

        /**
        * Australia.
        */
        AU,

        /**
        * Aruba.
        */
        AW,

        /**
        * Åland Islands.
        */
        AX,

        /**
        * Azerbaijan.
        */
        AZ,

        /**
        * Bosnia & Herzegovina.
        */
        BA,

        /**
        * Barbados.
        */
        BB,

        /**
        * Bangladesh.
        */
        BD,

        /**
        * Belgium.
        */
        BE,

        /**
        * Burkina Faso.
        */
        BF,

        /**
        * Bulgaria.
        */
        BG,

        /**
        * Bahrain.
        */
        BH,

        /**
        * Burundi.
        */
        BI,

        /**
        * Benin.
        */
        BJ,

        /**
        * St. Barthélemy.
        */
        BL,

        /**
        * Bermuda.
        */
        BM,

        /**
        * Brunei.
        */
        BN,

        /**
        * Bolivia.
        */
        BO,

        /**
        * Caribbean Netherlands.
        */
        BQ,

        /**
        * Brazil.
        */
        BR,

        /**
        * Bahamas.
        */
        BS,

        /**
        * Bhutan.
        */
        BT,

        /**
        * Bouvet Island.
        */
        BV,

        /**
        * Botswana.
        */
        BW,

        /**
        * Belarus.
        */
        BY,

        /**
        * Belize.
        */
        BZ,

        /**
        * Canada.
        */
        CA,

        /**
        * Cocos (Keeling) Islands.
        */
        CC,

        /**
        * Congo - Kinshasa.
        */
        CD,

        /**
        * Central African Republic.
        */
        CF,

        /**
        * Congo - Brazzaville.
        */
        CG,

        /**
        * Switzerland.
        */
        CH,

        /**
        * Côte d’Ivoire.
        */
        CI,

        /**
        * Cook Islands.
        */
        CK,

        /**
        * Chile.
        */
        CL,

        /**
        * Cameroon.
        */
        CM,

        /**
        * China.
        */
        CN,

        /**
        * Colombia.
        */
        CO,

        /**
        * Costa Rica.
        */
        CR,

        /**
        * Cuba.
        */
        CU,

        /**
        * Cape Verde.
        */
        CV,

        /**
        * Curaçao.
        */
        CW,

        /**
        * Christmas Island.
        */
        CX,

        /**
        * Cyprus.
        */
        CY,

        /**
        * Czechia.
        */
        CZ,

        /**
        * Germany.
        */
        DE,

        /**
        * Djibouti.
        */
        DJ,

        /**
        * Denmark.
        */
        DK,

        /**
        * Dominica.
        */
        DM,

        /**
        * Dominican Republic.
        */
        DO,

        /**
        * Algeria.
        */
        DZ,

        /**
        * Ecuador.
        */
        EC,

        /**
        * Estonia.
        */
        EE,

        /**
        * Egypt.
        */
        EG,

        /**
        * Western Sahara.
        */
        EH,

        /**
        * Eritrea.
        */
        ER,

        /**
        * Spain.
        */
        ES,

        /**
        * Ethiopia.
        */
        ET,

        /**
        * Finland.
        */
        FI,

        /**
        * Fiji.
        */
        FJ,

        /**
        * Falkland Islands.
        */
        FK,

        /**
        * Faroe Islands.
        */
        FO,

        /**
        * France.
        */
        FR,

        /**
        * Gabon.
        */
        GA,

        /**
        * United Kingdom.
        */
        GB,

        /**
        * Grenada.
        */
        GD,

        /**
        * Georgia.
        */
        GE,

        /**
        * French Guiana.
        */
        GF,

        /**
        * Guernsey.
        */
        GG,

        /**
        * Ghana.
        */
        GH,

        /**
        * Gibraltar.
        */
        GI,

        /**
        * Greenland.
        */
        GL,

        /**
        * Gambia.
        */
        GM,

        /**
        * Guinea.
        */
        GN,

        /**
        * Guadeloupe.
        */
        GP,

        /**
        * Equatorial Guinea.
        */
        GQ,

        /**
        * Greece.
        */
        GR,

        /**
        * South Georgia & South Sandwich Islands.
        */
        GS,

        /**
        * Guatemala.
        */
        GT,

        /**
        * Guinea-Bissau.
        */
        GW,

        /**
        * Guyana.
        */
        GY,

        /**
        * Hong Kong SAR.
        */
        HK,

        /**
        * Heard & McDonald Islands.
        */
        HM,

        /**
        * Honduras.
        */
        HN,

        /**
        * Croatia.
        */
        HR,

        /**
        * Haiti.
        */
        HT,

        /**
        * Hungary.
        */
        HU,

        /**
        * Indonesia.
        */
        ID,

        /**
        * Ireland.
        */
        IE,

        /**
        * Israel.
        */
        IL,

        /**
        * Isle of Man.
        */
        IM,

        /**
        * India.
        */
        IN,

        /**
        * British Indian Ocean Territory.
        */
        IO,

        /**
        * Iraq.
        */
        IQ,

        /**
        * Iran.
        */
        IR,

        /**
        * Iceland.
        */
        IS,

        /**
        * Italy.
        */
        IT,

        /**
        * Jersey.
        */
        JE,

        /**
        * Jamaica.
        */
        JM,

        /**
        * Jordan.
        */
        JO,

        /**
        * Japan.
        */
        JP,

        /**
        * Kenya.
        */
        KE,

        /**
        * Kyrgyzstan.
        */
        KG,

        /**
        * Cambodia.
        */
        KH,

        /**
        * Kiribati.
        */
        KI,

        /**
        * Comoros.
        */
        KM,

        /**
        * St. Kitts & Nevis.
        */
        KN,

        /**
        * North Korea.
        */
        KP,

        /**
        * South Korea.
        */
        KR,

        /**
        * Kuwait.
        */
        KW,

        /**
        * Cayman Islands.
        */
        KY,

        /**
        * Kazakhstan.
        */
        KZ,

        /**
        * Laos.
        */
        LA,

        /**
        * Lebanon.
        */
        LB,

        /**
        * St. Lucia.
        */
        LC,

        /**
        * Liechtenstein.
        */
        LI,

        /**
        * Sri Lanka.
        */
        LK,

        /**
        * Liberia.
        */
        LR,

        /**
        * Lesotho.
        */
        LS,

        /**
        * Lithuania.
        */
        LT,

        /**
        * Luxembourg.
        */
        LU,

        /**
        * Latvia.
        */
        LV,

        /**
        * Libya.
        */
        LY,

        /**
        * Morocco.
        */
        MA,

        /**
        * Monaco.
        */
        MC,

        /**
        * Moldova.
        */
        MD,

        /**
        * Montenegro.
        */
        ME,

        /**
        * St. Martin.
        */
        MF,

        /**
        * Madagascar.
        */
        MG,

        /**
        * North Macedonia.
        */
        MK,

        /**
        * Mali.
        */
        ML,

        /**
        * Myanmar (Burma).
        */
        MM,

        /**
        * Mongolia.
        */
        MN,

        /**
        * Macao SAR.
        */
        MO,

        /**
        * Martinique.
        */
        MQ,

        /**
        * Mauritania.
        */
        MR,

        /**
        * Montserrat.
        */
        MS,

        /**
        * Malta.
        */
        MT,

        /**
        * Mauritius.
        */
        MU,

        /**
        * Maldives.
        */
        MV,

        /**
        * Malawi.
        */
        MW,

        /**
        * Mexico.
        */
        MX,

        /**
        * Malaysia.
        */
        MY,

        /**
        * Mozambique.
        */
        MZ,

        /**
        * Namibia.
        */
        NA,

        /**
        * New Caledonia.
        */
        NC,

        /**
        * Niger.
        */
        NE,

        /**
        * Norfolk Island.
        */
        NF,

        /**
        * Nigeria.
        */
        NG,

        /**
        * Nicaragua.
        */
        NI,

        /**
        * Netherlands.
        */
        NL,

        /**
        * Norway.
        */
        NO,

        /**
        * Nepal.
        */
        NP,

        /**
        * Nauru.
        */
        NR,

        /**
        * Niue.
        */
        NU,

        /**
        * New Zealand.
        */
        NZ,

        /**
        * Oman.
        */
        OM,

        /**
        * Panama.
        */
        PA,

        /**
        * Peru.
        */
        PE,

        /**
        * French Polynesia.
        */
        PF,

        /**
        * Papua New Guinea.
        */
        PG,

        /**
        * Philippines.
        */
        PH,

        /**
        * Pakistan.
        */
        PK,

        /**
        * Poland.
        */
        PL,

        /**
        * St. Pierre & Miquelon.
        */
        PM,

        /**
        * Pitcairn Islands.
        */
        PN,

        /**
        * Palestinian Territories.
        */
        PS,

        /**
        * Portugal.
        */
        PT,

        /**
        * Paraguay.
        */
        PY,

        /**
        * Qatar.
        */
        QA,

        /**
        * Réunion.
        */
        RE,

        /**
        * Romania.
        */
        RO,

        /**
        * Serbia.
        */
        RS,

        /**
        * Russia.
        */
        RU,

        /**
        * Rwanda.
        */
        RW,

        /**
        * Saudi Arabia.
        */
        SA,

        /**
        * Solomon Islands.
        */
        SB,

        /**
        * Seychelles.
        */
        SC,

        /**
        * Sudan.
        */
        SD,

        /**
        * Sweden.
        */
        SE,

        /**
        * Singapore.
        */
        SG,

        /**
        * St. Helena.
        */
        SH,

        /**
        * Slovenia.
        */
        SI,

        /**
        * Svalbard & Jan Mayen.
        */
        SJ,

        /**
        * Slovakia.
        */
        SK,

        /**
        * Sierra Leone.
        */
        SL,

        /**
        * San Marino.
        */
        SM,

        /**
        * Senegal.
        */
        SN,

        /**
        * Somalia.
        */
        SO,

        /**
        * Suriname.
        */
        SR,

        /**
        * South Sudan.
        */
        SS,

        /**
        * São Tomé & Príncipe.
        */
        ST,

        /**
        * El Salvador.
        */
        SV,

        /**
        * Sint Maarten.
        */
        SX,

        /**
        * Syria.
        */
        SY,

        /**
        * Eswatini.
        */
        SZ,

        /**
        * Tristan da Cunha.
        */
        TA,

        /**
        * Turks & Caicos Islands.
        */
        TC,

        /**
        * Chad.
        */
        TD,

        /**
        * French Southern Territories.
        */
        TF,

        /**
        * Togo.
        */
        TG,

        /**
        * Thailand.
        */
        TH,

        /**
        * Tajikistan.
        */
        TJ,

        /**
        * Tokelau.
        */
        TK,

        /**
        * Timor-Leste.
        */
        TL,

        /**
        * Turkmenistan.
        */
        TM,

        /**
        * Tunisia.
        */
        TN,

        /**
        * Tonga.
        */
        TO,

        /**
        * Türkiye.
        */
        TR,

        /**
        * Trinidad & Tobago.
        */
        TT,

        /**
        * Tuvalu.
        */
        TV,

        /**
        * Taiwan.
        */
        TW,

        /**
        * Tanzania.
        */
        TZ,

        /**
        * Ukraine.
        */
        UA,

        /**
        * Uganda.
        */
        UG,

        /**
        * U.S. Outlying Islands.
        */
        UM,

        /**
        * United States.
        */
        US,

        /**
        * Uruguay.
        */
        UY,

        /**
        * Uzbekistan.
        */
        UZ,

        /**
        * Vatican City.
        */
        VA,

        /**
        * St. Vincent & Grenadines.
        */
        VC,

        /**
        * Venezuela.
        */
        VE,

        /**
        * British Virgin Islands.
        */
        VG,

        /**
        * Vietnam.
        */
        VN,

        /**
        * Vanuatu.
        */
        VU,

        /**
        * Wallis & Futuna.
        */
        WF,

        /**
        * Samoa.
        */
        WS,

        /**
        * Kosovo.
        */
        XK,

        /**
        * Yemen.
        */
        YE,

        /**
        * Mayotte.
        */
        YT,

        /**
        * South Africa.
        */
        ZA,

        /**
        * Zambia.
        */
        ZM,

        /**
        * Zimbabwe.
        */
        ZW,

        /**
        * Unknown Region.
        */
        ZZ,

        UNKNOWN_VALUE;

        public static CountryCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "AC": {
                    return AC;
                }

                case "AD": {
                    return AD;
                }

                case "AE": {
                    return AE;
                }

                case "AF": {
                    return AF;
                }

                case "AG": {
                    return AG;
                }

                case "AI": {
                    return AI;
                }

                case "AL": {
                    return AL;
                }

                case "AM": {
                    return AM;
                }

                case "AN": {
                    return AN;
                }

                case "AO": {
                    return AO;
                }

                case "AR": {
                    return AR;
                }

                case "AT": {
                    return AT;
                }

                case "AU": {
                    return AU;
                }

                case "AW": {
                    return AW;
                }

                case "AX": {
                    return AX;
                }

                case "AZ": {
                    return AZ;
                }

                case "BA": {
                    return BA;
                }

                case "BB": {
                    return BB;
                }

                case "BD": {
                    return BD;
                }

                case "BE": {
                    return BE;
                }

                case "BF": {
                    return BF;
                }

                case "BG": {
                    return BG;
                }

                case "BH": {
                    return BH;
                }

                case "BI": {
                    return BI;
                }

                case "BJ": {
                    return BJ;
                }

                case "BL": {
                    return BL;
                }

                case "BM": {
                    return BM;
                }

                case "BN": {
                    return BN;
                }

                case "BO": {
                    return BO;
                }

                case "BQ": {
                    return BQ;
                }

                case "BR": {
                    return BR;
                }

                case "BS": {
                    return BS;
                }

                case "BT": {
                    return BT;
                }

                case "BV": {
                    return BV;
                }

                case "BW": {
                    return BW;
                }

                case "BY": {
                    return BY;
                }

                case "BZ": {
                    return BZ;
                }

                case "CA": {
                    return CA;
                }

                case "CC": {
                    return CC;
                }

                case "CD": {
                    return CD;
                }

                case "CF": {
                    return CF;
                }

                case "CG": {
                    return CG;
                }

                case "CH": {
                    return CH;
                }

                case "CI": {
                    return CI;
                }

                case "CK": {
                    return CK;
                }

                case "CL": {
                    return CL;
                }

                case "CM": {
                    return CM;
                }

                case "CN": {
                    return CN;
                }

                case "CO": {
                    return CO;
                }

                case "CR": {
                    return CR;
                }

                case "CU": {
                    return CU;
                }

                case "CV": {
                    return CV;
                }

                case "CW": {
                    return CW;
                }

                case "CX": {
                    return CX;
                }

                case "CY": {
                    return CY;
                }

                case "CZ": {
                    return CZ;
                }

                case "DE": {
                    return DE;
                }

                case "DJ": {
                    return DJ;
                }

                case "DK": {
                    return DK;
                }

                case "DM": {
                    return DM;
                }

                case "DO": {
                    return DO;
                }

                case "DZ": {
                    return DZ;
                }

                case "EC": {
                    return EC;
                }

                case "EE": {
                    return EE;
                }

                case "EG": {
                    return EG;
                }

                case "EH": {
                    return EH;
                }

                case "ER": {
                    return ER;
                }

                case "ES": {
                    return ES;
                }

                case "ET": {
                    return ET;
                }

                case "FI": {
                    return FI;
                }

                case "FJ": {
                    return FJ;
                }

                case "FK": {
                    return FK;
                }

                case "FO": {
                    return FO;
                }

                case "FR": {
                    return FR;
                }

                case "GA": {
                    return GA;
                }

                case "GB": {
                    return GB;
                }

                case "GD": {
                    return GD;
                }

                case "GE": {
                    return GE;
                }

                case "GF": {
                    return GF;
                }

                case "GG": {
                    return GG;
                }

                case "GH": {
                    return GH;
                }

                case "GI": {
                    return GI;
                }

                case "GL": {
                    return GL;
                }

                case "GM": {
                    return GM;
                }

                case "GN": {
                    return GN;
                }

                case "GP": {
                    return GP;
                }

                case "GQ": {
                    return GQ;
                }

                case "GR": {
                    return GR;
                }

                case "GS": {
                    return GS;
                }

                case "GT": {
                    return GT;
                }

                case "GW": {
                    return GW;
                }

                case "GY": {
                    return GY;
                }

                case "HK": {
                    return HK;
                }

                case "HM": {
                    return HM;
                }

                case "HN": {
                    return HN;
                }

                case "HR": {
                    return HR;
                }

                case "HT": {
                    return HT;
                }

                case "HU": {
                    return HU;
                }

                case "ID": {
                    return ID;
                }

                case "IE": {
                    return IE;
                }

                case "IL": {
                    return IL;
                }

                case "IM": {
                    return IM;
                }

                case "IN": {
                    return IN;
                }

                case "IO": {
                    return IO;
                }

                case "IQ": {
                    return IQ;
                }

                case "IR": {
                    return IR;
                }

                case "IS": {
                    return IS;
                }

                case "IT": {
                    return IT;
                }

                case "JE": {
                    return JE;
                }

                case "JM": {
                    return JM;
                }

                case "JO": {
                    return JO;
                }

                case "JP": {
                    return JP;
                }

                case "KE": {
                    return KE;
                }

                case "KG": {
                    return KG;
                }

                case "KH": {
                    return KH;
                }

                case "KI": {
                    return KI;
                }

                case "KM": {
                    return KM;
                }

                case "KN": {
                    return KN;
                }

                case "KP": {
                    return KP;
                }

                case "KR": {
                    return KR;
                }

                case "KW": {
                    return KW;
                }

                case "KY": {
                    return KY;
                }

                case "KZ": {
                    return KZ;
                }

                case "LA": {
                    return LA;
                }

                case "LB": {
                    return LB;
                }

                case "LC": {
                    return LC;
                }

                case "LI": {
                    return LI;
                }

                case "LK": {
                    return LK;
                }

                case "LR": {
                    return LR;
                }

                case "LS": {
                    return LS;
                }

                case "LT": {
                    return LT;
                }

                case "LU": {
                    return LU;
                }

                case "LV": {
                    return LV;
                }

                case "LY": {
                    return LY;
                }

                case "MA": {
                    return MA;
                }

                case "MC": {
                    return MC;
                }

                case "MD": {
                    return MD;
                }

                case "ME": {
                    return ME;
                }

                case "MF": {
                    return MF;
                }

                case "MG": {
                    return MG;
                }

                case "MK": {
                    return MK;
                }

                case "ML": {
                    return ML;
                }

                case "MM": {
                    return MM;
                }

                case "MN": {
                    return MN;
                }

                case "MO": {
                    return MO;
                }

                case "MQ": {
                    return MQ;
                }

                case "MR": {
                    return MR;
                }

                case "MS": {
                    return MS;
                }

                case "MT": {
                    return MT;
                }

                case "MU": {
                    return MU;
                }

                case "MV": {
                    return MV;
                }

                case "MW": {
                    return MW;
                }

                case "MX": {
                    return MX;
                }

                case "MY": {
                    return MY;
                }

                case "MZ": {
                    return MZ;
                }

                case "NA": {
                    return NA;
                }

                case "NC": {
                    return NC;
                }

                case "NE": {
                    return NE;
                }

                case "NF": {
                    return NF;
                }

                case "NG": {
                    return NG;
                }

                case "NI": {
                    return NI;
                }

                case "NL": {
                    return NL;
                }

                case "NO": {
                    return NO;
                }

                case "NP": {
                    return NP;
                }

                case "NR": {
                    return NR;
                }

                case "NU": {
                    return NU;
                }

                case "NZ": {
                    return NZ;
                }

                case "OM": {
                    return OM;
                }

                case "PA": {
                    return PA;
                }

                case "PE": {
                    return PE;
                }

                case "PF": {
                    return PF;
                }

                case "PG": {
                    return PG;
                }

                case "PH": {
                    return PH;
                }

                case "PK": {
                    return PK;
                }

                case "PL": {
                    return PL;
                }

                case "PM": {
                    return PM;
                }

                case "PN": {
                    return PN;
                }

                case "PS": {
                    return PS;
                }

                case "PT": {
                    return PT;
                }

                case "PY": {
                    return PY;
                }

                case "QA": {
                    return QA;
                }

                case "RE": {
                    return RE;
                }

                case "RO": {
                    return RO;
                }

                case "RS": {
                    return RS;
                }

                case "RU": {
                    return RU;
                }

                case "RW": {
                    return RW;
                }

                case "SA": {
                    return SA;
                }

                case "SB": {
                    return SB;
                }

                case "SC": {
                    return SC;
                }

                case "SD": {
                    return SD;
                }

                case "SE": {
                    return SE;
                }

                case "SG": {
                    return SG;
                }

                case "SH": {
                    return SH;
                }

                case "SI": {
                    return SI;
                }

                case "SJ": {
                    return SJ;
                }

                case "SK": {
                    return SK;
                }

                case "SL": {
                    return SL;
                }

                case "SM": {
                    return SM;
                }

                case "SN": {
                    return SN;
                }

                case "SO": {
                    return SO;
                }

                case "SR": {
                    return SR;
                }

                case "SS": {
                    return SS;
                }

                case "ST": {
                    return ST;
                }

                case "SV": {
                    return SV;
                }

                case "SX": {
                    return SX;
                }

                case "SY": {
                    return SY;
                }

                case "SZ": {
                    return SZ;
                }

                case "TA": {
                    return TA;
                }

                case "TC": {
                    return TC;
                }

                case "TD": {
                    return TD;
                }

                case "TF": {
                    return TF;
                }

                case "TG": {
                    return TG;
                }

                case "TH": {
                    return TH;
                }

                case "TJ": {
                    return TJ;
                }

                case "TK": {
                    return TK;
                }

                case "TL": {
                    return TL;
                }

                case "TM": {
                    return TM;
                }

                case "TN": {
                    return TN;
                }

                case "TO": {
                    return TO;
                }

                case "TR": {
                    return TR;
                }

                case "TT": {
                    return TT;
                }

                case "TV": {
                    return TV;
                }

                case "TW": {
                    return TW;
                }

                case "TZ": {
                    return TZ;
                }

                case "UA": {
                    return UA;
                }

                case "UG": {
                    return UG;
                }

                case "UM": {
                    return UM;
                }

                case "US": {
                    return US;
                }

                case "UY": {
                    return UY;
                }

                case "UZ": {
                    return UZ;
                }

                case "VA": {
                    return VA;
                }

                case "VC": {
                    return VC;
                }

                case "VE": {
                    return VE;
                }

                case "VG": {
                    return VG;
                }

                case "VN": {
                    return VN;
                }

                case "VU": {
                    return VU;
                }

                case "WF": {
                    return WF;
                }

                case "WS": {
                    return WS;
                }

                case "XK": {
                    return XK;
                }

                case "YE": {
                    return YE;
                }

                case "YT": {
                    return YT;
                }

                case "ZA": {
                    return ZA;
                }

                case "ZM": {
                    return ZM;
                }

                case "ZW": {
                    return ZW;
                }

                case "ZZ": {
                    return ZZ;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case AC: {
                    return "AC";
                }

                case AD: {
                    return "AD";
                }

                case AE: {
                    return "AE";
                }

                case AF: {
                    return "AF";
                }

                case AG: {
                    return "AG";
                }

                case AI: {
                    return "AI";
                }

                case AL: {
                    return "AL";
                }

                case AM: {
                    return "AM";
                }

                case AN: {
                    return "AN";
                }

                case AO: {
                    return "AO";
                }

                case AR: {
                    return "AR";
                }

                case AT: {
                    return "AT";
                }

                case AU: {
                    return "AU";
                }

                case AW: {
                    return "AW";
                }

                case AX: {
                    return "AX";
                }

                case AZ: {
                    return "AZ";
                }

                case BA: {
                    return "BA";
                }

                case BB: {
                    return "BB";
                }

                case BD: {
                    return "BD";
                }

                case BE: {
                    return "BE";
                }

                case BF: {
                    return "BF";
                }

                case BG: {
                    return "BG";
                }

                case BH: {
                    return "BH";
                }

                case BI: {
                    return "BI";
                }

                case BJ: {
                    return "BJ";
                }

                case BL: {
                    return "BL";
                }

                case BM: {
                    return "BM";
                }

                case BN: {
                    return "BN";
                }

                case BO: {
                    return "BO";
                }

                case BQ: {
                    return "BQ";
                }

                case BR: {
                    return "BR";
                }

                case BS: {
                    return "BS";
                }

                case BT: {
                    return "BT";
                }

                case BV: {
                    return "BV";
                }

                case BW: {
                    return "BW";
                }

                case BY: {
                    return "BY";
                }

                case BZ: {
                    return "BZ";
                }

                case CA: {
                    return "CA";
                }

                case CC: {
                    return "CC";
                }

                case CD: {
                    return "CD";
                }

                case CF: {
                    return "CF";
                }

                case CG: {
                    return "CG";
                }

                case CH: {
                    return "CH";
                }

                case CI: {
                    return "CI";
                }

                case CK: {
                    return "CK";
                }

                case CL: {
                    return "CL";
                }

                case CM: {
                    return "CM";
                }

                case CN: {
                    return "CN";
                }

                case CO: {
                    return "CO";
                }

                case CR: {
                    return "CR";
                }

                case CU: {
                    return "CU";
                }

                case CV: {
                    return "CV";
                }

                case CW: {
                    return "CW";
                }

                case CX: {
                    return "CX";
                }

                case CY: {
                    return "CY";
                }

                case CZ: {
                    return "CZ";
                }

                case DE: {
                    return "DE";
                }

                case DJ: {
                    return "DJ";
                }

                case DK: {
                    return "DK";
                }

                case DM: {
                    return "DM";
                }

                case DO: {
                    return "DO";
                }

                case DZ: {
                    return "DZ";
                }

                case EC: {
                    return "EC";
                }

                case EE: {
                    return "EE";
                }

                case EG: {
                    return "EG";
                }

                case EH: {
                    return "EH";
                }

                case ER: {
                    return "ER";
                }

                case ES: {
                    return "ES";
                }

                case ET: {
                    return "ET";
                }

                case FI: {
                    return "FI";
                }

                case FJ: {
                    return "FJ";
                }

                case FK: {
                    return "FK";
                }

                case FO: {
                    return "FO";
                }

                case FR: {
                    return "FR";
                }

                case GA: {
                    return "GA";
                }

                case GB: {
                    return "GB";
                }

                case GD: {
                    return "GD";
                }

                case GE: {
                    return "GE";
                }

                case GF: {
                    return "GF";
                }

                case GG: {
                    return "GG";
                }

                case GH: {
                    return "GH";
                }

                case GI: {
                    return "GI";
                }

                case GL: {
                    return "GL";
                }

                case GM: {
                    return "GM";
                }

                case GN: {
                    return "GN";
                }

                case GP: {
                    return "GP";
                }

                case GQ: {
                    return "GQ";
                }

                case GR: {
                    return "GR";
                }

                case GS: {
                    return "GS";
                }

                case GT: {
                    return "GT";
                }

                case GW: {
                    return "GW";
                }

                case GY: {
                    return "GY";
                }

                case HK: {
                    return "HK";
                }

                case HM: {
                    return "HM";
                }

                case HN: {
                    return "HN";
                }

                case HR: {
                    return "HR";
                }

                case HT: {
                    return "HT";
                }

                case HU: {
                    return "HU";
                }

                case ID: {
                    return "ID";
                }

                case IE: {
                    return "IE";
                }

                case IL: {
                    return "IL";
                }

                case IM: {
                    return "IM";
                }

                case IN: {
                    return "IN";
                }

                case IO: {
                    return "IO";
                }

                case IQ: {
                    return "IQ";
                }

                case IR: {
                    return "IR";
                }

                case IS: {
                    return "IS";
                }

                case IT: {
                    return "IT";
                }

                case JE: {
                    return "JE";
                }

                case JM: {
                    return "JM";
                }

                case JO: {
                    return "JO";
                }

                case JP: {
                    return "JP";
                }

                case KE: {
                    return "KE";
                }

                case KG: {
                    return "KG";
                }

                case KH: {
                    return "KH";
                }

                case KI: {
                    return "KI";
                }

                case KM: {
                    return "KM";
                }

                case KN: {
                    return "KN";
                }

                case KP: {
                    return "KP";
                }

                case KR: {
                    return "KR";
                }

                case KW: {
                    return "KW";
                }

                case KY: {
                    return "KY";
                }

                case KZ: {
                    return "KZ";
                }

                case LA: {
                    return "LA";
                }

                case LB: {
                    return "LB";
                }

                case LC: {
                    return "LC";
                }

                case LI: {
                    return "LI";
                }

                case LK: {
                    return "LK";
                }

                case LR: {
                    return "LR";
                }

                case LS: {
                    return "LS";
                }

                case LT: {
                    return "LT";
                }

                case LU: {
                    return "LU";
                }

                case LV: {
                    return "LV";
                }

                case LY: {
                    return "LY";
                }

                case MA: {
                    return "MA";
                }

                case MC: {
                    return "MC";
                }

                case MD: {
                    return "MD";
                }

                case ME: {
                    return "ME";
                }

                case MF: {
                    return "MF";
                }

                case MG: {
                    return "MG";
                }

                case MK: {
                    return "MK";
                }

                case ML: {
                    return "ML";
                }

                case MM: {
                    return "MM";
                }

                case MN: {
                    return "MN";
                }

                case MO: {
                    return "MO";
                }

                case MQ: {
                    return "MQ";
                }

                case MR: {
                    return "MR";
                }

                case MS: {
                    return "MS";
                }

                case MT: {
                    return "MT";
                }

                case MU: {
                    return "MU";
                }

                case MV: {
                    return "MV";
                }

                case MW: {
                    return "MW";
                }

                case MX: {
                    return "MX";
                }

                case MY: {
                    return "MY";
                }

                case MZ: {
                    return "MZ";
                }

                case NA: {
                    return "NA";
                }

                case NC: {
                    return "NC";
                }

                case NE: {
                    return "NE";
                }

                case NF: {
                    return "NF";
                }

                case NG: {
                    return "NG";
                }

                case NI: {
                    return "NI";
                }

                case NL: {
                    return "NL";
                }

                case NO: {
                    return "NO";
                }

                case NP: {
                    return "NP";
                }

                case NR: {
                    return "NR";
                }

                case NU: {
                    return "NU";
                }

                case NZ: {
                    return "NZ";
                }

                case OM: {
                    return "OM";
                }

                case PA: {
                    return "PA";
                }

                case PE: {
                    return "PE";
                }

                case PF: {
                    return "PF";
                }

                case PG: {
                    return "PG";
                }

                case PH: {
                    return "PH";
                }

                case PK: {
                    return "PK";
                }

                case PL: {
                    return "PL";
                }

                case PM: {
                    return "PM";
                }

                case PN: {
                    return "PN";
                }

                case PS: {
                    return "PS";
                }

                case PT: {
                    return "PT";
                }

                case PY: {
                    return "PY";
                }

                case QA: {
                    return "QA";
                }

                case RE: {
                    return "RE";
                }

                case RO: {
                    return "RO";
                }

                case RS: {
                    return "RS";
                }

                case RU: {
                    return "RU";
                }

                case RW: {
                    return "RW";
                }

                case SA: {
                    return "SA";
                }

                case SB: {
                    return "SB";
                }

                case SC: {
                    return "SC";
                }

                case SD: {
                    return "SD";
                }

                case SE: {
                    return "SE";
                }

                case SG: {
                    return "SG";
                }

                case SH: {
                    return "SH";
                }

                case SI: {
                    return "SI";
                }

                case SJ: {
                    return "SJ";
                }

                case SK: {
                    return "SK";
                }

                case SL: {
                    return "SL";
                }

                case SM: {
                    return "SM";
                }

                case SN: {
                    return "SN";
                }

                case SO: {
                    return "SO";
                }

                case SR: {
                    return "SR";
                }

                case SS: {
                    return "SS";
                }

                case ST: {
                    return "ST";
                }

                case SV: {
                    return "SV";
                }

                case SX: {
                    return "SX";
                }

                case SY: {
                    return "SY";
                }

                case SZ: {
                    return "SZ";
                }

                case TA: {
                    return "TA";
                }

                case TC: {
                    return "TC";
                }

                case TD: {
                    return "TD";
                }

                case TF: {
                    return "TF";
                }

                case TG: {
                    return "TG";
                }

                case TH: {
                    return "TH";
                }

                case TJ: {
                    return "TJ";
                }

                case TK: {
                    return "TK";
                }

                case TL: {
                    return "TL";
                }

                case TM: {
                    return "TM";
                }

                case TN: {
                    return "TN";
                }

                case TO: {
                    return "TO";
                }

                case TR: {
                    return "TR";
                }

                case TT: {
                    return "TT";
                }

                case TV: {
                    return "TV";
                }

                case TW: {
                    return "TW";
                }

                case TZ: {
                    return "TZ";
                }

                case UA: {
                    return "UA";
                }

                case UG: {
                    return "UG";
                }

                case UM: {
                    return "UM";
                }

                case US: {
                    return "US";
                }

                case UY: {
                    return "UY";
                }

                case UZ: {
                    return "UZ";
                }

                case VA: {
                    return "VA";
                }

                case VC: {
                    return "VC";
                }

                case VE: {
                    return "VE";
                }

                case VG: {
                    return "VG";
                }

                case VN: {
                    return "VN";
                }

                case VU: {
                    return "VU";
                }

                case WF: {
                    return "WF";
                }

                case WS: {
                    return "WS";
                }

                case XK: {
                    return "XK";
                }

                case YE: {
                    return "YE";
                }

                case YT: {
                    return "YT";
                }

                case ZA: {
                    return "ZA";
                }

                case ZM: {
                    return "ZM";
                }

                case ZW: {
                    return "ZW";
                }

                case ZZ: {
                    return "ZZ";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * The part of the image that should remain after cropping.
    */
    public enum CropRegion {
        /**
        * Keep the bottom of the image.
        */
        BOTTOM,

        /**
        * Keep the center of the image.
        */
        CENTER,

        /**
        * Keep the left of the image.
        */
        LEFT,

        /**
        * Keep the right of the image.
        */
        RIGHT,

        /**
        * Keep the top of the image.
        */
        TOP,

        UNKNOWN_VALUE;

        public static CropRegion fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "BOTTOM": {
                    return BOTTOM;
                }

                case "CENTER": {
                    return CENTER;
                }

                case "LEFT": {
                    return LEFT;
                }

                case "RIGHT": {
                    return RIGHT;
                }

                case "TOP": {
                    return TOP;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case BOTTOM: {
                    return "BOTTOM";
                }

                case CENTER: {
                    return "CENTER";
                }

                case LEFT: {
                    return "LEFT";
                }

                case RIGHT: {
                    return "RIGHT";
                }

                case TOP: {
                    return "TOP";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface CurrencyQueryDefinition {
        void define(CurrencyQuery _queryBuilder);
    }

    /**
    * A currency.
    */
    public static class CurrencyQuery extends Query<CurrencyQuery> {
        CurrencyQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The ISO code of the currency.
        */
        public CurrencyQuery isoCode() {
            startField("isoCode");

            return this;
        }

        /**
        * The name of the currency.
        */
        public CurrencyQuery name() {
            startField("name");

            return this;
        }

        /**
        * The symbol of the currency.
        */
        public CurrencyQuery symbol() {
            startField("symbol");

            return this;
        }
    }

    /**
    * A currency.
    */
    public static class Currency extends AbstractResponse<Currency> {
        public Currency() {
        }

        public Currency(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "isoCode": {
                        responseData.put(key, CurrencyCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "symbol": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Currency";
        }

        /**
        * The ISO code of the currency.
        */

        public CurrencyCode getIsoCode() {
            return (CurrencyCode) get("isoCode");
        }

        public Currency setIsoCode(CurrencyCode arg) {
            optimisticData.put(getKey("isoCode"), arg);
            return this;
        }

        /**
        * The name of the currency.
        */

        public String getName() {
            return (String) get("name");
        }

        public Currency setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The symbol of the currency.
        */

        public String getSymbol() {
            return (String) get("symbol");
        }

        public Currency setSymbol(String arg) {
            optimisticData.put(getKey("symbol"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "isoCode": return false;

                case "name": return false;

                case "symbol": return false;

                default: return false;
            }
        }
    }

    /**
    * The three-letter currency codes that represent the world currencies used in
    * stores. These include standard ISO 4217 codes, legacy codes,
    * and non-standard codes.
    */
    public enum CurrencyCode {
        /**
        * United Arab Emirates Dirham (AED).
        */
        AED,

        /**
        * Afghan Afghani (AFN).
        */
        AFN,

        /**
        * Albanian Lek (ALL).
        */
        ALL,

        /**
        * Armenian Dram (AMD).
        */
        AMD,

        /**
        * Netherlands Antillean Guilder.
        */
        ANG,

        /**
        * Angolan Kwanza (AOA).
        */
        AOA,

        /**
        * Argentine Pesos (ARS).
        */
        ARS,

        /**
        * Australian Dollars (AUD).
        */
        AUD,

        /**
        * Aruban Florin (AWG).
        */
        AWG,

        /**
        * Azerbaijani Manat (AZN).
        */
        AZN,

        /**
        * Bosnia and Herzegovina Convertible Mark (BAM).
        */
        BAM,

        /**
        * Barbadian Dollar (BBD).
        */
        BBD,

        /**
        * Bangladesh Taka (BDT).
        */
        BDT,

        /**
        * Bulgarian Lev (BGN).
        */
        BGN,

        /**
        * Bahraini Dinar (BHD).
        */
        BHD,

        /**
        * Burundian Franc (BIF).
        */
        BIF,

        /**
        * Bermudian Dollar (BMD).
        */
        BMD,

        /**
        * Brunei Dollar (BND).
        */
        BND,

        /**
        * Bolivian Boliviano (BOB).
        */
        BOB,

        /**
        * Brazilian Real (BRL).
        */
        BRL,

        /**
        * Bahamian Dollar (BSD).
        */
        BSD,

        /**
        * Bhutanese Ngultrum (BTN).
        */
        BTN,

        /**
        * Botswana Pula (BWP).
        */
        BWP,

        /**
        * Belarusian Ruble (BYN).
        */
        BYN,

        /**
        * Belarusian Ruble (BYR).
        *
        * @deprecated `BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.
        */
        @Deprecated
        BYR,

        /**
        * Belize Dollar (BZD).
        */
        BZD,

        /**
        * Canadian Dollars (CAD).
        */
        CAD,

        /**
        * Congolese franc (CDF).
        */
        CDF,

        /**
        * Swiss Francs (CHF).
        */
        CHF,

        /**
        * Chilean Peso (CLP).
        */
        CLP,

        /**
        * Chinese Yuan Renminbi (CNY).
        */
        CNY,

        /**
        * Colombian Peso (COP).
        */
        COP,

        /**
        * Costa Rican Colones (CRC).
        */
        CRC,

        /**
        * Cape Verdean escudo (CVE).
        */
        CVE,

        /**
        * Czech Koruny (CZK).
        */
        CZK,

        /**
        * Djiboutian Franc (DJF).
        */
        DJF,

        /**
        * Danish Kroner (DKK).
        */
        DKK,

        /**
        * Dominican Peso (DOP).
        */
        DOP,

        /**
        * Algerian Dinar (DZD).
        */
        DZD,

        /**
        * Egyptian Pound (EGP).
        */
        EGP,

        /**
        * Eritrean Nakfa (ERN).
        */
        ERN,

        /**
        * Ethiopian Birr (ETB).
        */
        ETB,

        /**
        * Euro (EUR).
        */
        EUR,

        /**
        * Fijian Dollars (FJD).
        */
        FJD,

        /**
        * Falkland Islands Pounds (FKP).
        */
        FKP,

        /**
        * United Kingdom Pounds (GBP).
        */
        GBP,

        /**
        * Georgian Lari (GEL).
        */
        GEL,

        /**
        * Ghanaian Cedi (GHS).
        */
        GHS,

        /**
        * Gibraltar Pounds (GIP).
        */
        GIP,

        /**
        * Gambian Dalasi (GMD).
        */
        GMD,

        /**
        * Guinean Franc (GNF).
        */
        GNF,

        /**
        * Guatemalan Quetzal (GTQ).
        */
        GTQ,

        /**
        * Guyanese Dollar (GYD).
        */
        GYD,

        /**
        * Hong Kong Dollars (HKD).
        */
        HKD,

        /**
        * Honduran Lempira (HNL).
        */
        HNL,

        /**
        * Croatian Kuna (HRK).
        */
        HRK,

        /**
        * Haitian Gourde (HTG).
        */
        HTG,

        /**
        * Hungarian Forint (HUF).
        */
        HUF,

        /**
        * Indonesian Rupiah (IDR).
        */
        IDR,

        /**
        * Israeli New Shekel (NIS).
        */
        ILS,

        /**
        * Indian Rupees (INR).
        */
        INR,

        /**
        * Iraqi Dinar (IQD).
        */
        IQD,

        /**
        * Iranian Rial (IRR).
        */
        IRR,

        /**
        * Icelandic Kronur (ISK).
        */
        ISK,

        /**
        * Jersey Pound.
        */
        JEP,

        /**
        * Jamaican Dollars (JMD).
        */
        JMD,

        /**
        * Jordanian Dinar (JOD).
        */
        JOD,

        /**
        * Japanese Yen (JPY).
        */
        JPY,

        /**
        * Kenyan Shilling (KES).
        */
        KES,

        /**
        * Kyrgyzstani Som (KGS).
        */
        KGS,

        /**
        * Cambodian Riel.
        */
        KHR,

        /**
        * Kiribati Dollar (KID).
        */
        KID,

        /**
        * Comorian Franc (KMF).
        */
        KMF,

        /**
        * South Korean Won (KRW).
        */
        KRW,

        /**
        * Kuwaiti Dinar (KWD).
        */
        KWD,

        /**
        * Cayman Dollars (KYD).
        */
        KYD,

        /**
        * Kazakhstani Tenge (KZT).
        */
        KZT,

        /**
        * Laotian Kip (LAK).
        */
        LAK,

        /**
        * Lebanese Pounds (LBP).
        */
        LBP,

        /**
        * Sri Lankan Rupees (LKR).
        */
        LKR,

        /**
        * Liberian Dollar (LRD).
        */
        LRD,

        /**
        * Lesotho Loti (LSL).
        */
        LSL,

        /**
        * Lithuanian Litai (LTL).
        */
        LTL,

        /**
        * Latvian Lati (LVL).
        */
        LVL,

        /**
        * Libyan Dinar (LYD).
        */
        LYD,

        /**
        * Moroccan Dirham.
        */
        MAD,

        /**
        * Moldovan Leu (MDL).
        */
        MDL,

        /**
        * Malagasy Ariary (MGA).
        */
        MGA,

        /**
        * Macedonia Denar (MKD).
        */
        MKD,

        /**
        * Burmese Kyat (MMK).
        */
        MMK,

        /**
        * Mongolian Tugrik.
        */
        MNT,

        /**
        * Macanese Pataca (MOP).
        */
        MOP,

        /**
        * Mauritanian Ouguiya (MRU).
        */
        MRU,

        /**
        * Mauritian Rupee (MUR).
        */
        MUR,

        /**
        * Maldivian Rufiyaa (MVR).
        */
        MVR,

        /**
        * Malawian Kwacha (MWK).
        */
        MWK,

        /**
        * Mexican Pesos (MXN).
        */
        MXN,

        /**
        * Malaysian Ringgits (MYR).
        */
        MYR,

        /**
        * Mozambican Metical.
        */
        MZN,

        /**
        * Namibian Dollar.
        */
        NAD,

        /**
        * Nigerian Naira (NGN).
        */
        NGN,

        /**
        * Nicaraguan Córdoba (NIO).
        */
        NIO,

        /**
        * Norwegian Kroner (NOK).
        */
        NOK,

        /**
        * Nepalese Rupee (NPR).
        */
        NPR,

        /**
        * New Zealand Dollars (NZD).
        */
        NZD,

        /**
        * Omani Rial (OMR).
        */
        OMR,

        /**
        * Panamian Balboa (PAB).
        */
        PAB,

        /**
        * Peruvian Nuevo Sol (PEN).
        */
        PEN,

        /**
        * Papua New Guinean Kina (PGK).
        */
        PGK,

        /**
        * Philippine Peso (PHP).
        */
        PHP,

        /**
        * Pakistani Rupee (PKR).
        */
        PKR,

        /**
        * Polish Zlotych (PLN).
        */
        PLN,

        /**
        * Paraguayan Guarani (PYG).
        */
        PYG,

        /**
        * Qatari Rial (QAR).
        */
        QAR,

        /**
        * Romanian Lei (RON).
        */
        RON,

        /**
        * Serbian dinar (RSD).
        */
        RSD,

        /**
        * Russian Rubles (RUB).
        */
        RUB,

        /**
        * Rwandan Franc (RWF).
        */
        RWF,

        /**
        * Saudi Riyal (SAR).
        */
        SAR,

        /**
        * Solomon Islands Dollar (SBD).
        */
        SBD,

        /**
        * Seychellois Rupee (SCR).
        */
        SCR,

        /**
        * Sudanese Pound (SDG).
        */
        SDG,

        /**
        * Swedish Kronor (SEK).
        */
        SEK,

        /**
        * Singapore Dollars (SGD).
        */
        SGD,

        /**
        * Saint Helena Pounds (SHP).
        */
        SHP,

        /**
        * Sierra Leonean Leone (SLL).
        */
        SLL,

        /**
        * Somali Shilling (SOS).
        */
        SOS,

        /**
        * Surinamese Dollar (SRD).
        */
        SRD,

        /**
        * South Sudanese Pound (SSP).
        */
        SSP,

        /**
        * Sao Tome And Principe Dobra (STD).
        *
        * @deprecated `STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.
        */
        @Deprecated
        STD,

        /**
        * Sao Tome And Principe Dobra (STN).
        */
        STN,

        /**
        * Syrian Pound (SYP).
        */
        SYP,

        /**
        * Swazi Lilangeni (SZL).
        */
        SZL,

        /**
        * Thai baht (THB).
        */
        THB,

        /**
        * Tajikistani Somoni (TJS).
        */
        TJS,

        /**
        * Turkmenistani Manat (TMT).
        */
        TMT,

        /**
        * Tunisian Dinar (TND).
        */
        TND,

        /**
        * Tongan Pa'anga (TOP).
        */
        TOP,

        /**
        * Turkish Lira (TRY).
        */
        TRY,

        /**
        * Trinidad and Tobago Dollars (TTD).
        */
        TTD,

        /**
        * Taiwan Dollars (TWD).
        */
        TWD,

        /**
        * Tanzanian Shilling (TZS).
        */
        TZS,

        /**
        * Ukrainian Hryvnia (UAH).
        */
        UAH,

        /**
        * Ugandan Shilling (UGX).
        */
        UGX,

        /**
        * United States Dollars (USD).
        */
        USD,

        /**
        * Uruguayan Pesos (UYU).
        */
        UYU,

        /**
        * Uzbekistan som (UZS).
        */
        UZS,

        /**
        * Venezuelan Bolivares (VED).
        */
        VED,

        /**
        * Venezuelan Bolivares (VEF).
        *
        * @deprecated `VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.
        */
        @Deprecated
        VEF,

        /**
        * Venezuelan Bolivares Soberanos (VES).
        */
        VES,

        /**
        * Vietnamese đồng (VND).
        */
        VND,

        /**
        * Vanuatu Vatu (VUV).
        */
        VUV,

        /**
        * Samoan Tala (WST).
        */
        WST,

        /**
        * Central African CFA Franc (XAF).
        */
        XAF,

        /**
        * East Caribbean Dollar (XCD).
        */
        XCD,

        /**
        * West African CFA franc (XOF).
        */
        XOF,

        /**
        * CFP Franc (XPF).
        */
        XPF,

        /**
        * Unrecognized currency.
        */
        XXX,

        /**
        * Yemeni Rial (YER).
        */
        YER,

        /**
        * South African Rand (ZAR).
        */
        ZAR,

        /**
        * Zambian Kwacha (ZMW).
        */
        ZMW,

        UNKNOWN_VALUE;

        public static CurrencyCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "AED": {
                    return AED;
                }

                case "AFN": {
                    return AFN;
                }

                case "ALL": {
                    return ALL;
                }

                case "AMD": {
                    return AMD;
                }

                case "ANG": {
                    return ANG;
                }

                case "AOA": {
                    return AOA;
                }

                case "ARS": {
                    return ARS;
                }

                case "AUD": {
                    return AUD;
                }

                case "AWG": {
                    return AWG;
                }

                case "AZN": {
                    return AZN;
                }

                case "BAM": {
                    return BAM;
                }

                case "BBD": {
                    return BBD;
                }

                case "BDT": {
                    return BDT;
                }

                case "BGN": {
                    return BGN;
                }

                case "BHD": {
                    return BHD;
                }

                case "BIF": {
                    return BIF;
                }

                case "BMD": {
                    return BMD;
                }

                case "BND": {
                    return BND;
                }

                case "BOB": {
                    return BOB;
                }

                case "BRL": {
                    return BRL;
                }

                case "BSD": {
                    return BSD;
                }

                case "BTN": {
                    return BTN;
                }

                case "BWP": {
                    return BWP;
                }

                case "BYN": {
                    return BYN;
                }

                case "BZD": {
                    return BZD;
                }

                case "CAD": {
                    return CAD;
                }

                case "CDF": {
                    return CDF;
                }

                case "CHF": {
                    return CHF;
                }

                case "CLP": {
                    return CLP;
                }

                case "CNY": {
                    return CNY;
                }

                case "COP": {
                    return COP;
                }

                case "CRC": {
                    return CRC;
                }

                case "CVE": {
                    return CVE;
                }

                case "CZK": {
                    return CZK;
                }

                case "DJF": {
                    return DJF;
                }

                case "DKK": {
                    return DKK;
                }

                case "DOP": {
                    return DOP;
                }

                case "DZD": {
                    return DZD;
                }

                case "EGP": {
                    return EGP;
                }

                case "ERN": {
                    return ERN;
                }

                case "ETB": {
                    return ETB;
                }

                case "EUR": {
                    return EUR;
                }

                case "FJD": {
                    return FJD;
                }

                case "FKP": {
                    return FKP;
                }

                case "GBP": {
                    return GBP;
                }

                case "GEL": {
                    return GEL;
                }

                case "GHS": {
                    return GHS;
                }

                case "GIP": {
                    return GIP;
                }

                case "GMD": {
                    return GMD;
                }

                case "GNF": {
                    return GNF;
                }

                case "GTQ": {
                    return GTQ;
                }

                case "GYD": {
                    return GYD;
                }

                case "HKD": {
                    return HKD;
                }

                case "HNL": {
                    return HNL;
                }

                case "HRK": {
                    return HRK;
                }

                case "HTG": {
                    return HTG;
                }

                case "HUF": {
                    return HUF;
                }

                case "IDR": {
                    return IDR;
                }

                case "ILS": {
                    return ILS;
                }

                case "INR": {
                    return INR;
                }

                case "IQD": {
                    return IQD;
                }

                case "IRR": {
                    return IRR;
                }

                case "ISK": {
                    return ISK;
                }

                case "JEP": {
                    return JEP;
                }

                case "JMD": {
                    return JMD;
                }

                case "JOD": {
                    return JOD;
                }

                case "JPY": {
                    return JPY;
                }

                case "KES": {
                    return KES;
                }

                case "KGS": {
                    return KGS;
                }

                case "KHR": {
                    return KHR;
                }

                case "KID": {
                    return KID;
                }

                case "KMF": {
                    return KMF;
                }

                case "KRW": {
                    return KRW;
                }

                case "KWD": {
                    return KWD;
                }

                case "KYD": {
                    return KYD;
                }

                case "KZT": {
                    return KZT;
                }

                case "LAK": {
                    return LAK;
                }

                case "LBP": {
                    return LBP;
                }

                case "LKR": {
                    return LKR;
                }

                case "LRD": {
                    return LRD;
                }

                case "LSL": {
                    return LSL;
                }

                case "LTL": {
                    return LTL;
                }

                case "LVL": {
                    return LVL;
                }

                case "LYD": {
                    return LYD;
                }

                case "MAD": {
                    return MAD;
                }

                case "MDL": {
                    return MDL;
                }

                case "MGA": {
                    return MGA;
                }

                case "MKD": {
                    return MKD;
                }

                case "MMK": {
                    return MMK;
                }

                case "MNT": {
                    return MNT;
                }

                case "MOP": {
                    return MOP;
                }

                case "MRU": {
                    return MRU;
                }

                case "MUR": {
                    return MUR;
                }

                case "MVR": {
                    return MVR;
                }

                case "MWK": {
                    return MWK;
                }

                case "MXN": {
                    return MXN;
                }

                case "MYR": {
                    return MYR;
                }

                case "MZN": {
                    return MZN;
                }

                case "NAD": {
                    return NAD;
                }

                case "NGN": {
                    return NGN;
                }

                case "NIO": {
                    return NIO;
                }

                case "NOK": {
                    return NOK;
                }

                case "NPR": {
                    return NPR;
                }

                case "NZD": {
                    return NZD;
                }

                case "OMR": {
                    return OMR;
                }

                case "PAB": {
                    return PAB;
                }

                case "PEN": {
                    return PEN;
                }

                case "PGK": {
                    return PGK;
                }

                case "PHP": {
                    return PHP;
                }

                case "PKR": {
                    return PKR;
                }

                case "PLN": {
                    return PLN;
                }

                case "PYG": {
                    return PYG;
                }

                case "QAR": {
                    return QAR;
                }

                case "RON": {
                    return RON;
                }

                case "RSD": {
                    return RSD;
                }

                case "RUB": {
                    return RUB;
                }

                case "RWF": {
                    return RWF;
                }

                case "SAR": {
                    return SAR;
                }

                case "SBD": {
                    return SBD;
                }

                case "SCR": {
                    return SCR;
                }

                case "SDG": {
                    return SDG;
                }

                case "SEK": {
                    return SEK;
                }

                case "SGD": {
                    return SGD;
                }

                case "SHP": {
                    return SHP;
                }

                case "SLL": {
                    return SLL;
                }

                case "SOS": {
                    return SOS;
                }

                case "SRD": {
                    return SRD;
                }

                case "SSP": {
                    return SSP;
                }

                case "STN": {
                    return STN;
                }

                case "SYP": {
                    return SYP;
                }

                case "SZL": {
                    return SZL;
                }

                case "THB": {
                    return THB;
                }

                case "TJS": {
                    return TJS;
                }

                case "TMT": {
                    return TMT;
                }

                case "TND": {
                    return TND;
                }

                case "TOP": {
                    return TOP;
                }

                case "TRY": {
                    return TRY;
                }

                case "TTD": {
                    return TTD;
                }

                case "TWD": {
                    return TWD;
                }

                case "TZS": {
                    return TZS;
                }

                case "UAH": {
                    return UAH;
                }

                case "UGX": {
                    return UGX;
                }

                case "USD": {
                    return USD;
                }

                case "UYU": {
                    return UYU;
                }

                case "UZS": {
                    return UZS;
                }

                case "VED": {
                    return VED;
                }

                case "VES": {
                    return VES;
                }

                case "VND": {
                    return VND;
                }

                case "VUV": {
                    return VUV;
                }

                case "WST": {
                    return WST;
                }

                case "XAF": {
                    return XAF;
                }

                case "XCD": {
                    return XCD;
                }

                case "XOF": {
                    return XOF;
                }

                case "XPF": {
                    return XPF;
                }

                case "XXX": {
                    return XXX;
                }

                case "YER": {
                    return YER;
                }

                case "ZAR": {
                    return ZAR;
                }

                case "ZMW": {
                    return ZMW;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case AED: {
                    return "AED";
                }

                case AFN: {
                    return "AFN";
                }

                case ALL: {
                    return "ALL";
                }

                case AMD: {
                    return "AMD";
                }

                case ANG: {
                    return "ANG";
                }

                case AOA: {
                    return "AOA";
                }

                case ARS: {
                    return "ARS";
                }

                case AUD: {
                    return "AUD";
                }

                case AWG: {
                    return "AWG";
                }

                case AZN: {
                    return "AZN";
                }

                case BAM: {
                    return "BAM";
                }

                case BBD: {
                    return "BBD";
                }

                case BDT: {
                    return "BDT";
                }

                case BGN: {
                    return "BGN";
                }

                case BHD: {
                    return "BHD";
                }

                case BIF: {
                    return "BIF";
                }

                case BMD: {
                    return "BMD";
                }

                case BND: {
                    return "BND";
                }

                case BOB: {
                    return "BOB";
                }

                case BRL: {
                    return "BRL";
                }

                case BSD: {
                    return "BSD";
                }

                case BTN: {
                    return "BTN";
                }

                case BWP: {
                    return "BWP";
                }

                case BYN: {
                    return "BYN";
                }

                case BZD: {
                    return "BZD";
                }

                case CAD: {
                    return "CAD";
                }

                case CDF: {
                    return "CDF";
                }

                case CHF: {
                    return "CHF";
                }

                case CLP: {
                    return "CLP";
                }

                case CNY: {
                    return "CNY";
                }

                case COP: {
                    return "COP";
                }

                case CRC: {
                    return "CRC";
                }

                case CVE: {
                    return "CVE";
                }

                case CZK: {
                    return "CZK";
                }

                case DJF: {
                    return "DJF";
                }

                case DKK: {
                    return "DKK";
                }

                case DOP: {
                    return "DOP";
                }

                case DZD: {
                    return "DZD";
                }

                case EGP: {
                    return "EGP";
                }

                case ERN: {
                    return "ERN";
                }

                case ETB: {
                    return "ETB";
                }

                case EUR: {
                    return "EUR";
                }

                case FJD: {
                    return "FJD";
                }

                case FKP: {
                    return "FKP";
                }

                case GBP: {
                    return "GBP";
                }

                case GEL: {
                    return "GEL";
                }

                case GHS: {
                    return "GHS";
                }

                case GIP: {
                    return "GIP";
                }

                case GMD: {
                    return "GMD";
                }

                case GNF: {
                    return "GNF";
                }

                case GTQ: {
                    return "GTQ";
                }

                case GYD: {
                    return "GYD";
                }

                case HKD: {
                    return "HKD";
                }

                case HNL: {
                    return "HNL";
                }

                case HRK: {
                    return "HRK";
                }

                case HTG: {
                    return "HTG";
                }

                case HUF: {
                    return "HUF";
                }

                case IDR: {
                    return "IDR";
                }

                case ILS: {
                    return "ILS";
                }

                case INR: {
                    return "INR";
                }

                case IQD: {
                    return "IQD";
                }

                case IRR: {
                    return "IRR";
                }

                case ISK: {
                    return "ISK";
                }

                case JEP: {
                    return "JEP";
                }

                case JMD: {
                    return "JMD";
                }

                case JOD: {
                    return "JOD";
                }

                case JPY: {
                    return "JPY";
                }

                case KES: {
                    return "KES";
                }

                case KGS: {
                    return "KGS";
                }

                case KHR: {
                    return "KHR";
                }

                case KID: {
                    return "KID";
                }

                case KMF: {
                    return "KMF";
                }

                case KRW: {
                    return "KRW";
                }

                case KWD: {
                    return "KWD";
                }

                case KYD: {
                    return "KYD";
                }

                case KZT: {
                    return "KZT";
                }

                case LAK: {
                    return "LAK";
                }

                case LBP: {
                    return "LBP";
                }

                case LKR: {
                    return "LKR";
                }

                case LRD: {
                    return "LRD";
                }

                case LSL: {
                    return "LSL";
                }

                case LTL: {
                    return "LTL";
                }

                case LVL: {
                    return "LVL";
                }

                case LYD: {
                    return "LYD";
                }

                case MAD: {
                    return "MAD";
                }

                case MDL: {
                    return "MDL";
                }

                case MGA: {
                    return "MGA";
                }

                case MKD: {
                    return "MKD";
                }

                case MMK: {
                    return "MMK";
                }

                case MNT: {
                    return "MNT";
                }

                case MOP: {
                    return "MOP";
                }

                case MRU: {
                    return "MRU";
                }

                case MUR: {
                    return "MUR";
                }

                case MVR: {
                    return "MVR";
                }

                case MWK: {
                    return "MWK";
                }

                case MXN: {
                    return "MXN";
                }

                case MYR: {
                    return "MYR";
                }

                case MZN: {
                    return "MZN";
                }

                case NAD: {
                    return "NAD";
                }

                case NGN: {
                    return "NGN";
                }

                case NIO: {
                    return "NIO";
                }

                case NOK: {
                    return "NOK";
                }

                case NPR: {
                    return "NPR";
                }

                case NZD: {
                    return "NZD";
                }

                case OMR: {
                    return "OMR";
                }

                case PAB: {
                    return "PAB";
                }

                case PEN: {
                    return "PEN";
                }

                case PGK: {
                    return "PGK";
                }

                case PHP: {
                    return "PHP";
                }

                case PKR: {
                    return "PKR";
                }

                case PLN: {
                    return "PLN";
                }

                case PYG: {
                    return "PYG";
                }

                case QAR: {
                    return "QAR";
                }

                case RON: {
                    return "RON";
                }

                case RSD: {
                    return "RSD";
                }

                case RUB: {
                    return "RUB";
                }

                case RWF: {
                    return "RWF";
                }

                case SAR: {
                    return "SAR";
                }

                case SBD: {
                    return "SBD";
                }

                case SCR: {
                    return "SCR";
                }

                case SDG: {
                    return "SDG";
                }

                case SEK: {
                    return "SEK";
                }

                case SGD: {
                    return "SGD";
                }

                case SHP: {
                    return "SHP";
                }

                case SLL: {
                    return "SLL";
                }

                case SOS: {
                    return "SOS";
                }

                case SRD: {
                    return "SRD";
                }

                case SSP: {
                    return "SSP";
                }

                case STN: {
                    return "STN";
                }

                case SYP: {
                    return "SYP";
                }

                case SZL: {
                    return "SZL";
                }

                case THB: {
                    return "THB";
                }

                case TJS: {
                    return "TJS";
                }

                case TMT: {
                    return "TMT";
                }

                case TND: {
                    return "TND";
                }

                case TOP: {
                    return "TOP";
                }

                case TRY: {
                    return "TRY";
                }

                case TTD: {
                    return "TTD";
                }

                case TWD: {
                    return "TWD";
                }

                case TZS: {
                    return "TZS";
                }

                case UAH: {
                    return "UAH";
                }

                case UGX: {
                    return "UGX";
                }

                case USD: {
                    return "USD";
                }

                case UYU: {
                    return "UYU";
                }

                case UZS: {
                    return "UZS";
                }

                case VED: {
                    return "VED";
                }

                case VES: {
                    return "VES";
                }

                case VND: {
                    return "VND";
                }

                case VUV: {
                    return "VUV";
                }

                case WST: {
                    return "WST";
                }

                case XAF: {
                    return "XAF";
                }

                case XCD: {
                    return "XCD";
                }

                case XOF: {
                    return "XOF";
                }

                case XPF: {
                    return "XPF";
                }

                case XXX: {
                    return "XXX";
                }

                case YER: {
                    return "YER";
                }

                case ZAR: {
                    return "ZAR";
                }

                case ZMW: {
                    return "ZMW";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface CustomerQueryDefinition {
        void define(CustomerQuery _queryBuilder);
    }

    /**
    * A customer represents a customer account with the shop. Customer accounts store contact information
    * for the customer, saving logged-in customers the trouble of having to provide it at every checkout.
    */
    public static class CustomerQuery extends Query<CustomerQuery> {
        CustomerQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Indicates whether the customer has consented to be sent marketing material via email.
        */
        public CustomerQuery acceptsMarketing() {
            startField("acceptsMarketing");

            return this;
        }

        public class AddressesArguments extends Arguments {
            AddressesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public AddressesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public AddressesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public AddressesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public AddressesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public AddressesArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface AddressesArgumentsDefinition {
            void define(AddressesArguments args);
        }

        /**
        * A list of addresses for the customer.
        */
        public CustomerQuery addresses(MailingAddressConnectionQueryDefinition queryDef) {
            return addresses(args -> {}, queryDef);
        }

        /**
        * A list of addresses for the customer.
        */
        public CustomerQuery addresses(AddressesArgumentsDefinition argsDef, MailingAddressConnectionQueryDefinition queryDef) {
            startField("addresses");

            AddressesArguments args = new AddressesArguments(_queryBuilder);
            argsDef.define(args);
            AddressesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The date and time when the customer was created.
        */
        public CustomerQuery createdAt() {
            startField("createdAt");

            return this;
        }

        /**
        * The customer’s default address.
        */
        public CustomerQuery defaultAddress(MailingAddressQueryDefinition queryDef) {
            startField("defaultAddress");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The customer’s name, email or phone number.
        */
        public CustomerQuery displayName() {
            startField("displayName");

            return this;
        }

        /**
        * The customer’s email address.
        */
        public CustomerQuery email() {
            startField("email");

            return this;
        }

        /**
        * The customer’s first name.
        */
        public CustomerQuery firstName() {
            startField("firstName");

            return this;
        }

        /**
        * A unique ID for the customer.
        */
        public CustomerQuery id() {
            startField("id");

            return this;
        }

        /**
        * The customer’s last name.
        */
        public CustomerQuery lastName() {
            startField("lastName");

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CustomerQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public CustomerQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public CustomerQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The number of orders that the customer has made at the store in their lifetime.
        */
        public CustomerQuery numberOfOrders() {
            startField("numberOfOrders");

            return this;
        }

        public class OrdersArguments extends Arguments {
            OrdersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public OrdersArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public OrdersArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public OrdersArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public OrdersArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public OrdersArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public OrdersArguments sortKey(OrderSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Apply one or multiple filters to the query.
            * | name | description | acceptable_values | default_value | example_use |
            * | ---- | ---- | ---- | ---- | ---- |
            * | processed_at |
            * Refer to the detailed [search syntax](https://shopify.dev/api/usage/search-syntax) for more
            * information about using filters.
            */
            public OrdersArguments query(String value) {
                if (value != null) {
                    startArgument("query");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface OrdersArgumentsDefinition {
            void define(OrdersArguments args);
        }

        /**
        * The orders associated with the customer.
        */
        public CustomerQuery orders(OrderConnectionQueryDefinition queryDef) {
            return orders(args -> {}, queryDef);
        }

        /**
        * The orders associated with the customer.
        */
        public CustomerQuery orders(OrdersArgumentsDefinition argsDef, OrderConnectionQueryDefinition queryDef) {
            startField("orders");

            OrdersArguments args = new OrdersArguments(_queryBuilder);
            argsDef.define(args);
            OrdersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new OrderConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The customer’s phone number.
        */
        public CustomerQuery phone() {
            startField("phone");

            return this;
        }

        /**
        * A comma separated list of tags that have been added to the customer.
        * Additional access scope required: unauthenticated_read_customer_tags.
        */
        public CustomerQuery tags() {
            startField("tags");

            return this;
        }

        /**
        * The date and time when the customer information was updated.
        */
        public CustomerQuery updatedAt() {
            startField("updatedAt");

            return this;
        }
    }

    /**
    * A customer represents a customer account with the shop. Customer accounts store contact information
    * for the customer, saving logged-in customers the trouble of having to provide it at every checkout.
    */
    public static class Customer extends AbstractResponse<Customer> implements HasMetafields, MetafieldParentResource {
        public Customer() {
        }

        public Customer(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "acceptsMarketing": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "addresses": {
                        responseData.put(key, new MailingAddressConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "createdAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "defaultAddress": {
                        MailingAddress optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MailingAddress(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "displayName": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "email": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "firstName": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "lastName": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "numberOfOrders": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "orders": {
                        responseData.put(key, new OrderConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "tags": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Customer";
        }

        /**
        * Indicates whether the customer has consented to be sent marketing material via email.
        */

        public Boolean getAcceptsMarketing() {
            return (Boolean) get("acceptsMarketing");
        }

        public Customer setAcceptsMarketing(Boolean arg) {
            optimisticData.put(getKey("acceptsMarketing"), arg);
            return this;
        }

        /**
        * A list of addresses for the customer.
        */

        public MailingAddressConnection getAddresses() {
            return (MailingAddressConnection) get("addresses");
        }

        public Customer setAddresses(MailingAddressConnection arg) {
            optimisticData.put(getKey("addresses"), arg);
            return this;
        }

        /**
        * The date and time when the customer was created.
        */

        public DateTime getCreatedAt() {
            return (DateTime) get("createdAt");
        }

        public Customer setCreatedAt(DateTime arg) {
            optimisticData.put(getKey("createdAt"), arg);
            return this;
        }

        /**
        * The customer’s default address.
        */

        public MailingAddress getDefaultAddress() {
            return (MailingAddress) get("defaultAddress");
        }

        public Customer setDefaultAddress(MailingAddress arg) {
            optimisticData.put(getKey("defaultAddress"), arg);
            return this;
        }

        /**
        * The customer’s name, email or phone number.
        */

        public String getDisplayName() {
            return (String) get("displayName");
        }

        public Customer setDisplayName(String arg) {
            optimisticData.put(getKey("displayName"), arg);
            return this;
        }

        /**
        * The customer’s email address.
        */

        public String getEmail() {
            return (String) get("email");
        }

        public Customer setEmail(String arg) {
            optimisticData.put(getKey("email"), arg);
            return this;
        }

        /**
        * The customer’s first name.
        */

        public String getFirstName() {
            return (String) get("firstName");
        }

        public Customer setFirstName(String arg) {
            optimisticData.put(getKey("firstName"), arg);
            return this;
        }

        /**
        * A unique ID for the customer.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public Customer setId(ID arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The customer’s last name.
        */

        public String getLastName() {
            return (String) get("lastName");
        }

        public Customer setLastName(String arg) {
            optimisticData.put(getKey("lastName"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Customer setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Customer setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The number of orders that the customer has made at the store in their lifetime.
        */

        public String getNumberOfOrders() {
            return (String) get("numberOfOrders");
        }

        public Customer setNumberOfOrders(String arg) {
            optimisticData.put(getKey("numberOfOrders"), arg);
            return this;
        }

        /**
        * The orders associated with the customer.
        */

        public OrderConnection getOrders() {
            return (OrderConnection) get("orders");
        }

        public Customer setOrders(OrderConnection arg) {
            optimisticData.put(getKey("orders"), arg);
            return this;
        }

        /**
        * The customer’s phone number.
        */

        public String getPhone() {
            return (String) get("phone");
        }

        public Customer setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        /**
        * A comma separated list of tags that have been added to the customer.
        * Additional access scope required: unauthenticated_read_customer_tags.
        */

        public List<String> getTags() {
            return (List<String>) get("tags");
        }

        public Customer setTags(List<String> arg) {
            optimisticData.put(getKey("tags"), arg);
            return this;
        }

        /**
        * The date and time when the customer information was updated.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public Customer setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "acceptsMarketing": return false;

                case "addresses": return true;

                case "createdAt": return false;

                case "defaultAddress": return true;

                case "displayName": return false;

                case "email": return false;

                case "firstName": return false;

                case "id": return false;

                case "lastName": return false;

                case "metafield": return true;

                case "metafields": return true;

                case "numberOfOrders": return false;

                case "orders": return true;

                case "phone": return false;

                case "tags": return false;

                case "updatedAt": return false;

                default: return false;
            }
        }
    }

    public interface CustomerAccessTokenQueryDefinition {
        void define(CustomerAccessTokenQuery _queryBuilder);
    }

    /**
    * A CustomerAccessToken represents the unique token required to make modifications to the customer
    * object.
    */
    public static class CustomerAccessTokenQuery extends Query<CustomerAccessTokenQuery> {
        CustomerAccessTokenQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The customer’s access token.
        */
        public CustomerAccessTokenQuery accessToken() {
            startField("accessToken");

            return this;
        }

        /**
        * The date and time when the customer access token expires.
        */
        public CustomerAccessTokenQuery expiresAt() {
            startField("expiresAt");

            return this;
        }
    }

    /**
    * A CustomerAccessToken represents the unique token required to make modifications to the customer
    * object.
    */
    public static class CustomerAccessToken extends AbstractResponse<CustomerAccessToken> {
        public CustomerAccessToken() {
        }

        public CustomerAccessToken(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "accessToken": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "expiresAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerAccessToken";
        }

        /**
        * The customer’s access token.
        */

        public String getAccessToken() {
            return (String) get("accessToken");
        }

        public CustomerAccessToken setAccessToken(String arg) {
            optimisticData.put(getKey("accessToken"), arg);
            return this;
        }

        /**
        * The date and time when the customer access token expires.
        */

        public DateTime getExpiresAt() {
            return (DateTime) get("expiresAt");
        }

        public CustomerAccessToken setExpiresAt(DateTime arg) {
            optimisticData.put(getKey("expiresAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "accessToken": return false;

                case "expiresAt": return false;

                default: return false;
            }
        }
    }

    public static class CustomerAccessTokenCreateInput implements Serializable {
        private String email;

        private String password;

        public CustomerAccessTokenCreateInput(String email, String password) {
            this.email = email;

            this.password = password;
        }

        public String getEmail() {
            return email;
        }

        public CustomerAccessTokenCreateInput setEmail(String email) {
            this.email = email;
            return this;
        }

        public String getPassword() {
            return password;
        }

        public CustomerAccessTokenCreateInput setPassword(String password) {
            this.password = password;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("email:");
            Query.appendQuotedString(_queryBuilder, email.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("password:");
            Query.appendQuotedString(_queryBuilder, password.toString());

            _queryBuilder.append('}');
        }
    }

    public interface CustomerAccessTokenCreatePayloadQueryDefinition {
        void define(CustomerAccessTokenCreatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerAccessTokenCreate` mutation.
    */
    public static class CustomerAccessTokenCreatePayloadQuery extends Query<CustomerAccessTokenCreatePayloadQuery> {
        CustomerAccessTokenCreatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The newly created customer access token object.
        */
        public CustomerAccessTokenCreatePayloadQuery customerAccessToken(CustomerAccessTokenQueryDefinition queryDef) {
            startField("customerAccessToken");

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerAccessTokenCreatePayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerAccessTokenCreatePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerAccessTokenCreate` mutation.
    */
    public static class CustomerAccessTokenCreatePayload extends AbstractResponse<CustomerAccessTokenCreatePayload> {
        public CustomerAccessTokenCreatePayload() {
        }

        public CustomerAccessTokenCreatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customerAccessToken": {
                        CustomerAccessToken optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessToken(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerAccessTokenCreatePayload";
        }

        /**
        * The newly created customer access token object.
        */

        public CustomerAccessToken getCustomerAccessToken() {
            return (CustomerAccessToken) get("customerAccessToken");
        }

        public CustomerAccessTokenCreatePayload setCustomerAccessToken(CustomerAccessToken arg) {
            optimisticData.put(getKey("customerAccessToken"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerAccessTokenCreatePayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerAccessTokenCreatePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customerAccessToken": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerAccessTokenCreateWithMultipassPayloadQueryDefinition {
        void define(CustomerAccessTokenCreateWithMultipassPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerAccessTokenCreateWithMultipass` mutation.
    */
    public static class CustomerAccessTokenCreateWithMultipassPayloadQuery extends Query<CustomerAccessTokenCreateWithMultipassPayloadQuery> {
        CustomerAccessTokenCreateWithMultipassPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * An access token object associated with the customer.
        */
        public CustomerAccessTokenCreateWithMultipassPayloadQuery customerAccessToken(CustomerAccessTokenQueryDefinition queryDef) {
            startField("customerAccessToken");

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerAccessTokenCreateWithMultipassPayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerAccessTokenCreateWithMultipass` mutation.
    */
    public static class CustomerAccessTokenCreateWithMultipassPayload extends AbstractResponse<CustomerAccessTokenCreateWithMultipassPayload> {
        public CustomerAccessTokenCreateWithMultipassPayload() {
        }

        public CustomerAccessTokenCreateWithMultipassPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customerAccessToken": {
                        CustomerAccessToken optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessToken(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerAccessTokenCreateWithMultipassPayload";
        }

        /**
        * An access token object associated with the customer.
        */

        public CustomerAccessToken getCustomerAccessToken() {
            return (CustomerAccessToken) get("customerAccessToken");
        }

        public CustomerAccessTokenCreateWithMultipassPayload setCustomerAccessToken(CustomerAccessToken arg) {
            optimisticData.put(getKey("customerAccessToken"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerAccessTokenCreateWithMultipassPayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customerAccessToken": return true;

                case "customerUserErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerAccessTokenDeletePayloadQueryDefinition {
        void define(CustomerAccessTokenDeletePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerAccessTokenDelete` mutation.
    */
    public static class CustomerAccessTokenDeletePayloadQuery extends Query<CustomerAccessTokenDeletePayloadQuery> {
        CustomerAccessTokenDeletePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The destroyed access token.
        */
        public CustomerAccessTokenDeletePayloadQuery deletedAccessToken() {
            startField("deletedAccessToken");

            return this;
        }

        /**
        * ID of the destroyed customer access token.
        */
        public CustomerAccessTokenDeletePayloadQuery deletedCustomerAccessTokenId() {
            startField("deletedCustomerAccessTokenId");

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerAccessTokenDeletePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerAccessTokenDelete` mutation.
    */
    public static class CustomerAccessTokenDeletePayload extends AbstractResponse<CustomerAccessTokenDeletePayload> {
        public CustomerAccessTokenDeletePayload() {
        }

        public CustomerAccessTokenDeletePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "deletedAccessToken": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "deletedCustomerAccessTokenId": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerAccessTokenDeletePayload";
        }

        /**
        * The destroyed access token.
        */

        public String getDeletedAccessToken() {
            return (String) get("deletedAccessToken");
        }

        public CustomerAccessTokenDeletePayload setDeletedAccessToken(String arg) {
            optimisticData.put(getKey("deletedAccessToken"), arg);
            return this;
        }

        /**
        * ID of the destroyed customer access token.
        */

        public String getDeletedCustomerAccessTokenId() {
            return (String) get("deletedCustomerAccessTokenId");
        }

        public CustomerAccessTokenDeletePayload setDeletedCustomerAccessTokenId(String arg) {
            optimisticData.put(getKey("deletedCustomerAccessTokenId"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerAccessTokenDeletePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "deletedAccessToken": return false;

                case "deletedCustomerAccessTokenId": return false;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerAccessTokenRenewPayloadQueryDefinition {
        void define(CustomerAccessTokenRenewPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerAccessTokenRenew` mutation.
    */
    public static class CustomerAccessTokenRenewPayloadQuery extends Query<CustomerAccessTokenRenewPayloadQuery> {
        CustomerAccessTokenRenewPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The renewed customer access token object.
        */
        public CustomerAccessTokenRenewPayloadQuery customerAccessToken(CustomerAccessTokenQueryDefinition queryDef) {
            startField("customerAccessToken");

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerAccessTokenRenewPayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerAccessTokenRenew` mutation.
    */
    public static class CustomerAccessTokenRenewPayload extends AbstractResponse<CustomerAccessTokenRenewPayload> {
        public CustomerAccessTokenRenewPayload() {
        }

        public CustomerAccessTokenRenewPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customerAccessToken": {
                        CustomerAccessToken optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessToken(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerAccessTokenRenewPayload";
        }

        /**
        * The renewed customer access token object.
        */

        public CustomerAccessToken getCustomerAccessToken() {
            return (CustomerAccessToken) get("customerAccessToken");
        }

        public CustomerAccessTokenRenewPayload setCustomerAccessToken(CustomerAccessToken arg) {
            optimisticData.put(getKey("customerAccessToken"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerAccessTokenRenewPayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customerAccessToken": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerActivateByUrlPayloadQueryDefinition {
        void define(CustomerActivateByUrlPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerActivateByUrl` mutation.
    */
    public static class CustomerActivateByUrlPayloadQuery extends Query<CustomerActivateByUrlPayloadQuery> {
        CustomerActivateByUrlPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The customer that was activated.
        */
        public CustomerActivateByUrlPayloadQuery customer(CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A new customer access token for the customer.
        */
        public CustomerActivateByUrlPayloadQuery customerAccessToken(CustomerAccessTokenQueryDefinition queryDef) {
            startField("customerAccessToken");

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerActivateByUrlPayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerActivateByUrl` mutation.
    */
    public static class CustomerActivateByUrlPayload extends AbstractResponse<CustomerActivateByUrlPayload> {
        public CustomerActivateByUrlPayload() {
        }

        public CustomerActivateByUrlPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessToken": {
                        CustomerAccessToken optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessToken(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerActivateByUrlPayload";
        }

        /**
        * The customer that was activated.
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public CustomerActivateByUrlPayload setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * A new customer access token for the customer.
        */

        public CustomerAccessToken getCustomerAccessToken() {
            return (CustomerAccessToken) get("customerAccessToken");
        }

        public CustomerActivateByUrlPayload setCustomerAccessToken(CustomerAccessToken arg) {
            optimisticData.put(getKey("customerAccessToken"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerActivateByUrlPayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer": return true;

                case "customerAccessToken": return true;

                case "customerUserErrors": return true;

                default: return false;
            }
        }
    }

    public static class CustomerActivateInput implements Serializable {
        private String activationToken;

        private String password;

        public CustomerActivateInput(String activationToken, String password) {
            this.activationToken = activationToken;

            this.password = password;
        }

        public String getActivationToken() {
            return activationToken;
        }

        public CustomerActivateInput setActivationToken(String activationToken) {
            this.activationToken = activationToken;
            return this;
        }

        public String getPassword() {
            return password;
        }

        public CustomerActivateInput setPassword(String password) {
            this.password = password;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("activationToken:");
            Query.appendQuotedString(_queryBuilder, activationToken.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("password:");
            Query.appendQuotedString(_queryBuilder, password.toString());

            _queryBuilder.append('}');
        }
    }

    public interface CustomerActivatePayloadQueryDefinition {
        void define(CustomerActivatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerActivate` mutation.
    */
    public static class CustomerActivatePayloadQuery extends Query<CustomerActivatePayloadQuery> {
        CustomerActivatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The customer object.
        */
        public CustomerActivatePayloadQuery customer(CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A newly created customer access token object for the customer.
        */
        public CustomerActivatePayloadQuery customerAccessToken(CustomerAccessTokenQueryDefinition queryDef) {
            startField("customerAccessToken");

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerActivatePayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerActivatePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerActivate` mutation.
    */
    public static class CustomerActivatePayload extends AbstractResponse<CustomerActivatePayload> {
        public CustomerActivatePayload() {
        }

        public CustomerActivatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessToken": {
                        CustomerAccessToken optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessToken(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerActivatePayload";
        }

        /**
        * The customer object.
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public CustomerActivatePayload setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * A newly created customer access token object for the customer.
        */

        public CustomerAccessToken getCustomerAccessToken() {
            return (CustomerAccessToken) get("customerAccessToken");
        }

        public CustomerActivatePayload setCustomerAccessToken(CustomerAccessToken arg) {
            optimisticData.put(getKey("customerAccessToken"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerActivatePayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerActivatePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer": return true;

                case "customerAccessToken": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerAddressCreatePayloadQueryDefinition {
        void define(CustomerAddressCreatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerAddressCreate` mutation.
    */
    public static class CustomerAddressCreatePayloadQuery extends Query<CustomerAddressCreatePayloadQuery> {
        CustomerAddressCreatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The new customer address object.
        */
        public CustomerAddressCreatePayloadQuery customerAddress(MailingAddressQueryDefinition queryDef) {
            startField("customerAddress");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerAddressCreatePayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerAddressCreatePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerAddressCreate` mutation.
    */
    public static class CustomerAddressCreatePayload extends AbstractResponse<CustomerAddressCreatePayload> {
        public CustomerAddressCreatePayload() {
        }

        public CustomerAddressCreatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customerAddress": {
                        MailingAddress optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MailingAddress(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerAddressCreatePayload";
        }

        /**
        * The new customer address object.
        */

        public MailingAddress getCustomerAddress() {
            return (MailingAddress) get("customerAddress");
        }

        public CustomerAddressCreatePayload setCustomerAddress(MailingAddress arg) {
            optimisticData.put(getKey("customerAddress"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerAddressCreatePayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerAddressCreatePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customerAddress": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerAddressDeletePayloadQueryDefinition {
        void define(CustomerAddressDeletePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerAddressDelete` mutation.
    */
    public static class CustomerAddressDeletePayloadQuery extends Query<CustomerAddressDeletePayloadQuery> {
        CustomerAddressDeletePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerAddressDeletePayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * ID of the deleted customer address.
        */
        public CustomerAddressDeletePayloadQuery deletedCustomerAddressId() {
            startField("deletedCustomerAddressId");

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerAddressDeletePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerAddressDelete` mutation.
    */
    public static class CustomerAddressDeletePayload extends AbstractResponse<CustomerAddressDeletePayload> {
        public CustomerAddressDeletePayload() {
        }

        public CustomerAddressDeletePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "deletedCustomerAddressId": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerAddressDeletePayload";
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerAddressDeletePayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * ID of the deleted customer address.
        */

        public String getDeletedCustomerAddressId() {
            return (String) get("deletedCustomerAddressId");
        }

        public CustomerAddressDeletePayload setDeletedCustomerAddressId(String arg) {
            optimisticData.put(getKey("deletedCustomerAddressId"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerAddressDeletePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customerUserErrors": return true;

                case "deletedCustomerAddressId": return false;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerAddressUpdatePayloadQueryDefinition {
        void define(CustomerAddressUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerAddressUpdate` mutation.
    */
    public static class CustomerAddressUpdatePayloadQuery extends Query<CustomerAddressUpdatePayloadQuery> {
        CustomerAddressUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The customer’s updated mailing address.
        */
        public CustomerAddressUpdatePayloadQuery customerAddress(MailingAddressQueryDefinition queryDef) {
            startField("customerAddress");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerAddressUpdatePayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerAddressUpdatePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerAddressUpdate` mutation.
    */
    public static class CustomerAddressUpdatePayload extends AbstractResponse<CustomerAddressUpdatePayload> {
        public CustomerAddressUpdatePayload() {
        }

        public CustomerAddressUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customerAddress": {
                        MailingAddress optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MailingAddress(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerAddressUpdatePayload";
        }

        /**
        * The customer’s updated mailing address.
        */

        public MailingAddress getCustomerAddress() {
            return (MailingAddress) get("customerAddress");
        }

        public CustomerAddressUpdatePayload setCustomerAddress(MailingAddress arg) {
            optimisticData.put(getKey("customerAddress"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerAddressUpdatePayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerAddressUpdatePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customerAddress": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public static class CustomerCreateInput implements Serializable {
        private String email;

        private String password;

        private Input<String> firstName = Input.undefined();

        private Input<String> lastName = Input.undefined();

        private Input<String> phone = Input.undefined();

        private Input<Boolean> acceptsMarketing = Input.undefined();

        public CustomerCreateInput(String email, String password) {
            this.email = email;

            this.password = password;
        }

        public String getEmail() {
            return email;
        }

        public CustomerCreateInput setEmail(String email) {
            this.email = email;
            return this;
        }

        public String getPassword() {
            return password;
        }

        public CustomerCreateInput setPassword(String password) {
            this.password = password;
            return this;
        }

        public String getFirstName() {
            return firstName.getValue();
        }

        public Input<String> getFirstNameInput() {
            return firstName;
        }

        public CustomerCreateInput setFirstName(String firstName) {
            this.firstName = Input.optional(firstName);
            return this;
        }

        public CustomerCreateInput setFirstNameInput(Input<String> firstName) {
            if (firstName == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.firstName = firstName;
            return this;
        }

        public String getLastName() {
            return lastName.getValue();
        }

        public Input<String> getLastNameInput() {
            return lastName;
        }

        public CustomerCreateInput setLastName(String lastName) {
            this.lastName = Input.optional(lastName);
            return this;
        }

        public CustomerCreateInput setLastNameInput(Input<String> lastName) {
            if (lastName == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.lastName = lastName;
            return this;
        }

        public String getPhone() {
            return phone.getValue();
        }

        public Input<String> getPhoneInput() {
            return phone;
        }

        public CustomerCreateInput setPhone(String phone) {
            this.phone = Input.optional(phone);
            return this;
        }

        public CustomerCreateInput setPhoneInput(Input<String> phone) {
            if (phone == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.phone = phone;
            return this;
        }

        public Boolean getAcceptsMarketing() {
            return acceptsMarketing.getValue();
        }

        public Input<Boolean> getAcceptsMarketingInput() {
            return acceptsMarketing;
        }

        public CustomerCreateInput setAcceptsMarketing(Boolean acceptsMarketing) {
            this.acceptsMarketing = Input.optional(acceptsMarketing);
            return this;
        }

        public CustomerCreateInput setAcceptsMarketingInput(Input<Boolean> acceptsMarketing) {
            if (acceptsMarketing == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.acceptsMarketing = acceptsMarketing;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("email:");
            Query.appendQuotedString(_queryBuilder, email.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("password:");
            Query.appendQuotedString(_queryBuilder, password.toString());

            if (this.firstName.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("firstName:");
                if (firstName.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, firstName.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.lastName.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("lastName:");
                if (lastName.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, lastName.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.phone.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                if (phone.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, phone.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.acceptsMarketing.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("acceptsMarketing:");
                if (acceptsMarketing.getValue() != null) {
                    _queryBuilder.append(acceptsMarketing.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface CustomerCreatePayloadQueryDefinition {
        void define(CustomerCreatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerCreate` mutation.
    */
    public static class CustomerCreatePayloadQuery extends Query<CustomerCreatePayloadQuery> {
        CustomerCreatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The created customer object.
        */
        public CustomerCreatePayloadQuery customer(CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerCreatePayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerCreatePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerCreate` mutation.
    */
    public static class CustomerCreatePayload extends AbstractResponse<CustomerCreatePayload> {
        public CustomerCreatePayload() {
        }

        public CustomerCreatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerCreatePayload";
        }

        /**
        * The created customer object.
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public CustomerCreatePayload setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerCreatePayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerCreatePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerDefaultAddressUpdatePayloadQueryDefinition {
        void define(CustomerDefaultAddressUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerDefaultAddressUpdate` mutation.
    */
    public static class CustomerDefaultAddressUpdatePayloadQuery extends Query<CustomerDefaultAddressUpdatePayloadQuery> {
        CustomerDefaultAddressUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated customer object.
        */
        public CustomerDefaultAddressUpdatePayloadQuery customer(CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerDefaultAddressUpdatePayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerDefaultAddressUpdatePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerDefaultAddressUpdate` mutation.
    */
    public static class CustomerDefaultAddressUpdatePayload extends AbstractResponse<CustomerDefaultAddressUpdatePayload> {
        public CustomerDefaultAddressUpdatePayload() {
        }

        public CustomerDefaultAddressUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerDefaultAddressUpdatePayload";
        }

        /**
        * The updated customer object.
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public CustomerDefaultAddressUpdatePayload setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerDefaultAddressUpdatePayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerDefaultAddressUpdatePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    /**
    * Possible error codes that can be returned by `CustomerUserError`.
    */
    public enum CustomerErrorCode {
        /**
        * Customer already enabled.
        */
        ALREADY_ENABLED,

        /**
        * Input email contains an invalid domain name.
        */
        BAD_DOMAIN,

        /**
        * The input value is blank.
        */
        BLANK,

        /**
        * Input contains HTML tags.
        */
        CONTAINS_HTML_TAGS,

        /**
        * Input contains URL.
        */
        CONTAINS_URL,

        /**
        * Customer is disabled.
        */
        CUSTOMER_DISABLED,

        /**
        * The input value is invalid.
        */
        INVALID,

        /**
        * Multipass token is not valid.
        */
        INVALID_MULTIPASS_REQUEST,

        /**
        * Address does not exist.
        */
        NOT_FOUND,

        /**
        * Input password starts or ends with whitespace.
        */
        PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE,

        /**
        * The input value is already taken.
        */
        TAKEN,

        /**
        * Invalid activation token.
        */
        TOKEN_INVALID,

        /**
        * The input value is too long.
        */
        TOO_LONG,

        /**
        * The input value is too short.
        */
        TOO_SHORT,

        /**
        * Unidentified customer.
        */
        UNIDENTIFIED_CUSTOMER,

        UNKNOWN_VALUE;

        public static CustomerErrorCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ALREADY_ENABLED": {
                    return ALREADY_ENABLED;
                }

                case "BAD_DOMAIN": {
                    return BAD_DOMAIN;
                }

                case "BLANK": {
                    return BLANK;
                }

                case "CONTAINS_HTML_TAGS": {
                    return CONTAINS_HTML_TAGS;
                }

                case "CONTAINS_URL": {
                    return CONTAINS_URL;
                }

                case "CUSTOMER_DISABLED": {
                    return CUSTOMER_DISABLED;
                }

                case "INVALID": {
                    return INVALID;
                }

                case "INVALID_MULTIPASS_REQUEST": {
                    return INVALID_MULTIPASS_REQUEST;
                }

                case "NOT_FOUND": {
                    return NOT_FOUND;
                }

                case "PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE": {
                    return PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE;
                }

                case "TAKEN": {
                    return TAKEN;
                }

                case "TOKEN_INVALID": {
                    return TOKEN_INVALID;
                }

                case "TOO_LONG": {
                    return TOO_LONG;
                }

                case "TOO_SHORT": {
                    return TOO_SHORT;
                }

                case "UNIDENTIFIED_CUSTOMER": {
                    return UNIDENTIFIED_CUSTOMER;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ALREADY_ENABLED: {
                    return "ALREADY_ENABLED";
                }

                case BAD_DOMAIN: {
                    return "BAD_DOMAIN";
                }

                case BLANK: {
                    return "BLANK";
                }

                case CONTAINS_HTML_TAGS: {
                    return "CONTAINS_HTML_TAGS";
                }

                case CONTAINS_URL: {
                    return "CONTAINS_URL";
                }

                case CUSTOMER_DISABLED: {
                    return "CUSTOMER_DISABLED";
                }

                case INVALID: {
                    return "INVALID";
                }

                case INVALID_MULTIPASS_REQUEST: {
                    return "INVALID_MULTIPASS_REQUEST";
                }

                case NOT_FOUND: {
                    return "NOT_FOUND";
                }

                case PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE: {
                    return "PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE";
                }

                case TAKEN: {
                    return "TAKEN";
                }

                case TOKEN_INVALID: {
                    return "TOKEN_INVALID";
                }

                case TOO_LONG: {
                    return "TOO_LONG";
                }

                case TOO_SHORT: {
                    return "TOO_SHORT";
                }

                case UNIDENTIFIED_CUSTOMER: {
                    return "UNIDENTIFIED_CUSTOMER";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface CustomerRecoverPayloadQueryDefinition {
        void define(CustomerRecoverPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerRecover` mutation.
    */
    public static class CustomerRecoverPayloadQuery extends Query<CustomerRecoverPayloadQuery> {
        CustomerRecoverPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerRecoverPayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerRecoverPayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerRecover` mutation.
    */
    public static class CustomerRecoverPayload extends AbstractResponse<CustomerRecoverPayload> {
        public CustomerRecoverPayload() {
        }

        public CustomerRecoverPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerRecoverPayload";
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerRecoverPayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerRecoverPayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerResetByUrlPayloadQueryDefinition {
        void define(CustomerResetByUrlPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerResetByUrl` mutation.
    */
    public static class CustomerResetByUrlPayloadQuery extends Query<CustomerResetByUrlPayloadQuery> {
        CustomerResetByUrlPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The customer object which was reset.
        */
        public CustomerResetByUrlPayloadQuery customer(CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A newly created customer access token object for the customer.
        */
        public CustomerResetByUrlPayloadQuery customerAccessToken(CustomerAccessTokenQueryDefinition queryDef) {
            startField("customerAccessToken");

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerResetByUrlPayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerResetByUrlPayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerResetByUrl` mutation.
    */
    public static class CustomerResetByUrlPayload extends AbstractResponse<CustomerResetByUrlPayload> {
        public CustomerResetByUrlPayload() {
        }

        public CustomerResetByUrlPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessToken": {
                        CustomerAccessToken optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessToken(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerResetByUrlPayload";
        }

        /**
        * The customer object which was reset.
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public CustomerResetByUrlPayload setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * A newly created customer access token object for the customer.
        */

        public CustomerAccessToken getCustomerAccessToken() {
            return (CustomerAccessToken) get("customerAccessToken");
        }

        public CustomerResetByUrlPayload setCustomerAccessToken(CustomerAccessToken arg) {
            optimisticData.put(getKey("customerAccessToken"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerResetByUrlPayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerResetByUrlPayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer": return true;

                case "customerAccessToken": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public static class CustomerResetInput implements Serializable {
        private String resetToken;

        private String password;

        public CustomerResetInput(String resetToken, String password) {
            this.resetToken = resetToken;

            this.password = password;
        }

        public String getResetToken() {
            return resetToken;
        }

        public CustomerResetInput setResetToken(String resetToken) {
            this.resetToken = resetToken;
            return this;
        }

        public String getPassword() {
            return password;
        }

        public CustomerResetInput setPassword(String password) {
            this.password = password;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("resetToken:");
            Query.appendQuotedString(_queryBuilder, resetToken.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("password:");
            Query.appendQuotedString(_queryBuilder, password.toString());

            _queryBuilder.append('}');
        }
    }

    public interface CustomerResetPayloadQueryDefinition {
        void define(CustomerResetPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerReset` mutation.
    */
    public static class CustomerResetPayloadQuery extends Query<CustomerResetPayloadQuery> {
        CustomerResetPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The customer object which was reset.
        */
        public CustomerResetPayloadQuery customer(CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A newly created customer access token object for the customer.
        */
        public CustomerResetPayloadQuery customerAccessToken(CustomerAccessTokenQueryDefinition queryDef) {
            startField("customerAccessToken");

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerResetPayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerResetPayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerReset` mutation.
    */
    public static class CustomerResetPayload extends AbstractResponse<CustomerResetPayload> {
        public CustomerResetPayload() {
        }

        public CustomerResetPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessToken": {
                        CustomerAccessToken optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessToken(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerResetPayload";
        }

        /**
        * The customer object which was reset.
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public CustomerResetPayload setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * A newly created customer access token object for the customer.
        */

        public CustomerAccessToken getCustomerAccessToken() {
            return (CustomerAccessToken) get("customerAccessToken");
        }

        public CustomerResetPayload setCustomerAccessToken(CustomerAccessToken arg) {
            optimisticData.put(getKey("customerAccessToken"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerResetPayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerResetPayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer": return true;

                case "customerAccessToken": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public static class CustomerUpdateInput implements Serializable {
        private Input<String> firstName = Input.undefined();

        private Input<String> lastName = Input.undefined();

        private Input<String> email = Input.undefined();

        private Input<String> phone = Input.undefined();

        private Input<String> password = Input.undefined();

        private Input<Boolean> acceptsMarketing = Input.undefined();

        public String getFirstName() {
            return firstName.getValue();
        }

        public Input<String> getFirstNameInput() {
            return firstName;
        }

        public CustomerUpdateInput setFirstName(String firstName) {
            this.firstName = Input.optional(firstName);
            return this;
        }

        public CustomerUpdateInput setFirstNameInput(Input<String> firstName) {
            if (firstName == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.firstName = firstName;
            return this;
        }

        public String getLastName() {
            return lastName.getValue();
        }

        public Input<String> getLastNameInput() {
            return lastName;
        }

        public CustomerUpdateInput setLastName(String lastName) {
            this.lastName = Input.optional(lastName);
            return this;
        }

        public CustomerUpdateInput setLastNameInput(Input<String> lastName) {
            if (lastName == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.lastName = lastName;
            return this;
        }

        public String getEmail() {
            return email.getValue();
        }

        public Input<String> getEmailInput() {
            return email;
        }

        public CustomerUpdateInput setEmail(String email) {
            this.email = Input.optional(email);
            return this;
        }

        public CustomerUpdateInput setEmailInput(Input<String> email) {
            if (email == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.email = email;
            return this;
        }

        public String getPhone() {
            return phone.getValue();
        }

        public Input<String> getPhoneInput() {
            return phone;
        }

        public CustomerUpdateInput setPhone(String phone) {
            this.phone = Input.optional(phone);
            return this;
        }

        public CustomerUpdateInput setPhoneInput(Input<String> phone) {
            if (phone == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.phone = phone;
            return this;
        }

        public String getPassword() {
            return password.getValue();
        }

        public Input<String> getPasswordInput() {
            return password;
        }

        public CustomerUpdateInput setPassword(String password) {
            this.password = Input.optional(password);
            return this;
        }

        public CustomerUpdateInput setPasswordInput(Input<String> password) {
            if (password == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.password = password;
            return this;
        }

        public Boolean getAcceptsMarketing() {
            return acceptsMarketing.getValue();
        }

        public Input<Boolean> getAcceptsMarketingInput() {
            return acceptsMarketing;
        }

        public CustomerUpdateInput setAcceptsMarketing(Boolean acceptsMarketing) {
            this.acceptsMarketing = Input.optional(acceptsMarketing);
            return this;
        }

        public CustomerUpdateInput setAcceptsMarketingInput(Input<Boolean> acceptsMarketing) {
            if (acceptsMarketing == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.acceptsMarketing = acceptsMarketing;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.firstName.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("firstName:");
                if (firstName.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, firstName.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.lastName.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("lastName:");
                if (lastName.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, lastName.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.email.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("email:");
                if (email.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, email.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.phone.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                if (phone.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, phone.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.password.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("password:");
                if (password.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, password.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.acceptsMarketing.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("acceptsMarketing:");
                if (acceptsMarketing.getValue() != null) {
                    _queryBuilder.append(acceptsMarketing.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface CustomerUpdatePayloadQueryDefinition {
        void define(CustomerUpdatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `customerUpdate` mutation.
    */
    public static class CustomerUpdatePayloadQuery extends Query<CustomerUpdatePayloadQuery> {
        CustomerUpdatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The updated customer object.
        */
        public CustomerUpdatePayloadQuery customer(CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The newly created customer access token. If the customer's password is updated, all previous access
        * tokens
        * (including the one used to perform this mutation) become invalid, and a new token is generated.
        */
        public CustomerUpdatePayloadQuery customerAccessToken(CustomerAccessTokenQueryDefinition queryDef) {
            startField("customerAccessToken");

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public CustomerUpdatePayloadQuery customerUserErrors(CustomerUserErrorQueryDefinition queryDef) {
            startField("customerUserErrors");

            _queryBuilder.append('{');
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */
        @Deprecated
        public CustomerUpdatePayloadQuery userErrors(UserErrorQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `customerUpdate` mutation.
    */
    public static class CustomerUpdatePayload extends AbstractResponse<CustomerUpdatePayload> {
        public CustomerUpdatePayload() {
        }

        public CustomerUpdatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessToken": {
                        CustomerAccessToken optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessToken(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUserErrors": {
                        List<CustomerUserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new CustomerUserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "userErrors": {
                        List<UserError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerUpdatePayload";
        }

        /**
        * The updated customer object.
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public CustomerUpdatePayload setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * The newly created customer access token. If the customer's password is updated, all previous access
        * tokens
        * (including the one used to perform this mutation) become invalid, and a new token is generated.
        */

        public CustomerAccessToken getCustomerAccessToken() {
            return (CustomerAccessToken) get("customerAccessToken");
        }

        public CustomerUpdatePayload setCustomerAccessToken(CustomerAccessToken arg) {
            optimisticData.put(getKey("customerAccessToken"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<CustomerUserError> getCustomerUserErrors() {
            return (List<CustomerUserError>) get("customerUserErrors");
        }

        public CustomerUpdatePayload setCustomerUserErrors(List<CustomerUserError> arg) {
            optimisticData.put(getKey("customerUserErrors"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        *
        * @deprecated Use `customerUserErrors` instead.
        */

        public List<UserError> getUserErrors() {
            return (List<UserError>) get("userErrors");
        }

        public CustomerUpdatePayload setUserErrors(List<UserError> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer": return true;

                case "customerAccessToken": return true;

                case "customerUserErrors": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface CustomerUserErrorQueryDefinition {
        void define(CustomerUserErrorQuery _queryBuilder);
    }

    /**
    * Represents an error that happens during execution of a customer mutation.
    */
    public static class CustomerUserErrorQuery extends Query<CustomerUserErrorQuery> {
        CustomerUserErrorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The error code.
        */
        public CustomerUserErrorQuery code() {
            startField("code");

            return this;
        }

        /**
        * The path to the input field that caused the error.
        */
        public CustomerUserErrorQuery field() {
            startField("field");

            return this;
        }

        /**
        * The error message.
        */
        public CustomerUserErrorQuery message() {
            startField("message");

            return this;
        }
    }

    /**
    * Represents an error that happens during execution of a customer mutation.
    */
    public static class CustomerUserError extends AbstractResponse<CustomerUserError> implements DisplayableError {
        public CustomerUserError() {
        }

        public CustomerUserError(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        CustomerErrorCode optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = CustomerErrorCode.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "field": {
                        List<String> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<String> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(jsonAsString(element1, key));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "message": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "CustomerUserError";
        }

        /**
        * The error code.
        */

        public CustomerErrorCode getCode() {
            return (CustomerErrorCode) get("code");
        }

        public CustomerUserError setCode(CustomerErrorCode arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The path to the input field that caused the error.
        */

        public List<String> getField() {
            return (List<String>) get("field");
        }

        public CustomerUserError setField(List<String> arg) {
            optimisticData.put(getKey("field"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public CustomerUserError setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "field": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    public interface DeliveryAddressQueryDefinition {
        void define(DeliveryAddressQuery _queryBuilder);
    }

    /**
    * A delivery address of the buyer that is interacting with the cart.
    */
    public static class DeliveryAddressQuery extends Query<DeliveryAddressQuery> {
        DeliveryAddressQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public DeliveryAddressQuery onMailingAddress(MailingAddressQueryDefinition queryDef) {
            startInlineFragment("MailingAddress");
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface DeliveryAddress {
        String getGraphQlTypeName();
    }

    /**
    * A delivery address of the buyer that is interacting with the cart.
    */
    public static class UnknownDeliveryAddress extends AbstractResponse<UnknownDeliveryAddress> implements DeliveryAddress {
        public UnknownDeliveryAddress() {
        }

        public UnknownDeliveryAddress(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static DeliveryAddress create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "MailingAddress": {
                    return new MailingAddress(fields);
                }

                default: {
                    return new UnknownDeliveryAddress(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public static class DeliveryAddressInput implements Serializable {
        private Input<MailingAddressInput> deliveryAddress = Input.undefined();

        private Input<Boolean> oneTimeUse = Input.undefined();

        private Input<DeliveryAddressValidationStrategy> deliveryAddressValidationStrategy = Input.undefined();

        private Input<ID> customerAddressId = Input.undefined();

        public MailingAddressInput getDeliveryAddress() {
            return deliveryAddress.getValue();
        }

        public Input<MailingAddressInput> getDeliveryAddressInput() {
            return deliveryAddress;
        }

        public DeliveryAddressInput setDeliveryAddress(MailingAddressInput deliveryAddress) {
            this.deliveryAddress = Input.optional(deliveryAddress);
            return this;
        }

        public DeliveryAddressInput setDeliveryAddressInput(Input<MailingAddressInput> deliveryAddress) {
            if (deliveryAddress == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.deliveryAddress = deliveryAddress;
            return this;
        }

        public Boolean getOneTimeUse() {
            return oneTimeUse.getValue();
        }

        public Input<Boolean> getOneTimeUseInput() {
            return oneTimeUse;
        }

        public DeliveryAddressInput setOneTimeUse(Boolean oneTimeUse) {
            this.oneTimeUse = Input.optional(oneTimeUse);
            return this;
        }

        public DeliveryAddressInput setOneTimeUseInput(Input<Boolean> oneTimeUse) {
            if (oneTimeUse == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.oneTimeUse = oneTimeUse;
            return this;
        }

        public DeliveryAddressValidationStrategy getDeliveryAddressValidationStrategy() {
            return deliveryAddressValidationStrategy.getValue();
        }

        public Input<DeliveryAddressValidationStrategy> getDeliveryAddressValidationStrategyInput() {
            return deliveryAddressValidationStrategy;
        }

        public DeliveryAddressInput setDeliveryAddressValidationStrategy(DeliveryAddressValidationStrategy deliveryAddressValidationStrategy) {
            this.deliveryAddressValidationStrategy = Input.optional(deliveryAddressValidationStrategy);
            return this;
        }

        public DeliveryAddressInput setDeliveryAddressValidationStrategyInput(Input<DeliveryAddressValidationStrategy> deliveryAddressValidationStrategy) {
            if (deliveryAddressValidationStrategy == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.deliveryAddressValidationStrategy = deliveryAddressValidationStrategy;
            return this;
        }

        public ID getCustomerAddressId() {
            return customerAddressId.getValue();
        }

        public Input<ID> getCustomerAddressIdInput() {
            return customerAddressId;
        }

        public DeliveryAddressInput setCustomerAddressId(ID customerAddressId) {
            this.customerAddressId = Input.optional(customerAddressId);
            return this;
        }

        public DeliveryAddressInput setCustomerAddressIdInput(Input<ID> customerAddressId) {
            if (customerAddressId == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.customerAddressId = customerAddressId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.deliveryAddress.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("deliveryAddress:");
                if (deliveryAddress.getValue() != null) {
                    deliveryAddress.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.oneTimeUse.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("oneTimeUse:");
                if (oneTimeUse.getValue() != null) {
                    _queryBuilder.append(oneTimeUse.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.deliveryAddressValidationStrategy.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("deliveryAddressValidationStrategy:");
                if (deliveryAddressValidationStrategy.getValue() != null) {
                    _queryBuilder.append(deliveryAddressValidationStrategy.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.customerAddressId.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customerAddressId:");
                if (customerAddressId.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, customerAddressId.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * Defines the types of available validation strategies for delivery addresses.
    */
    public enum DeliveryAddressValidationStrategy {
        /**
        * Only the country code is validated.
        */
        COUNTRY_CODE_ONLY,

        /**
        * Strict validation is performed, i.e. all fields in the address are validated
        * according to Shopify's checkout rules. If the address fails validation, the cart will not be
        * updated.
        */
        STRICT,

        UNKNOWN_VALUE;

        public static DeliveryAddressValidationStrategy fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "COUNTRY_CODE_ONLY": {
                    return COUNTRY_CODE_ONLY;
                }

                case "STRICT": {
                    return STRICT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case COUNTRY_CODE_ONLY: {
                    return "COUNTRY_CODE_ONLY";
                }

                case STRICT: {
                    return "STRICT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * List of different delivery method types.
    */
    public enum DeliveryMethodType {
        /**
        * Local Delivery.
        */
        LOCAL,

        /**
        * None.
        */
        NONE,

        /**
        * Shipping to a Pickup Point.
        */
        PICKUP_POINT,

        /**
        * Local Pickup.
        */
        PICK_UP,

        /**
        * Retail.
        */
        RETAIL,

        /**
        * Shipping.
        */
        SHIPPING,

        UNKNOWN_VALUE;

        public static DeliveryMethodType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "LOCAL": {
                    return LOCAL;
                }

                case "NONE": {
                    return NONE;
                }

                case "PICKUP_POINT": {
                    return PICKUP_POINT;
                }

                case "PICK_UP": {
                    return PICK_UP;
                }

                case "RETAIL": {
                    return RETAIL;
                }

                case "SHIPPING": {
                    return SHIPPING;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case LOCAL: {
                    return "LOCAL";
                }

                case NONE: {
                    return "NONE";
                }

                case PICKUP_POINT: {
                    return "PICKUP_POINT";
                }

                case PICK_UP: {
                    return "PICK_UP";
                }

                case RETAIL: {
                    return "RETAIL";
                }

                case SHIPPING: {
                    return "SHIPPING";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
    */
    public enum DigitalWallet {
        /**
        * Android Pay.
        */
        ANDROID_PAY,

        /**
        * Apple Pay.
        */
        APPLE_PAY,

        /**
        * Google Pay.
        */
        GOOGLE_PAY,

        /**
        * Shopify Pay.
        */
        SHOPIFY_PAY,

        UNKNOWN_VALUE;

        public static DigitalWallet fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ANDROID_PAY": {
                    return ANDROID_PAY;
                }

                case "APPLE_PAY": {
                    return APPLE_PAY;
                }

                case "GOOGLE_PAY": {
                    return GOOGLE_PAY;
                }

                case "SHOPIFY_PAY": {
                    return SHOPIFY_PAY;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ANDROID_PAY: {
                    return "ANDROID_PAY";
                }

                case APPLE_PAY: {
                    return "APPLE_PAY";
                }

                case GOOGLE_PAY: {
                    return "GOOGLE_PAY";
                }

                case SHOPIFY_PAY: {
                    return "SHOPIFY_PAY";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface DiscountAllocationQueryDefinition {
        void define(DiscountAllocationQuery _queryBuilder);
    }

    /**
    * An amount discounting the line that has been allocated by a discount.
    */
    public static class DiscountAllocationQuery extends Query<DiscountAllocationQuery> {
        DiscountAllocationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Amount of discount allocated.
        */
        public DiscountAllocationQuery allocatedAmount(MoneyV2QueryDefinition queryDef) {
            startField("allocatedAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The discount this allocated amount originated from.
        */
        public DiscountAllocationQuery discountApplication(DiscountApplicationQueryDefinition queryDef) {
            startField("discountApplication");

            _queryBuilder.append('{');
            queryDef.define(new DiscountApplicationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An amount discounting the line that has been allocated by a discount.
    */
    public static class DiscountAllocation extends AbstractResponse<DiscountAllocation> {
        public DiscountAllocation() {
        }

        public DiscountAllocation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "allocatedAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "discountApplication": {
                        responseData.put(key, UnknownDiscountApplication.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "DiscountAllocation";
        }

        /**
        * Amount of discount allocated.
        */

        public MoneyV2 getAllocatedAmount() {
            return (MoneyV2) get("allocatedAmount");
        }

        public DiscountAllocation setAllocatedAmount(MoneyV2 arg) {
            optimisticData.put(getKey("allocatedAmount"), arg);
            return this;
        }

        /**
        * The discount this allocated amount originated from.
        */

        public DiscountApplication getDiscountApplication() {
            return (DiscountApplication) get("discountApplication");
        }

        public DiscountAllocation setDiscountApplication(DiscountApplication arg) {
            optimisticData.put(getKey("discountApplication"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "allocatedAmount": return true;

                case "discountApplication": return false;

                default: return false;
            }
        }
    }

    public interface DiscountApplicationQueryDefinition {
        void define(DiscountApplicationQuery _queryBuilder);
    }

    /**
    * Discount applications capture the intentions of a discount source at
    * the time of application.
    */
    public static class DiscountApplicationQuery extends Query<DiscountApplicationQuery> {
        DiscountApplicationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */
        public DiscountApplicationQuery allocationMethod() {
            startField("allocationMethod");

            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */
        public DiscountApplicationQuery targetSelection() {
            startField("targetSelection");

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public DiscountApplicationQuery targetType() {
            startField("targetType");

            return this;
        }

        /**
        * The value of the discount application.
        */
        public DiscountApplicationQuery value(PricingValueQueryDefinition queryDef) {
            startField("value");

            _queryBuilder.append('{');
            queryDef.define(new PricingValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public DiscountApplicationQuery onAutomaticDiscountApplication(AutomaticDiscountApplicationQueryDefinition queryDef) {
            startInlineFragment("AutomaticDiscountApplication");
            queryDef.define(new AutomaticDiscountApplicationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public DiscountApplicationQuery onDiscountCodeApplication(DiscountCodeApplicationQueryDefinition queryDef) {
            startInlineFragment("DiscountCodeApplication");
            queryDef.define(new DiscountCodeApplicationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public DiscountApplicationQuery onManualDiscountApplication(ManualDiscountApplicationQueryDefinition queryDef) {
            startInlineFragment("ManualDiscountApplication");
            queryDef.define(new ManualDiscountApplicationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public DiscountApplicationQuery onScriptDiscountApplication(ScriptDiscountApplicationQueryDefinition queryDef) {
            startInlineFragment("ScriptDiscountApplication");
            queryDef.define(new ScriptDiscountApplicationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface DiscountApplication {
        String getGraphQlTypeName();

        DiscountApplicationAllocationMethod getAllocationMethod();

        DiscountApplicationTargetSelection getTargetSelection();

        DiscountApplicationTargetType getTargetType();

        PricingValue getValue();
    }

    /**
    * Discount applications capture the intentions of a discount source at
    * the time of application.
    */
    public static class UnknownDiscountApplication extends AbstractResponse<UnknownDiscountApplication> implements DiscountApplication {
        public UnknownDiscountApplication() {
        }

        public UnknownDiscountApplication(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "allocationMethod": {
                        responseData.put(key, DiscountApplicationAllocationMethod.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "targetSelection": {
                        responseData.put(key, DiscountApplicationTargetSelection.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "value": {
                        responseData.put(key, UnknownPricingValue.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static DiscountApplication create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "AutomaticDiscountApplication": {
                    return new AutomaticDiscountApplication(fields);
                }

                case "DiscountCodeApplication": {
                    return new DiscountCodeApplication(fields);
                }

                case "ManualDiscountApplication": {
                    return new ManualDiscountApplication(fields);
                }

                case "ScriptDiscountApplication": {
                    return new ScriptDiscountApplication(fields);
                }

                default: {
                    return new UnknownDiscountApplication(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */

        public DiscountApplicationAllocationMethod getAllocationMethod() {
            return (DiscountApplicationAllocationMethod) get("allocationMethod");
        }

        public UnknownDiscountApplication setAllocationMethod(DiscountApplicationAllocationMethod arg) {
            optimisticData.put(getKey("allocationMethod"), arg);
            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */

        public DiscountApplicationTargetSelection getTargetSelection() {
            return (DiscountApplicationTargetSelection) get("targetSelection");
        }

        public UnknownDiscountApplication setTargetSelection(DiscountApplicationTargetSelection arg) {
            optimisticData.put(getKey("targetSelection"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public UnknownDiscountApplication setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        /**
        * The value of the discount application.
        */

        public PricingValue getValue() {
            return (PricingValue) get("value");
        }

        public UnknownDiscountApplication setValue(PricingValue arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "allocationMethod": return false;

                case "targetSelection": return false;

                case "targetType": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    /**
    * The method by which the discount's value is allocated onto its entitled lines.
    */
    public enum DiscountApplicationAllocationMethod {
        /**
        * The value is spread across all entitled lines.
        */
        ACROSS,

        /**
        * The value is applied onto every entitled line.
        */
        EACH,

        /**
        * The value is specifically applied onto a particular line.
        *
        * @deprecated Use ACROSS instead.
        */
        @Deprecated
        ONE,

        UNKNOWN_VALUE;

        public static DiscountApplicationAllocationMethod fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ACROSS": {
                    return ACROSS;
                }

                case "EACH": {
                    return EACH;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ACROSS: {
                    return "ACROSS";
                }

                case EACH: {
                    return "EACH";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface DiscountApplicationConnectionQueryDefinition {
        void define(DiscountApplicationConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple DiscountApplications.
    */
    public static class DiscountApplicationConnectionQuery extends Query<DiscountApplicationConnectionQuery> {
        DiscountApplicationConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public DiscountApplicationConnectionQuery edges(DiscountApplicationEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new DiscountApplicationEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in DiscountApplicationEdge.
        */
        public DiscountApplicationConnectionQuery nodes(DiscountApplicationQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new DiscountApplicationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public DiscountApplicationConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple DiscountApplications.
    */
    public static class DiscountApplicationConnection extends AbstractResponse<DiscountApplicationConnection> {
        public DiscountApplicationConnection() {
        }

        public DiscountApplicationConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<DiscountApplicationEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new DiscountApplicationEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<DiscountApplication> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownDiscountApplication.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "DiscountApplicationConnection";
        }

        /**
        * A list of edges.
        */

        public List<DiscountApplicationEdge> getEdges() {
            return (List<DiscountApplicationEdge>) get("edges");
        }

        public DiscountApplicationConnection setEdges(List<DiscountApplicationEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in DiscountApplicationEdge.
        */

        public List<DiscountApplication> getNodes() {
            return (List<DiscountApplication>) get("nodes");
        }

        public DiscountApplicationConnection setNodes(List<DiscountApplication> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public DiscountApplicationConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return false;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface DiscountApplicationEdgeQueryDefinition {
        void define(DiscountApplicationEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one DiscountApplication and a cursor during pagination.
    */
    public static class DiscountApplicationEdgeQuery extends Query<DiscountApplicationEdgeQuery> {
        DiscountApplicationEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public DiscountApplicationEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of DiscountApplicationEdge.
        */
        public DiscountApplicationEdgeQuery node(DiscountApplicationQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new DiscountApplicationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one DiscountApplication and a cursor during pagination.
    */
    public static class DiscountApplicationEdge extends AbstractResponse<DiscountApplicationEdge> {
        public DiscountApplicationEdge() {
        }

        public DiscountApplicationEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, UnknownDiscountApplication.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "DiscountApplicationEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public DiscountApplicationEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of DiscountApplicationEdge.
        */

        public DiscountApplication getNode() {
            return (DiscountApplication) get("node");
        }

        public DiscountApplicationEdge setNode(DiscountApplication arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return false;

                default: return false;
            }
        }
    }

    /**
    * The lines on the order to which the discount is applied, of the type defined by
    * the discount application's `targetType`. For example, the value `ENTITLED`, combined with a
    * `targetType` of
    * `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
    * The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all
    * shipping lines.
    */
    public enum DiscountApplicationTargetSelection {
        /**
        * The discount is allocated onto all the lines.
        */
        ALL,

        /**
        * The discount is allocated onto only the lines that it's entitled for.
        */
        ENTITLED,

        /**
        * The discount is allocated onto explicitly chosen lines.
        */
        EXPLICIT,

        UNKNOWN_VALUE;

        public static DiscountApplicationTargetSelection fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ALL": {
                    return ALL;
                }

                case "ENTITLED": {
                    return ENTITLED;
                }

                case "EXPLICIT": {
                    return EXPLICIT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ALL: {
                    return "ALL";
                }

                case ENTITLED: {
                    return "ENTITLED";
                }

                case EXPLICIT: {
                    return "EXPLICIT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * The type of line (i.e. line item or shipping line) on an order that the discount is applicable
    * towards.
    */
    public enum DiscountApplicationTargetType {
        /**
        * The discount applies onto line items.
        */
        LINE_ITEM,

        /**
        * The discount applies onto shipping lines.
        */
        SHIPPING_LINE,

        UNKNOWN_VALUE;

        public static DiscountApplicationTargetType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "LINE_ITEM": {
                    return LINE_ITEM;
                }

                case "SHIPPING_LINE": {
                    return SHIPPING_LINE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case LINE_ITEM: {
                    return "LINE_ITEM";
                }

                case SHIPPING_LINE: {
                    return "SHIPPING_LINE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface DiscountCodeApplicationQueryDefinition {
        void define(DiscountCodeApplicationQuery _queryBuilder);
    }

    /**
    * Discount code applications capture the intentions of a discount code at
    * the time that it is applied.
    */
    public static class DiscountCodeApplicationQuery extends Query<DiscountCodeApplicationQuery> {
        DiscountCodeApplicationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */
        public DiscountCodeApplicationQuery allocationMethod() {
            startField("allocationMethod");

            return this;
        }

        /**
        * Specifies whether the discount code was applied successfully.
        */
        public DiscountCodeApplicationQuery applicable() {
            startField("applicable");

            return this;
        }

        /**
        * The string identifying the discount code that was used at the time of application.
        */
        public DiscountCodeApplicationQuery code() {
            startField("code");

            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */
        public DiscountCodeApplicationQuery targetSelection() {
            startField("targetSelection");

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public DiscountCodeApplicationQuery targetType() {
            startField("targetType");

            return this;
        }

        /**
        * The value of the discount application.
        */
        public DiscountCodeApplicationQuery value(PricingValueQueryDefinition queryDef) {
            startField("value");

            _queryBuilder.append('{');
            queryDef.define(new PricingValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Discount code applications capture the intentions of a discount code at
    * the time that it is applied.
    */
    public static class DiscountCodeApplication extends AbstractResponse<DiscountCodeApplication> implements DiscountApplication {
        public DiscountCodeApplication() {
        }

        public DiscountCodeApplication(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "allocationMethod": {
                        responseData.put(key, DiscountApplicationAllocationMethod.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "applicable": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "code": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "targetSelection": {
                        responseData.put(key, DiscountApplicationTargetSelection.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "value": {
                        responseData.put(key, UnknownPricingValue.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "DiscountCodeApplication";
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */

        public DiscountApplicationAllocationMethod getAllocationMethod() {
            return (DiscountApplicationAllocationMethod) get("allocationMethod");
        }

        public DiscountCodeApplication setAllocationMethod(DiscountApplicationAllocationMethod arg) {
            optimisticData.put(getKey("allocationMethod"), arg);
            return this;
        }

        /**
        * Specifies whether the discount code was applied successfully.
        */

        public Boolean getApplicable() {
            return (Boolean) get("applicable");
        }

        public DiscountCodeApplication setApplicable(Boolean arg) {
            optimisticData.put(getKey("applicable"), arg);
            return this;
        }

        /**
        * The string identifying the discount code that was used at the time of application.
        */

        public String getCode() {
            return (String) get("code");
        }

        public DiscountCodeApplication setCode(String arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */

        public DiscountApplicationTargetSelection getTargetSelection() {
            return (DiscountApplicationTargetSelection) get("targetSelection");
        }

        public DiscountCodeApplication setTargetSelection(DiscountApplicationTargetSelection arg) {
            optimisticData.put(getKey("targetSelection"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public DiscountCodeApplication setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        /**
        * The value of the discount application.
        */

        public PricingValue getValue() {
            return (PricingValue) get("value");
        }

        public DiscountCodeApplication setValue(PricingValue arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "allocationMethod": return false;

                case "applicable": return false;

                case "code": return false;

                case "targetSelection": return false;

                case "targetType": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    public interface DisplayableErrorQueryDefinition {
        void define(DisplayableErrorQuery _queryBuilder);
    }

    /**
    * Represents an error in the input of a mutation.
    */
    public static class DisplayableErrorQuery extends Query<DisplayableErrorQuery> {
        DisplayableErrorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        /**
        * The path to the input field that caused the error.
        */
        public DisplayableErrorQuery field() {
            startField("field");

            return this;
        }

        /**
        * The error message.
        */
        public DisplayableErrorQuery message() {
            startField("message");

            return this;
        }

        public DisplayableErrorQuery onCartUserError(CartUserErrorQueryDefinition queryDef) {
            startInlineFragment("CartUserError");
            queryDef.define(new CartUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public DisplayableErrorQuery onCustomerUserError(CustomerUserErrorQueryDefinition queryDef) {
            startInlineFragment("CustomerUserError");
            queryDef.define(new CustomerUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public DisplayableErrorQuery onMetafieldDeleteUserError(MetafieldDeleteUserErrorQueryDefinition queryDef) {
            startInlineFragment("MetafieldDeleteUserError");
            queryDef.define(new MetafieldDeleteUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public DisplayableErrorQuery onMetafieldsSetUserError(MetafieldsSetUserErrorQueryDefinition queryDef) {
            startInlineFragment("MetafieldsSetUserError");
            queryDef.define(new MetafieldsSetUserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public DisplayableErrorQuery onUserError(UserErrorQueryDefinition queryDef) {
            startInlineFragment("UserError");
            queryDef.define(new UserErrorQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public DisplayableErrorQuery onUserErrorsShopPayPaymentRequestSessionUserErrors(UserErrorsShopPayPaymentRequestSessionUserErrorsQueryDefinition queryDef) {
            startInlineFragment("UserErrorsShopPayPaymentRequestSessionUserErrors");
            queryDef.define(new UserErrorsShopPayPaymentRequestSessionUserErrorsQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface DisplayableError {
        String getGraphQlTypeName();

        List<String> getField();

        String getMessage();
    }

    /**
    * Represents an error in the input of a mutation.
    */
    public static class UnknownDisplayableError extends AbstractResponse<UnknownDisplayableError> implements DisplayableError {
        public UnknownDisplayableError() {
        }

        public UnknownDisplayableError(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "field": {
                        List<String> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<String> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(jsonAsString(element1, key));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "message": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static DisplayableError create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "CartUserError": {
                    return new CartUserError(fields);
                }

                case "CustomerUserError": {
                    return new CustomerUserError(fields);
                }

                case "MetafieldDeleteUserError": {
                    return new MetafieldDeleteUserError(fields);
                }

                case "MetafieldsSetUserError": {
                    return new MetafieldsSetUserError(fields);
                }

                case "UserError": {
                    return new UserError(fields);
                }

                case "UserErrorsShopPayPaymentRequestSessionUserErrors": {
                    return new UserErrorsShopPayPaymentRequestSessionUserErrors(fields);
                }

                default: {
                    return new UnknownDisplayableError(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * The path to the input field that caused the error.
        */

        public List<String> getField() {
            return (List<String>) get("field");
        }

        public UnknownDisplayableError setField(List<String> arg) {
            optimisticData.put(getKey("field"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public UnknownDisplayableError setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "field": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    public interface DomainQueryDefinition {
        void define(DomainQuery _queryBuilder);
    }

    /**
    * Represents a web address.
    */
    public static class DomainQuery extends Query<DomainQuery> {
        DomainQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The host name of the domain (eg: `example.com`).
        */
        public DomainQuery host() {
            startField("host");

            return this;
        }

        /**
        * Whether SSL is enabled or not.
        */
        public DomainQuery sslEnabled() {
            startField("sslEnabled");

            return this;
        }

        /**
        * The URL of the domain (eg: `https://example.com`).
        */
        public DomainQuery url() {
            startField("url");

            return this;
        }
    }

    /**
    * Represents a web address.
    */
    public static class Domain extends AbstractResponse<Domain> {
        public Domain() {
        }

        public Domain(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "host": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "sslEnabled": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "url": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Domain";
        }

        /**
        * The host name of the domain (eg: `example.com`).
        */

        public String getHost() {
            return (String) get("host");
        }

        public Domain setHost(String arg) {
            optimisticData.put(getKey("host"), arg);
            return this;
        }

        /**
        * Whether SSL is enabled or not.
        */

        public Boolean getSslEnabled() {
            return (Boolean) get("sslEnabled");
        }

        public Domain setSslEnabled(Boolean arg) {
            optimisticData.put(getKey("sslEnabled"), arg);
            return this;
        }

        /**
        * The URL of the domain (eg: `https://example.com`).
        */

        public String getUrl() {
            return (String) get("url");
        }

        public Domain setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "host": return false;

                case "sslEnabled": return false;

                case "url": return false;

                default: return false;
            }
        }
    }

    public interface ExternalVideoQueryDefinition {
        void define(ExternalVideoQuery _queryBuilder);
    }

    /**
    * Represents a video hosted outside of Shopify.
    */
    public static class ExternalVideoQuery extends Query<ExternalVideoQuery> {
        ExternalVideoQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */
        public ExternalVideoQuery alt() {
            startField("alt");

            return this;
        }

        /**
        * The embed URL of the video for the respective host.
        */
        public ExternalVideoQuery embedUrl() {
            startField("embedUrl");

            return this;
        }

        /**
        * The URL.
        *
        * @deprecated Use `originUrl` instead.
        */
        @Deprecated
        public ExternalVideoQuery embeddedUrl() {
            startField("embeddedUrl");

            return this;
        }

        /**
        * The host of the external video.
        */
        public ExternalVideoQuery host() {
            startField("host");

            return this;
        }

        /**
        * The media content type.
        */
        public ExternalVideoQuery mediaContentType() {
            startField("mediaContentType");

            return this;
        }

        /**
        * The origin URL of the video on the respective host.
        */
        public ExternalVideoQuery originUrl() {
            startField("originUrl");

            return this;
        }

        /**
        * The presentation for a media.
        */
        public ExternalVideoQuery presentation(MediaPresentationQueryDefinition queryDef) {
            startField("presentation");

            _queryBuilder.append('{');
            queryDef.define(new MediaPresentationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The preview image for the media.
        */
        public ExternalVideoQuery previewImage(ImageQueryDefinition queryDef) {
            startField("previewImage");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a video hosted outside of Shopify.
    */
    public static class ExternalVideo extends AbstractResponse<ExternalVideo> implements Media, Node {
        public ExternalVideo() {
        }

        public ExternalVideo(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "alt": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "embedUrl": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "embeddedUrl": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "host": {
                        responseData.put(key, MediaHost.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "mediaContentType": {
                        responseData.put(key, MediaContentType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "originUrl": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "presentation": {
                        MediaPresentation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaPresentation(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "previewImage": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public ExternalVideo(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "ExternalVideo";
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */

        public String getAlt() {
            return (String) get("alt");
        }

        public ExternalVideo setAlt(String arg) {
            optimisticData.put(getKey("alt"), arg);
            return this;
        }

        /**
        * The embed URL of the video for the respective host.
        */

        public String getEmbedUrl() {
            return (String) get("embedUrl");
        }

        public ExternalVideo setEmbedUrl(String arg) {
            optimisticData.put(getKey("embedUrl"), arg);
            return this;
        }

        /**
        * The URL.
        *
        * @deprecated Use `originUrl` instead.
        */

        public String getEmbeddedUrl() {
            return (String) get("embeddedUrl");
        }

        public ExternalVideo setEmbeddedUrl(String arg) {
            optimisticData.put(getKey("embeddedUrl"), arg);
            return this;
        }

        /**
        * The host of the external video.
        */

        public MediaHost getHost() {
            return (MediaHost) get("host");
        }

        public ExternalVideo setHost(MediaHost arg) {
            optimisticData.put(getKey("host"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The media content type.
        */

        public MediaContentType getMediaContentType() {
            return (MediaContentType) get("mediaContentType");
        }

        public ExternalVideo setMediaContentType(MediaContentType arg) {
            optimisticData.put(getKey("mediaContentType"), arg);
            return this;
        }

        /**
        * The origin URL of the video on the respective host.
        */

        public String getOriginUrl() {
            return (String) get("originUrl");
        }

        public ExternalVideo setOriginUrl(String arg) {
            optimisticData.put(getKey("originUrl"), arg);
            return this;
        }

        /**
        * The presentation for a media.
        */

        public MediaPresentation getPresentation() {
            return (MediaPresentation) get("presentation");
        }

        public ExternalVideo setPresentation(MediaPresentation arg) {
            optimisticData.put(getKey("presentation"), arg);
            return this;
        }

        /**
        * The preview image for the media.
        */

        public Image getPreviewImage() {
            return (Image) get("previewImage");
        }

        public ExternalVideo setPreviewImage(Image arg) {
            optimisticData.put(getKey("previewImage"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "alt": return false;

                case "embedUrl": return false;

                case "embeddedUrl": return false;

                case "host": return false;

                case "id": return false;

                case "mediaContentType": return false;

                case "originUrl": return false;

                case "presentation": return true;

                case "previewImage": return true;

                default: return false;
            }
        }
    }

    public interface FilterQueryDefinition {
        void define(FilterQuery _queryBuilder);
    }

    /**
    * A filter that is supported on the parent field.
    */
    public static class FilterQuery extends Query<FilterQuery> {
        FilterQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A unique identifier.
        */
        public FilterQuery id() {
            startField("id");

            return this;
        }

        /**
        * A human-friendly string for this filter.
        */
        public FilterQuery label() {
            startField("label");

            return this;
        }

        /**
        * Describes how to present the filter values.
        * Returns a value only for filters of type `LIST`. Returns null for other types.
        */
        public FilterQuery presentation() {
            startField("presentation");

            return this;
        }

        /**
        * An enumeration that denotes the type of data this filter represents.
        */
        public FilterQuery type() {
            startField("type");

            return this;
        }

        /**
        * The list of values for this filter.
        */
        public FilterQuery values(FilterValueQueryDefinition queryDef) {
            startField("values");

            _queryBuilder.append('{');
            queryDef.define(new FilterValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * A filter that is supported on the parent field.
    */
    public static class Filter extends AbstractResponse<Filter> {
        public Filter() {
        }

        public Filter(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "label": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "presentation": {
                        FilterPresentation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = FilterPresentation.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "type": {
                        responseData.put(key, FilterType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "values": {
                        List<FilterValue> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new FilterValue(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Filter";
        }

        /**
        * A unique identifier.
        */

        public String getId() {
            return (String) get("id");
        }

        public Filter setId(String arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * A human-friendly string for this filter.
        */

        public String getLabel() {
            return (String) get("label");
        }

        public Filter setLabel(String arg) {
            optimisticData.put(getKey("label"), arg);
            return this;
        }

        /**
        * Describes how to present the filter values.
        * Returns a value only for filters of type `LIST`. Returns null for other types.
        */

        public FilterPresentation getPresentation() {
            return (FilterPresentation) get("presentation");
        }

        public Filter setPresentation(FilterPresentation arg) {
            optimisticData.put(getKey("presentation"), arg);
            return this;
        }

        /**
        * An enumeration that denotes the type of data this filter represents.
        */

        public FilterType getType() {
            return (FilterType) get("type");
        }

        public Filter setType(FilterType arg) {
            optimisticData.put(getKey("type"), arg);
            return this;
        }

        /**
        * The list of values for this filter.
        */

        public List<FilterValue> getValues() {
            return (List<FilterValue>) get("values");
        }

        public Filter setValues(List<FilterValue> arg) {
            optimisticData.put(getKey("values"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "id": return false;

                case "label": return false;

                case "presentation": return false;

                case "type": return false;

                case "values": return true;

                default: return false;
            }
        }
    }

    /**
    * Defines how to present the filter values, specifies the presentation of the filter.
    */
    public enum FilterPresentation {
        /**
        * Image presentation, filter values display an image.
        */
        IMAGE,

        /**
        * Swatch presentation, filter values display color or image patterns.
        */
        SWATCH,

        /**
        * Text presentation, no additional visual display for filter values.
        */
        TEXT,

        UNKNOWN_VALUE;

        public static FilterPresentation fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "IMAGE": {
                    return IMAGE;
                }

                case "SWATCH": {
                    return SWATCH;
                }

                case "TEXT": {
                    return TEXT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case IMAGE: {
                    return "IMAGE";
                }

                case SWATCH: {
                    return "SWATCH";
                }

                case TEXT: {
                    return "TEXT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * The type of data that the filter group represents.
    * For more information, refer to [Filter products in a collection with the Storefront API]
    * (https://shopify.dev/custom-storefronts/products-collections/filter-products).
    */
    public enum FilterType {
        /**
        * A boolean value.
        */
        BOOLEAN,

        /**
        * A list of selectable values.
        */
        LIST,

        /**
        * A range of prices.
        */
        PRICE_RANGE,

        UNKNOWN_VALUE;

        public static FilterType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "BOOLEAN": {
                    return BOOLEAN;
                }

                case "LIST": {
                    return LIST;
                }

                case "PRICE_RANGE": {
                    return PRICE_RANGE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case BOOLEAN: {
                    return "BOOLEAN";
                }

                case LIST: {
                    return "LIST";
                }

                case PRICE_RANGE: {
                    return "PRICE_RANGE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface FilterValueQueryDefinition {
        void define(FilterValueQuery _queryBuilder);
    }

    /**
    * A selectable value within a filter.
    */
    public static class FilterValueQuery extends Query<FilterValueQuery> {
        FilterValueQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The number of results that match this filter value.
        */
        public FilterValueQuery count() {
            startField("count");

            return this;
        }

        /**
        * A unique identifier.
        */
        public FilterValueQuery id() {
            startField("id");

            return this;
        }

        /**
        * The visual representation when the filter's presentation is `IMAGE`.
        */
        public FilterValueQuery image(MediaImageQueryDefinition queryDef) {
            startField("image");

            _queryBuilder.append('{');
            queryDef.define(new MediaImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * An input object that can be used to filter by this value on the parent field.
        * The value is provided as a helper for building dynamic filtering UI. For
        * example, if you have a list of selected `FilterValue` objects, you can combine
        * their respective `input` values to use in a subsequent query.
        */
        public FilterValueQuery input() {
            startField("input");

            return this;
        }

        /**
        * A human-friendly string for this filter value.
        */
        public FilterValueQuery label() {
            startField("label");

            return this;
        }

        /**
        * The visual representation when the filter's presentation is `SWATCH`.
        */
        public FilterValueQuery swatch(SwatchQueryDefinition queryDef) {
            startField("swatch");

            _queryBuilder.append('{');
            queryDef.define(new SwatchQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * A selectable value within a filter.
    */
    public static class FilterValue extends AbstractResponse<FilterValue> {
        public FilterValue() {
        }

        public FilterValue(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "count": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "image": {
                        MediaImage optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaImage(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "input": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "label": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "swatch": {
                        Swatch optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Swatch(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "FilterValue";
        }

        /**
        * The number of results that match this filter value.
        */

        public Integer getCount() {
            return (Integer) get("count");
        }

        public FilterValue setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        /**
        * A unique identifier.
        */

        public String getId() {
            return (String) get("id");
        }

        public FilterValue setId(String arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The visual representation when the filter's presentation is `IMAGE`.
        */

        public MediaImage getImage() {
            return (MediaImage) get("image");
        }

        public FilterValue setImage(MediaImage arg) {
            optimisticData.put(getKey("image"), arg);
            return this;
        }

        /**
        * An input object that can be used to filter by this value on the parent field.
        * The value is provided as a helper for building dynamic filtering UI. For
        * example, if you have a list of selected `FilterValue` objects, you can combine
        * their respective `input` values to use in a subsequent query.
        */

        public String getInput() {
            return (String) get("input");
        }

        public FilterValue setInput(String arg) {
            optimisticData.put(getKey("input"), arg);
            return this;
        }

        /**
        * A human-friendly string for this filter value.
        */

        public String getLabel() {
            return (String) get("label");
        }

        public FilterValue setLabel(String arg) {
            optimisticData.put(getKey("label"), arg);
            return this;
        }

        /**
        * The visual representation when the filter's presentation is `SWATCH`.
        */

        public Swatch getSwatch() {
            return (Swatch) get("swatch");
        }

        public FilterValue setSwatch(Swatch arg) {
            optimisticData.put(getKey("swatch"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "count": return false;

                case "id": return false;

                case "image": return true;

                case "input": return false;

                case "label": return false;

                case "swatch": return true;

                default: return false;
            }
        }
    }

    public interface FulfillmentQueryDefinition {
        void define(FulfillmentQuery _queryBuilder);
    }

    /**
    * Represents a single fulfillment in an order.
    */
    public static class FulfillmentQuery extends Query<FulfillmentQuery> {
        FulfillmentQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public class FulfillmentLineItemsArguments extends Arguments {
            FulfillmentLineItemsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public FulfillmentLineItemsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public FulfillmentLineItemsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public FulfillmentLineItemsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public FulfillmentLineItemsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public FulfillmentLineItemsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface FulfillmentLineItemsArgumentsDefinition {
            void define(FulfillmentLineItemsArguments args);
        }

        /**
        * List of the fulfillment's line items.
        */
        public FulfillmentQuery fulfillmentLineItems(FulfillmentLineItemConnectionQueryDefinition queryDef) {
            return fulfillmentLineItems(args -> {}, queryDef);
        }

        /**
        * List of the fulfillment's line items.
        */
        public FulfillmentQuery fulfillmentLineItems(FulfillmentLineItemsArgumentsDefinition argsDef, FulfillmentLineItemConnectionQueryDefinition queryDef) {
            startField("fulfillmentLineItems");

            FulfillmentLineItemsArguments args = new FulfillmentLineItemsArguments(_queryBuilder);
            argsDef.define(args);
            FulfillmentLineItemsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new FulfillmentLineItemConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The name of the tracking company.
        */
        public FulfillmentQuery trackingCompany() {
            startField("trackingCompany");

            return this;
        }

        public class TrackingInfoArguments extends Arguments {
            TrackingInfoArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Truncate the array result to this size.
            */
            public TrackingInfoArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface TrackingInfoArgumentsDefinition {
            void define(TrackingInfoArguments args);
        }

        /**
        * Tracking information associated with the fulfillment,
        * such as the tracking number and tracking URL.
        */
        public FulfillmentQuery trackingInfo(FulfillmentTrackingInfoQueryDefinition queryDef) {
            return trackingInfo(args -> {}, queryDef);
        }

        /**
        * Tracking information associated with the fulfillment,
        * such as the tracking number and tracking URL.
        */
        public FulfillmentQuery trackingInfo(TrackingInfoArgumentsDefinition argsDef, FulfillmentTrackingInfoQueryDefinition queryDef) {
            startField("trackingInfo");

            TrackingInfoArguments args = new TrackingInfoArguments(_queryBuilder);
            argsDef.define(args);
            TrackingInfoArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new FulfillmentTrackingInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a single fulfillment in an order.
    */
    public static class Fulfillment extends AbstractResponse<Fulfillment> {
        public Fulfillment() {
        }

        public Fulfillment(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "fulfillmentLineItems": {
                        responseData.put(key, new FulfillmentLineItemConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "trackingCompany": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "trackingInfo": {
                        List<FulfillmentTrackingInfo> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new FulfillmentTrackingInfo(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Fulfillment";
        }

        /**
        * List of the fulfillment's line items.
        */

        public FulfillmentLineItemConnection getFulfillmentLineItems() {
            return (FulfillmentLineItemConnection) get("fulfillmentLineItems");
        }

        public Fulfillment setFulfillmentLineItems(FulfillmentLineItemConnection arg) {
            optimisticData.put(getKey("fulfillmentLineItems"), arg);
            return this;
        }

        /**
        * The name of the tracking company.
        */

        public String getTrackingCompany() {
            return (String) get("trackingCompany");
        }

        public Fulfillment setTrackingCompany(String arg) {
            optimisticData.put(getKey("trackingCompany"), arg);
            return this;
        }

        /**
        * Tracking information associated with the fulfillment,
        * such as the tracking number and tracking URL.
        */

        public List<FulfillmentTrackingInfo> getTrackingInfo() {
            return (List<FulfillmentTrackingInfo>) get("trackingInfo");
        }

        public Fulfillment setTrackingInfo(List<FulfillmentTrackingInfo> arg) {
            optimisticData.put(getKey("trackingInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "fulfillmentLineItems": return true;

                case "trackingCompany": return false;

                case "trackingInfo": return true;

                default: return false;
            }
        }
    }

    public interface FulfillmentLineItemQueryDefinition {
        void define(FulfillmentLineItemQuery _queryBuilder);
    }

    /**
    * Represents a single line item in a fulfillment. There is at most one fulfillment line item for each
    * order line item.
    */
    public static class FulfillmentLineItemQuery extends Query<FulfillmentLineItemQuery> {
        FulfillmentLineItemQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The associated order's line item.
        */
        public FulfillmentLineItemQuery lineItem(OrderLineItemQueryDefinition queryDef) {
            startField("lineItem");

            _queryBuilder.append('{');
            queryDef.define(new OrderLineItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The amount fulfilled in this fulfillment.
        */
        public FulfillmentLineItemQuery quantity() {
            startField("quantity");

            return this;
        }
    }

    /**
    * Represents a single line item in a fulfillment. There is at most one fulfillment line item for each
    * order line item.
    */
    public static class FulfillmentLineItem extends AbstractResponse<FulfillmentLineItem> {
        public FulfillmentLineItem() {
        }

        public FulfillmentLineItem(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "lineItem": {
                        responseData.put(key, new OrderLineItem(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "quantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "FulfillmentLineItem";
        }

        /**
        * The associated order's line item.
        */

        public OrderLineItem getLineItem() {
            return (OrderLineItem) get("lineItem");
        }

        public FulfillmentLineItem setLineItem(OrderLineItem arg) {
            optimisticData.put(getKey("lineItem"), arg);
            return this;
        }

        /**
        * The amount fulfilled in this fulfillment.
        */

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public FulfillmentLineItem setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "lineItem": return true;

                case "quantity": return false;

                default: return false;
            }
        }
    }

    public interface FulfillmentLineItemConnectionQueryDefinition {
        void define(FulfillmentLineItemConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple FulfillmentLineItems.
    */
    public static class FulfillmentLineItemConnectionQuery extends Query<FulfillmentLineItemConnectionQuery> {
        FulfillmentLineItemConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public FulfillmentLineItemConnectionQuery edges(FulfillmentLineItemEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new FulfillmentLineItemEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in FulfillmentLineItemEdge.
        */
        public FulfillmentLineItemConnectionQuery nodes(FulfillmentLineItemQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new FulfillmentLineItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public FulfillmentLineItemConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple FulfillmentLineItems.
    */
    public static class FulfillmentLineItemConnection extends AbstractResponse<FulfillmentLineItemConnection> {
        public FulfillmentLineItemConnection() {
        }

        public FulfillmentLineItemConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<FulfillmentLineItemEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new FulfillmentLineItemEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<FulfillmentLineItem> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new FulfillmentLineItem(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "FulfillmentLineItemConnection";
        }

        /**
        * A list of edges.
        */

        public List<FulfillmentLineItemEdge> getEdges() {
            return (List<FulfillmentLineItemEdge>) get("edges");
        }

        public FulfillmentLineItemConnection setEdges(List<FulfillmentLineItemEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in FulfillmentLineItemEdge.
        */

        public List<FulfillmentLineItem> getNodes() {
            return (List<FulfillmentLineItem>) get("nodes");
        }

        public FulfillmentLineItemConnection setNodes(List<FulfillmentLineItem> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public FulfillmentLineItemConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface FulfillmentLineItemEdgeQueryDefinition {
        void define(FulfillmentLineItemEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
    */
    public static class FulfillmentLineItemEdgeQuery extends Query<FulfillmentLineItemEdgeQuery> {
        FulfillmentLineItemEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public FulfillmentLineItemEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of FulfillmentLineItemEdge.
        */
        public FulfillmentLineItemEdgeQuery node(FulfillmentLineItemQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new FulfillmentLineItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
    */
    public static class FulfillmentLineItemEdge extends AbstractResponse<FulfillmentLineItemEdge> {
        public FulfillmentLineItemEdge() {
        }

        public FulfillmentLineItemEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new FulfillmentLineItem(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "FulfillmentLineItemEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public FulfillmentLineItemEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of FulfillmentLineItemEdge.
        */

        public FulfillmentLineItem getNode() {
            return (FulfillmentLineItem) get("node");
        }

        public FulfillmentLineItemEdge setNode(FulfillmentLineItem arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface FulfillmentTrackingInfoQueryDefinition {
        void define(FulfillmentTrackingInfoQuery _queryBuilder);
    }

    /**
    * Tracking information associated with the fulfillment.
    */
    public static class FulfillmentTrackingInfoQuery extends Query<FulfillmentTrackingInfoQuery> {
        FulfillmentTrackingInfoQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The tracking number of the fulfillment.
        */
        public FulfillmentTrackingInfoQuery number() {
            startField("number");

            return this;
        }

        /**
        * The URL to track the fulfillment.
        */
        public FulfillmentTrackingInfoQuery url() {
            startField("url");

            return this;
        }
    }

    /**
    * Tracking information associated with the fulfillment.
    */
    public static class FulfillmentTrackingInfo extends AbstractResponse<FulfillmentTrackingInfo> {
        public FulfillmentTrackingInfo() {
        }

        public FulfillmentTrackingInfo(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "number": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "url": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "FulfillmentTrackingInfo";
        }

        /**
        * The tracking number of the fulfillment.
        */

        public String getNumber() {
            return (String) get("number");
        }

        public FulfillmentTrackingInfo setNumber(String arg) {
            optimisticData.put(getKey("number"), arg);
            return this;
        }

        /**
        * The URL to track the fulfillment.
        */

        public String getUrl() {
            return (String) get("url");
        }

        public FulfillmentTrackingInfo setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "number": return false;

                case "url": return false;

                default: return false;
            }
        }
    }

    public interface GenericFileQueryDefinition {
        void define(GenericFileQuery _queryBuilder);
    }

    /**
    * The generic file resource lets you manage files in a merchant’s store. Generic files include any
    * file that doesn’t fit into a designated type such as image or video. Example: PDF, JSON.
    */
    public static class GenericFileQuery extends Query<GenericFileQuery> {
        GenericFileQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * A word or phrase to indicate the contents of a file.
        */
        public GenericFileQuery alt() {
            startField("alt");

            return this;
        }

        /**
        * The MIME type of the file.
        */
        public GenericFileQuery mimeType() {
            startField("mimeType");

            return this;
        }

        /**
        * The size of the original file in bytes.
        */
        public GenericFileQuery originalFileSize() {
            startField("originalFileSize");

            return this;
        }

        /**
        * The preview image for the file.
        */
        public GenericFileQuery previewImage(ImageQueryDefinition queryDef) {
            startField("previewImage");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The URL of the file.
        */
        public GenericFileQuery url() {
            startField("url");

            return this;
        }
    }

    /**
    * The generic file resource lets you manage files in a merchant’s store. Generic files include any
    * file that doesn’t fit into a designated type such as image or video. Example: PDF, JSON.
    */
    public static class GenericFile extends AbstractResponse<GenericFile> implements MetafieldReference, Node {
        public GenericFile() {
        }

        public GenericFile(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "alt": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "mimeType": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "originalFileSize": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "previewImage": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "url": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public GenericFile(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "GenericFile";
        }

        /**
        * A word or phrase to indicate the contents of a file.
        */

        public String getAlt() {
            return (String) get("alt");
        }

        public GenericFile setAlt(String arg) {
            optimisticData.put(getKey("alt"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The MIME type of the file.
        */

        public String getMimeType() {
            return (String) get("mimeType");
        }

        public GenericFile setMimeType(String arg) {
            optimisticData.put(getKey("mimeType"), arg);
            return this;
        }

        /**
        * The size of the original file in bytes.
        */

        public Integer getOriginalFileSize() {
            return (Integer) get("originalFileSize");
        }

        public GenericFile setOriginalFileSize(Integer arg) {
            optimisticData.put(getKey("originalFileSize"), arg);
            return this;
        }

        /**
        * The preview image for the file.
        */

        public Image getPreviewImage() {
            return (Image) get("previewImage");
        }

        public GenericFile setPreviewImage(Image arg) {
            optimisticData.put(getKey("previewImage"), arg);
            return this;
        }

        /**
        * The URL of the file.
        */

        public String getUrl() {
            return (String) get("url");
        }

        public GenericFile setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "alt": return false;

                case "id": return false;

                case "mimeType": return false;

                case "originalFileSize": return false;

                case "previewImage": return true;

                case "url": return false;

                default: return false;
            }
        }
    }

    public static class GeoCoordinateInput implements Serializable {
        private double latitude;

        private double longitude;

        public GeoCoordinateInput(double latitude, double longitude) {
            this.latitude = latitude;

            this.longitude = longitude;
        }

        public double getLatitude() {
            return latitude;
        }

        public GeoCoordinateInput setLatitude(double latitude) {
            this.latitude = latitude;
            return this;
        }

        public double getLongitude() {
            return longitude;
        }

        public GeoCoordinateInput setLongitude(double longitude) {
            this.longitude = longitude;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("latitude:");
            _queryBuilder.append(latitude);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("longitude:");
            _queryBuilder.append(longitude);

            _queryBuilder.append('}');
        }
    }

    public interface HasMetafieldsQueryDefinition {
        void define(HasMetafieldsQuery _queryBuilder);
    }

    /**
    * Represents information about the metafields associated to the specified resource.
    */
    public static class HasMetafieldsQuery extends Query<HasMetafieldsQuery> {
        HasMetafieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public HasMetafieldsQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public HasMetafieldsQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public HasMetafieldsQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public HasMetafieldsQuery onArticle(ArticleQueryDefinition queryDef) {
            startInlineFragment("Article");
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onBlog(BlogQueryDefinition queryDef) {
            startInlineFragment("Blog");
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onCart(CartQueryDefinition queryDef) {
            startInlineFragment("Cart");
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onCollection(CollectionQueryDefinition queryDef) {
            startInlineFragment("Collection");
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onCompany(CompanyQueryDefinition queryDef) {
            startInlineFragment("Company");
            queryDef.define(new CompanyQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onCompanyLocation(CompanyLocationQueryDefinition queryDef) {
            startInlineFragment("CompanyLocation");
            queryDef.define(new CompanyLocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onCustomer(CustomerQueryDefinition queryDef) {
            startInlineFragment("Customer");
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onLocation(LocationQueryDefinition queryDef) {
            startInlineFragment("Location");
            queryDef.define(new LocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onMarket(MarketQueryDefinition queryDef) {
            startInlineFragment("Market");
            queryDef.define(new MarketQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onOrder(OrderQueryDefinition queryDef) {
            startInlineFragment("Order");
            queryDef.define(new OrderQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onPage(PageQueryDefinition queryDef) {
            startInlineFragment("Page");
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onProduct(ProductQueryDefinition queryDef) {
            startInlineFragment("Product");
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onProductVariant(ProductVariantQueryDefinition queryDef) {
            startInlineFragment("ProductVariant");
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onSellingPlan(SellingPlanQueryDefinition queryDef) {
            startInlineFragment("SellingPlan");
            queryDef.define(new SellingPlanQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public HasMetafieldsQuery onShop(ShopQueryDefinition queryDef) {
            startInlineFragment("Shop");
            queryDef.define(new ShopQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface HasMetafields {
        String getGraphQlTypeName();

        Metafield getMetafield();

        List<Metafield> getMetafields();
    }

    /**
    * Represents information about the metafields associated to the specified resource.
    */
    public static class UnknownHasMetafields extends AbstractResponse<UnknownHasMetafields> implements HasMetafields {
        public UnknownHasMetafields() {
        }

        public UnknownHasMetafields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static HasMetafields create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "Article": {
                    return new Article(fields);
                }

                case "Blog": {
                    return new Blog(fields);
                }

                case "Cart": {
                    return new Cart(fields);
                }

                case "Collection": {
                    return new Collection(fields);
                }

                case "Company": {
                    return new Company(fields);
                }

                case "CompanyLocation": {
                    return new CompanyLocation(fields);
                }

                case "Customer": {
                    return new Customer(fields);
                }

                case "Location": {
                    return new Location(fields);
                }

                case "Market": {
                    return new Market(fields);
                }

                case "Order": {
                    return new Order(fields);
                }

                case "Page": {
                    return new Page(fields);
                }

                case "Product": {
                    return new Product(fields);
                }

                case "ProductVariant": {
                    return new ProductVariant(fields);
                }

                case "SellingPlan": {
                    return new SellingPlan(fields);
                }

                case "Shop": {
                    return new Shop(fields);
                }

                default: {
                    return new UnknownHasMetafields(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public UnknownHasMetafields setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public UnknownHasMetafields setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "metafield": return true;

                case "metafields": return true;

                default: return false;
            }
        }
    }

    public static class HasMetafieldsIdentifier implements Serializable {
        private String key;

        private Input<String> namespace = Input.undefined();

        public HasMetafieldsIdentifier(String key) {
            this.key = key;
        }

        public String getKey() {
            return key;
        }

        public HasMetafieldsIdentifier setKey(String key) {
            this.key = key;
            return this;
        }

        public String getNamespace() {
            return namespace.getValue();
        }

        public Input<String> getNamespaceInput() {
            return namespace;
        }

        public HasMetafieldsIdentifier setNamespace(String namespace) {
            this.namespace = Input.optional(namespace);
            return this;
        }

        public HasMetafieldsIdentifier setNamespaceInput(Input<String> namespace) {
            if (namespace == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.namespace = namespace;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            if (this.namespace.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("namespace:");
                if (namespace.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, namespace.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface ImageQueryDefinition {
        void define(ImageQuery _queryBuilder);
    }

    /**
    * Represents an image resource.
    */
    public static class ImageQuery extends Query<ImageQuery> {
        ImageQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A word or phrase to share the nature or contents of an image.
        */
        public ImageQuery altText() {
            startField("altText");

            return this;
        }

        /**
        * The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
        */
        public ImageQuery height() {
            startField("height");

            return this;
        }

        /**
        * A unique ID for the image.
        */
        public ImageQuery id() {
            startField("id");

            return this;
        }

        /**
        * The location of the original image as a URL.
        * If there are any existing transformations in the original source URL, they will remain and not be
        * stripped.
        *
        * @deprecated Use `url` instead.
        */
        @Deprecated
        public ImageQuery originalSrc() {
            startField("originalSrc");

            return this;
        }

        /**
        * The location of the image as a URL.
        *
        * @deprecated Use `url` instead.
        */
        @Deprecated
        public ImageQuery src() {
            startField("src");

            return this;
        }

        public class TransformedSrcArguments extends Arguments {
            TransformedSrcArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Image width in pixels between 1 and 5760.
            */
            public TransformedSrcArguments maxWidth(Integer value) {
                if (value != null) {
                    startArgument("maxWidth");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Image height in pixels between 1 and 5760.
            */
            public TransformedSrcArguments maxHeight(Integer value) {
                if (value != null) {
                    startArgument("maxHeight");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Crops the image according to the specified region.
            */
            public TransformedSrcArguments crop(CropRegion value) {
                if (value != null) {
                    startArgument("crop");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
            */
            public TransformedSrcArguments scale(Integer value) {
                if (value != null) {
                    startArgument("scale");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are
            * supported).
            */
            public TransformedSrcArguments preferredContentType(ImageContentType value) {
                if (value != null) {
                    startArgument("preferredContentType");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }
        }

        public interface TransformedSrcArgumentsDefinition {
            void define(TransformedSrcArguments args);
        }

        /**
        * The location of the transformed image as a URL.
        * All transformation arguments are considered "best-effort". If they can be applied to an image, they
        * will be.
        * Otherwise any transformations which an image type doesn't support will be ignored.
        *
        * @deprecated Use `url(transform:)` instead
        */
        public ImageQuery transformedSrc() {
            return transformedSrc(args -> {});
        }

        /**
        * The location of the transformed image as a URL.
        * All transformation arguments are considered "best-effort". If they can be applied to an image, they
        * will be.
        * Otherwise any transformations which an image type doesn't support will be ignored.
        *
        * @deprecated Use `url(transform:)` instead
        */
        @Deprecated
        public ImageQuery transformedSrc(TransformedSrcArgumentsDefinition argsDef) {
            startField("transformedSrc");

            TransformedSrcArguments args = new TransformedSrcArguments(_queryBuilder);
            argsDef.define(args);
            TransformedSrcArguments.end(args);

            return this;
        }

        public class UrlArguments extends Arguments {
            UrlArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * A set of options to transform the original image.
            */
            public UrlArguments transform(ImageTransformInput value) {
                if (value != null) {
                    startArgument("transform");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UrlArgumentsDefinition {
            void define(UrlArguments args);
        }

        /**
        * The location of the image as a URL.
        * If no transform options are specified, then the original image will be preserved including any
        * pre-applied transforms.
        * All transformation options are considered "best-effort". Any transformation that the original image
        * type doesn't support will be ignored.
        * If you need multiple variations of the same image, then you can use [GraphQL
        * aliases](https://graphql.org/learn/queries/#aliases).
        */
        public ImageQuery url() {
            return url(args -> {});
        }

        /**
        * The location of the image as a URL.
        * If no transform options are specified, then the original image will be preserved including any
        * pre-applied transforms.
        * All transformation options are considered "best-effort". Any transformation that the original image
        * type doesn't support will be ignored.
        * If you need multiple variations of the same image, then you can use [GraphQL
        * aliases](https://graphql.org/learn/queries/#aliases).
        */
        public ImageQuery url(UrlArgumentsDefinition argsDef) {
            startField("url");

            UrlArguments args = new UrlArguments(_queryBuilder);
            argsDef.define(args);
            UrlArguments.end(args);

            return this;
        }

        /**
        * The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
        */
        public ImageQuery width() {
            startField("width");

            return this;
        }
    }

    /**
    * Represents an image resource.
    */
    public static class Image extends AbstractResponse<Image> {
        public Image() {
        }

        public Image(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "altText": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "height": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        ID optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ID(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "originalSrc": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "src": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "transformedSrc": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "url": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "width": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Image";
        }

        /**
        * A word or phrase to share the nature or contents of an image.
        */

        public String getAltText() {
            return (String) get("altText");
        }

        public Image setAltText(String arg) {
            optimisticData.put(getKey("altText"), arg);
            return this;
        }

        /**
        * The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
        */

        public Integer getHeight() {
            return (Integer) get("height");
        }

        public Image setHeight(Integer arg) {
            optimisticData.put(getKey("height"), arg);
            return this;
        }

        /**
        * A unique ID for the image.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public Image setId(ID arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The location of the original image as a URL.
        * If there are any existing transformations in the original source URL, they will remain and not be
        * stripped.
        *
        * @deprecated Use `url` instead.
        */

        public String getOriginalSrc() {
            return (String) get("originalSrc");
        }

        public Image setOriginalSrc(String arg) {
            optimisticData.put(getKey("originalSrc"), arg);
            return this;
        }

        /**
        * The location of the image as a URL.
        *
        * @deprecated Use `url` instead.
        */

        public String getSrc() {
            return (String) get("src");
        }

        public Image setSrc(String arg) {
            optimisticData.put(getKey("src"), arg);
            return this;
        }

        /**
        * The location of the transformed image as a URL.
        * All transformation arguments are considered "best-effort". If they can be applied to an image, they
        * will be.
        * Otherwise any transformations which an image type doesn't support will be ignored.
        *
        * @deprecated Use `url(transform:)` instead
        */

        public String getTransformedSrc() {
            return (String) get("transformedSrc");
        }

        public Image setTransformedSrc(String arg) {
            optimisticData.put(getKey("transformedSrc"), arg);
            return this;
        }

        /**
        * The location of the image as a URL.
        * If no transform options are specified, then the original image will be preserved including any
        * pre-applied transforms.
        * All transformation options are considered "best-effort". Any transformation that the original image
        * type doesn't support will be ignored.
        * If you need multiple variations of the same image, then you can use [GraphQL
        * aliases](https://graphql.org/learn/queries/#aliases).
        */

        public String getUrl() {
            return (String) get("url");
        }

        public Image setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        /**
        * The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
        */

        public Integer getWidth() {
            return (Integer) get("width");
        }

        public Image setWidth(Integer arg) {
            optimisticData.put(getKey("width"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "altText": return false;

                case "height": return false;

                case "id": return false;

                case "originalSrc": return false;

                case "src": return false;

                case "transformedSrc": return false;

                case "url": return false;

                case "width": return false;

                default: return false;
            }
        }
    }

    public interface ImageConnectionQueryDefinition {
        void define(ImageConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Images.
    */
    public static class ImageConnectionQuery extends Query<ImageConnectionQuery> {
        ImageConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public ImageConnectionQuery edges(ImageEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new ImageEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in ImageEdge.
        */
        public ImageConnectionQuery nodes(ImageQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public ImageConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Images.
    */
    public static class ImageConnection extends AbstractResponse<ImageConnection> {
        public ImageConnection() {
        }

        public ImageConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<ImageEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ImageEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Image> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Image(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ImageConnection";
        }

        /**
        * A list of edges.
        */

        public List<ImageEdge> getEdges() {
            return (List<ImageEdge>) get("edges");
        }

        public ImageConnection setEdges(List<ImageEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in ImageEdge.
        */

        public List<Image> getNodes() {
            return (List<Image>) get("nodes");
        }

        public ImageConnection setNodes(List<Image> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public ImageConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    /**
    * List of supported image content types.
    */
    public enum ImageContentType {
        /**
        * A JPG image.
        */
        JPG,

        /**
        * A PNG image.
        */
        PNG,

        /**
        * A WEBP image.
        */
        WEBP,

        UNKNOWN_VALUE;

        public static ImageContentType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "JPG": {
                    return JPG;
                }

                case "PNG": {
                    return PNG;
                }

                case "WEBP": {
                    return WEBP;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case JPG: {
                    return "JPG";
                }

                case PNG: {
                    return "PNG";
                }

                case WEBP: {
                    return "WEBP";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface ImageEdgeQueryDefinition {
        void define(ImageEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Image and a cursor during pagination.
    */
    public static class ImageEdgeQuery extends Query<ImageEdgeQuery> {
        ImageEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public ImageEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of ImageEdge.
        */
        public ImageEdgeQuery node(ImageQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Image and a cursor during pagination.
    */
    public static class ImageEdge extends AbstractResponse<ImageEdge> {
        public ImageEdge() {
        }

        public ImageEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Image(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ImageEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public ImageEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of ImageEdge.
        */

        public Image getNode() {
            return (Image) get("node");
        }

        public ImageEdge setNode(Image arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public static class ImageTransformInput implements Serializable {
        private Input<CropRegion> crop = Input.undefined();

        private Input<Integer> maxWidth = Input.undefined();

        private Input<Integer> maxHeight = Input.undefined();

        private Input<Integer> scale = Input.undefined();

        private Input<ImageContentType> preferredContentType = Input.undefined();

        public CropRegion getCrop() {
            return crop.getValue();
        }

        public Input<CropRegion> getCropInput() {
            return crop;
        }

        public ImageTransformInput setCrop(CropRegion crop) {
            this.crop = Input.optional(crop);
            return this;
        }

        public ImageTransformInput setCropInput(Input<CropRegion> crop) {
            if (crop == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.crop = crop;
            return this;
        }

        public Integer getMaxWidth() {
            return maxWidth.getValue();
        }

        public Input<Integer> getMaxWidthInput() {
            return maxWidth;
        }

        public ImageTransformInput setMaxWidth(Integer maxWidth) {
            this.maxWidth = Input.optional(maxWidth);
            return this;
        }

        public ImageTransformInput setMaxWidthInput(Input<Integer> maxWidth) {
            if (maxWidth == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.maxWidth = maxWidth;
            return this;
        }

        public Integer getMaxHeight() {
            return maxHeight.getValue();
        }

        public Input<Integer> getMaxHeightInput() {
            return maxHeight;
        }

        public ImageTransformInput setMaxHeight(Integer maxHeight) {
            this.maxHeight = Input.optional(maxHeight);
            return this;
        }

        public ImageTransformInput setMaxHeightInput(Input<Integer> maxHeight) {
            if (maxHeight == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.maxHeight = maxHeight;
            return this;
        }

        public Integer getScale() {
            return scale.getValue();
        }

        public Input<Integer> getScaleInput() {
            return scale;
        }

        public ImageTransformInput setScale(Integer scale) {
            this.scale = Input.optional(scale);
            return this;
        }

        public ImageTransformInput setScaleInput(Input<Integer> scale) {
            if (scale == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.scale = scale;
            return this;
        }

        public ImageContentType getPreferredContentType() {
            return preferredContentType.getValue();
        }

        public Input<ImageContentType> getPreferredContentTypeInput() {
            return preferredContentType;
        }

        public ImageTransformInput setPreferredContentType(ImageContentType preferredContentType) {
            this.preferredContentType = Input.optional(preferredContentType);
            return this;
        }

        public ImageTransformInput setPreferredContentTypeInput(Input<ImageContentType> preferredContentType) {
            if (preferredContentType == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.preferredContentType = preferredContentType;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.crop.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("crop:");
                if (crop.getValue() != null) {
                    _queryBuilder.append(crop.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.maxWidth.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("maxWidth:");
                if (maxWidth.getValue() != null) {
                    _queryBuilder.append(maxWidth.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.maxHeight.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("maxHeight:");
                if (maxHeight.getValue() != null) {
                    _queryBuilder.append(maxHeight.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.scale.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("scale:");
                if (scale.getValue() != null) {
                    _queryBuilder.append(scale.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.preferredContentType.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("preferredContentType:");
                if (preferredContentType.getValue() != null) {
                    _queryBuilder.append(preferredContentType.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface LanguageQueryDefinition {
        void define(LanguageQuery _queryBuilder);
    }

    /**
    * A language.
    */
    public static class LanguageQuery extends Query<LanguageQuery> {
        LanguageQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The name of the language in the language itself. If the language uses capitalization, it is
        * capitalized for a mid-sentence position.
        */
        public LanguageQuery endonymName() {
            startField("endonymName");

            return this;
        }

        /**
        * The ISO code.
        */
        public LanguageQuery isoCode() {
            startField("isoCode");

            return this;
        }

        /**
        * The name of the language in the current language.
        */
        public LanguageQuery name() {
            startField("name");

            return this;
        }
    }

    /**
    * A language.
    */
    public static class Language extends AbstractResponse<Language> {
        public Language() {
        }

        public Language(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "endonymName": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "isoCode": {
                        responseData.put(key, LanguageCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Language";
        }

        /**
        * The name of the language in the language itself. If the language uses capitalization, it is
        * capitalized for a mid-sentence position.
        */

        public String getEndonymName() {
            return (String) get("endonymName");
        }

        public Language setEndonymName(String arg) {
            optimisticData.put(getKey("endonymName"), arg);
            return this;
        }

        /**
        * The ISO code.
        */

        public LanguageCode getIsoCode() {
            return (LanguageCode) get("isoCode");
        }

        public Language setIsoCode(LanguageCode arg) {
            optimisticData.put(getKey("isoCode"), arg);
            return this;
        }

        /**
        * The name of the language in the current language.
        */

        public String getName() {
            return (String) get("name");
        }

        public Language setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "endonymName": return false;

                case "isoCode": return false;

                case "name": return false;

                default: return false;
            }
        }
    }

    /**
    * ISO 639-1 language codes supported by Shopify.
    */
    public enum LanguageCode {
        /**
        * Afrikaans.
        */
        AF,

        /**
        * Akan.
        */
        AK,

        /**
        * Amharic.
        */
        AM,

        /**
        * Arabic.
        */
        AR,

        /**
        * Assamese.
        */
        AS,

        /**
        * Azerbaijani.
        */
        AZ,

        /**
        * Belarusian.
        */
        BE,

        /**
        * Bulgarian.
        */
        BG,

        /**
        * Bambara.
        */
        BM,

        /**
        * Bangla.
        */
        BN,

        /**
        * Tibetan.
        */
        BO,

        /**
        * Breton.
        */
        BR,

        /**
        * Bosnian.
        */
        BS,

        /**
        * Catalan.
        */
        CA,

        /**
        * Chechen.
        */
        CE,

        /**
        * Central Kurdish.
        */
        CKB,

        /**
        * Czech.
        */
        CS,

        /**
        * Church Slavic.
        */
        CU,

        /**
        * Welsh.
        */
        CY,

        /**
        * Danish.
        */
        DA,

        /**
        * German.
        */
        DE,

        /**
        * Dzongkha.
        */
        DZ,

        /**
        * Ewe.
        */
        EE,

        /**
        * Greek.
        */
        EL,

        /**
        * English.
        */
        EN,

        /**
        * Esperanto.
        */
        EO,

        /**
        * Spanish.
        */
        ES,

        /**
        * Estonian.
        */
        ET,

        /**
        * Basque.
        */
        EU,

        /**
        * Persian.
        */
        FA,

        /**
        * Fulah.
        */
        FF,

        /**
        * Finnish.
        */
        FI,

        /**
        * Filipino.
        */
        FIL,

        /**
        * Faroese.
        */
        FO,

        /**
        * French.
        */
        FR,

        /**
        * Western Frisian.
        */
        FY,

        /**
        * Irish.
        */
        GA,

        /**
        * Scottish Gaelic.
        */
        GD,

        /**
        * Galician.
        */
        GL,

        /**
        * Gujarati.
        */
        GU,

        /**
        * Manx.
        */
        GV,

        /**
        * Hausa.
        */
        HA,

        /**
        * Hebrew.
        */
        HE,

        /**
        * Hindi.
        */
        HI,

        /**
        * Croatian.
        */
        HR,

        /**
        * Hungarian.
        */
        HU,

        /**
        * Armenian.
        */
        HY,

        /**
        * Interlingua.
        */
        IA,

        /**
        * Indonesian.
        */
        ID,

        /**
        * Igbo.
        */
        IG,

        /**
        * Sichuan Yi.
        */
        II,

        /**
        * Icelandic.
        */
        IS,

        /**
        * Italian.
        */
        IT,

        /**
        * Japanese.
        */
        JA,

        /**
        * Javanese.
        */
        JV,

        /**
        * Georgian.
        */
        KA,

        /**
        * Kikuyu.
        */
        KI,

        /**
        * Kazakh.
        */
        KK,

        /**
        * Kalaallisut.
        */
        KL,

        /**
        * Khmer.
        */
        KM,

        /**
        * Kannada.
        */
        KN,

        /**
        * Korean.
        */
        KO,

        /**
        * Kashmiri.
        */
        KS,

        /**
        * Kurdish.
        */
        KU,

        /**
        * Cornish.
        */
        KW,

        /**
        * Kyrgyz.
        */
        KY,

        /**
        * Latin.
        */
        LA,

        /**
        * Luxembourgish.
        */
        LB,

        /**
        * Ganda.
        */
        LG,

        /**
        * Lingala.
        */
        LN,

        /**
        * Lao.
        */
        LO,

        /**
        * Lithuanian.
        */
        LT,

        /**
        * Luba-Katanga.
        */
        LU,

        /**
        * Latvian.
        */
        LV,

        /**
        * Malagasy.
        */
        MG,

        /**
        * Māori.
        */
        MI,

        /**
        * Macedonian.
        */
        MK,

        /**
        * Malayalam.
        */
        ML,

        /**
        * Mongolian.
        */
        MN,

        /**
        * Moldavian.
        */
        MO,

        /**
        * Marathi.
        */
        MR,

        /**
        * Malay.
        */
        MS,

        /**
        * Maltese.
        */
        MT,

        /**
        * Burmese.
        */
        MY,

        /**
        * Norwegian (Bokmål).
        */
        NB,

        /**
        * North Ndebele.
        */
        ND,

        /**
        * Nepali.
        */
        NE,

        /**
        * Dutch.
        */
        NL,

        /**
        * Norwegian Nynorsk.
        */
        NN,

        /**
        * Norwegian.
        */
        NO,

        /**
        * Oromo.
        */
        OM,

        /**
        * Odia.
        */
        OR,

        /**
        * Ossetic.
        */
        OS,

        /**
        * Punjabi.
        */
        PA,

        /**
        * Polish.
        */
        PL,

        /**
        * Pashto.
        */
        PS,

        /**
        * Portuguese.
        */
        PT,

        /**
        * Portuguese (Brazil).
        */
        PT_BR,

        /**
        * Portuguese (Portugal).
        */
        PT_PT,

        /**
        * Quechua.
        */
        QU,

        /**
        * Romansh.
        */
        RM,

        /**
        * Rundi.
        */
        RN,

        /**
        * Romanian.
        */
        RO,

        /**
        * Russian.
        */
        RU,

        /**
        * Kinyarwanda.
        */
        RW,

        /**
        * Sanskrit.
        */
        SA,

        /**
        * Sardinian.
        */
        SC,

        /**
        * Sindhi.
        */
        SD,

        /**
        * Northern Sami.
        */
        SE,

        /**
        * Sango.
        */
        SG,

        /**
        * Serbo-Croatian.
        */
        SH,

        /**
        * Sinhala.
        */
        SI,

        /**
        * Slovak.
        */
        SK,

        /**
        * Slovenian.
        */
        SL,

        /**
        * Shona.
        */
        SN,

        /**
        * Somali.
        */
        SO,

        /**
        * Albanian.
        */
        SQ,

        /**
        * Serbian.
        */
        SR,

        /**
        * Sundanese.
        */
        SU,

        /**
        * Swedish.
        */
        SV,

        /**
        * Swahili.
        */
        SW,

        /**
        * Tamil.
        */
        TA,

        /**
        * Telugu.
        */
        TE,

        /**
        * Tajik.
        */
        TG,

        /**
        * Thai.
        */
        TH,

        /**
        * Tigrinya.
        */
        TI,

        /**
        * Turkmen.
        */
        TK,

        /**
        * Tongan.
        */
        TO,

        /**
        * Turkish.
        */
        TR,

        /**
        * Tatar.
        */
        TT,

        /**
        * Uyghur.
        */
        UG,

        /**
        * Ukrainian.
        */
        UK,

        /**
        * Urdu.
        */
        UR,

        /**
        * Uzbek.
        */
        UZ,

        /**
        * Vietnamese.
        */
        VI,

        /**
        * Volapük.
        */
        VO,

        /**
        * Wolof.
        */
        WO,

        /**
        * Xhosa.
        */
        XH,

        /**
        * Yiddish.
        */
        YI,

        /**
        * Yoruba.
        */
        YO,

        /**
        * Chinese.
        */
        ZH,

        /**
        * Chinese (Simplified).
        */
        ZH_CN,

        /**
        * Chinese (Traditional).
        */
        ZH_TW,

        /**
        * Zulu.
        */
        ZU,

        UNKNOWN_VALUE;

        public static LanguageCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "AF": {
                    return AF;
                }

                case "AK": {
                    return AK;
                }

                case "AM": {
                    return AM;
                }

                case "AR": {
                    return AR;
                }

                case "AS": {
                    return AS;
                }

                case "AZ": {
                    return AZ;
                }

                case "BE": {
                    return BE;
                }

                case "BG": {
                    return BG;
                }

                case "BM": {
                    return BM;
                }

                case "BN": {
                    return BN;
                }

                case "BO": {
                    return BO;
                }

                case "BR": {
                    return BR;
                }

                case "BS": {
                    return BS;
                }

                case "CA": {
                    return CA;
                }

                case "CE": {
                    return CE;
                }

                case "CKB": {
                    return CKB;
                }

                case "CS": {
                    return CS;
                }

                case "CU": {
                    return CU;
                }

                case "CY": {
                    return CY;
                }

                case "DA": {
                    return DA;
                }

                case "DE": {
                    return DE;
                }

                case "DZ": {
                    return DZ;
                }

                case "EE": {
                    return EE;
                }

                case "EL": {
                    return EL;
                }

                case "EN": {
                    return EN;
                }

                case "EO": {
                    return EO;
                }

                case "ES": {
                    return ES;
                }

                case "ET": {
                    return ET;
                }

                case "EU": {
                    return EU;
                }

                case "FA": {
                    return FA;
                }

                case "FF": {
                    return FF;
                }

                case "FI": {
                    return FI;
                }

                case "FIL": {
                    return FIL;
                }

                case "FO": {
                    return FO;
                }

                case "FR": {
                    return FR;
                }

                case "FY": {
                    return FY;
                }

                case "GA": {
                    return GA;
                }

                case "GD": {
                    return GD;
                }

                case "GL": {
                    return GL;
                }

                case "GU": {
                    return GU;
                }

                case "GV": {
                    return GV;
                }

                case "HA": {
                    return HA;
                }

                case "HE": {
                    return HE;
                }

                case "HI": {
                    return HI;
                }

                case "HR": {
                    return HR;
                }

                case "HU": {
                    return HU;
                }

                case "HY": {
                    return HY;
                }

                case "IA": {
                    return IA;
                }

                case "ID": {
                    return ID;
                }

                case "IG": {
                    return IG;
                }

                case "II": {
                    return II;
                }

                case "IS": {
                    return IS;
                }

                case "IT": {
                    return IT;
                }

                case "JA": {
                    return JA;
                }

                case "JV": {
                    return JV;
                }

                case "KA": {
                    return KA;
                }

                case "KI": {
                    return KI;
                }

                case "KK": {
                    return KK;
                }

                case "KL": {
                    return KL;
                }

                case "KM": {
                    return KM;
                }

                case "KN": {
                    return KN;
                }

                case "KO": {
                    return KO;
                }

                case "KS": {
                    return KS;
                }

                case "KU": {
                    return KU;
                }

                case "KW": {
                    return KW;
                }

                case "KY": {
                    return KY;
                }

                case "LA": {
                    return LA;
                }

                case "LB": {
                    return LB;
                }

                case "LG": {
                    return LG;
                }

                case "LN": {
                    return LN;
                }

                case "LO": {
                    return LO;
                }

                case "LT": {
                    return LT;
                }

                case "LU": {
                    return LU;
                }

                case "LV": {
                    return LV;
                }

                case "MG": {
                    return MG;
                }

                case "MI": {
                    return MI;
                }

                case "MK": {
                    return MK;
                }

                case "ML": {
                    return ML;
                }

                case "MN": {
                    return MN;
                }

                case "MO": {
                    return MO;
                }

                case "MR": {
                    return MR;
                }

                case "MS": {
                    return MS;
                }

                case "MT": {
                    return MT;
                }

                case "MY": {
                    return MY;
                }

                case "NB": {
                    return NB;
                }

                case "ND": {
                    return ND;
                }

                case "NE": {
                    return NE;
                }

                case "NL": {
                    return NL;
                }

                case "NN": {
                    return NN;
                }

                case "NO": {
                    return NO;
                }

                case "OM": {
                    return OM;
                }

                case "OR": {
                    return OR;
                }

                case "OS": {
                    return OS;
                }

                case "PA": {
                    return PA;
                }

                case "PL": {
                    return PL;
                }

                case "PS": {
                    return PS;
                }

                case "PT": {
                    return PT;
                }

                case "PT_BR": {
                    return PT_BR;
                }

                case "PT_PT": {
                    return PT_PT;
                }

                case "QU": {
                    return QU;
                }

                case "RM": {
                    return RM;
                }

                case "RN": {
                    return RN;
                }

                case "RO": {
                    return RO;
                }

                case "RU": {
                    return RU;
                }

                case "RW": {
                    return RW;
                }

                case "SA": {
                    return SA;
                }

                case "SC": {
                    return SC;
                }

                case "SD": {
                    return SD;
                }

                case "SE": {
                    return SE;
                }

                case "SG": {
                    return SG;
                }

                case "SH": {
                    return SH;
                }

                case "SI": {
                    return SI;
                }

                case "SK": {
                    return SK;
                }

                case "SL": {
                    return SL;
                }

                case "SN": {
                    return SN;
                }

                case "SO": {
                    return SO;
                }

                case "SQ": {
                    return SQ;
                }

                case "SR": {
                    return SR;
                }

                case "SU": {
                    return SU;
                }

                case "SV": {
                    return SV;
                }

                case "SW": {
                    return SW;
                }

                case "TA": {
                    return TA;
                }

                case "TE": {
                    return TE;
                }

                case "TG": {
                    return TG;
                }

                case "TH": {
                    return TH;
                }

                case "TI": {
                    return TI;
                }

                case "TK": {
                    return TK;
                }

                case "TO": {
                    return TO;
                }

                case "TR": {
                    return TR;
                }

                case "TT": {
                    return TT;
                }

                case "UG": {
                    return UG;
                }

                case "UK": {
                    return UK;
                }

                case "UR": {
                    return UR;
                }

                case "UZ": {
                    return UZ;
                }

                case "VI": {
                    return VI;
                }

                case "VO": {
                    return VO;
                }

                case "WO": {
                    return WO;
                }

                case "XH": {
                    return XH;
                }

                case "YI": {
                    return YI;
                }

                case "YO": {
                    return YO;
                }

                case "ZH": {
                    return ZH;
                }

                case "ZH_CN": {
                    return ZH_CN;
                }

                case "ZH_TW": {
                    return ZH_TW;
                }

                case "ZU": {
                    return ZU;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case AF: {
                    return "AF";
                }

                case AK: {
                    return "AK";
                }

                case AM: {
                    return "AM";
                }

                case AR: {
                    return "AR";
                }

                case AS: {
                    return "AS";
                }

                case AZ: {
                    return "AZ";
                }

                case BE: {
                    return "BE";
                }

                case BG: {
                    return "BG";
                }

                case BM: {
                    return "BM";
                }

                case BN: {
                    return "BN";
                }

                case BO: {
                    return "BO";
                }

                case BR: {
                    return "BR";
                }

                case BS: {
                    return "BS";
                }

                case CA: {
                    return "CA";
                }

                case CE: {
                    return "CE";
                }

                case CKB: {
                    return "CKB";
                }

                case CS: {
                    return "CS";
                }

                case CU: {
                    return "CU";
                }

                case CY: {
                    return "CY";
                }

                case DA: {
                    return "DA";
                }

                case DE: {
                    return "DE";
                }

                case DZ: {
                    return "DZ";
                }

                case EE: {
                    return "EE";
                }

                case EL: {
                    return "EL";
                }

                case EN: {
                    return "EN";
                }

                case EO: {
                    return "EO";
                }

                case ES: {
                    return "ES";
                }

                case ET: {
                    return "ET";
                }

                case EU: {
                    return "EU";
                }

                case FA: {
                    return "FA";
                }

                case FF: {
                    return "FF";
                }

                case FI: {
                    return "FI";
                }

                case FIL: {
                    return "FIL";
                }

                case FO: {
                    return "FO";
                }

                case FR: {
                    return "FR";
                }

                case FY: {
                    return "FY";
                }

                case GA: {
                    return "GA";
                }

                case GD: {
                    return "GD";
                }

                case GL: {
                    return "GL";
                }

                case GU: {
                    return "GU";
                }

                case GV: {
                    return "GV";
                }

                case HA: {
                    return "HA";
                }

                case HE: {
                    return "HE";
                }

                case HI: {
                    return "HI";
                }

                case HR: {
                    return "HR";
                }

                case HU: {
                    return "HU";
                }

                case HY: {
                    return "HY";
                }

                case IA: {
                    return "IA";
                }

                case ID: {
                    return "ID";
                }

                case IG: {
                    return "IG";
                }

                case II: {
                    return "II";
                }

                case IS: {
                    return "IS";
                }

                case IT: {
                    return "IT";
                }

                case JA: {
                    return "JA";
                }

                case JV: {
                    return "JV";
                }

                case KA: {
                    return "KA";
                }

                case KI: {
                    return "KI";
                }

                case KK: {
                    return "KK";
                }

                case KL: {
                    return "KL";
                }

                case KM: {
                    return "KM";
                }

                case KN: {
                    return "KN";
                }

                case KO: {
                    return "KO";
                }

                case KS: {
                    return "KS";
                }

                case KU: {
                    return "KU";
                }

                case KW: {
                    return "KW";
                }

                case KY: {
                    return "KY";
                }

                case LA: {
                    return "LA";
                }

                case LB: {
                    return "LB";
                }

                case LG: {
                    return "LG";
                }

                case LN: {
                    return "LN";
                }

                case LO: {
                    return "LO";
                }

                case LT: {
                    return "LT";
                }

                case LU: {
                    return "LU";
                }

                case LV: {
                    return "LV";
                }

                case MG: {
                    return "MG";
                }

                case MI: {
                    return "MI";
                }

                case MK: {
                    return "MK";
                }

                case ML: {
                    return "ML";
                }

                case MN: {
                    return "MN";
                }

                case MO: {
                    return "MO";
                }

                case MR: {
                    return "MR";
                }

                case MS: {
                    return "MS";
                }

                case MT: {
                    return "MT";
                }

                case MY: {
                    return "MY";
                }

                case NB: {
                    return "NB";
                }

                case ND: {
                    return "ND";
                }

                case NE: {
                    return "NE";
                }

                case NL: {
                    return "NL";
                }

                case NN: {
                    return "NN";
                }

                case NO: {
                    return "NO";
                }

                case OM: {
                    return "OM";
                }

                case OR: {
                    return "OR";
                }

                case OS: {
                    return "OS";
                }

                case PA: {
                    return "PA";
                }

                case PL: {
                    return "PL";
                }

                case PS: {
                    return "PS";
                }

                case PT: {
                    return "PT";
                }

                case PT_BR: {
                    return "PT_BR";
                }

                case PT_PT: {
                    return "PT_PT";
                }

                case QU: {
                    return "QU";
                }

                case RM: {
                    return "RM";
                }

                case RN: {
                    return "RN";
                }

                case RO: {
                    return "RO";
                }

                case RU: {
                    return "RU";
                }

                case RW: {
                    return "RW";
                }

                case SA: {
                    return "SA";
                }

                case SC: {
                    return "SC";
                }

                case SD: {
                    return "SD";
                }

                case SE: {
                    return "SE";
                }

                case SG: {
                    return "SG";
                }

                case SH: {
                    return "SH";
                }

                case SI: {
                    return "SI";
                }

                case SK: {
                    return "SK";
                }

                case SL: {
                    return "SL";
                }

                case SN: {
                    return "SN";
                }

                case SO: {
                    return "SO";
                }

                case SQ: {
                    return "SQ";
                }

                case SR: {
                    return "SR";
                }

                case SU: {
                    return "SU";
                }

                case SV: {
                    return "SV";
                }

                case SW: {
                    return "SW";
                }

                case TA: {
                    return "TA";
                }

                case TE: {
                    return "TE";
                }

                case TG: {
                    return "TG";
                }

                case TH: {
                    return "TH";
                }

                case TI: {
                    return "TI";
                }

                case TK: {
                    return "TK";
                }

                case TO: {
                    return "TO";
                }

                case TR: {
                    return "TR";
                }

                case TT: {
                    return "TT";
                }

                case UG: {
                    return "UG";
                }

                case UK: {
                    return "UK";
                }

                case UR: {
                    return "UR";
                }

                case UZ: {
                    return "UZ";
                }

                case VI: {
                    return "VI";
                }

                case VO: {
                    return "VO";
                }

                case WO: {
                    return "WO";
                }

                case XH: {
                    return "XH";
                }

                case YI: {
                    return "YI";
                }

                case YO: {
                    return "YO";
                }

                case ZH: {
                    return "ZH";
                }

                case ZH_CN: {
                    return "ZH_CN";
                }

                case ZH_TW: {
                    return "ZH_TW";
                }

                case ZU: {
                    return "ZU";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface LocalizationQueryDefinition {
        void define(LocalizationQuery _queryBuilder);
    }

    /**
    * Information about the localized experiences configured for the shop.
    */
    public static class LocalizationQuery extends Query<LocalizationQuery> {
        LocalizationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The list of countries with enabled localized experiences.
        */
        public LocalizationQuery availableCountries(CountryQueryDefinition queryDef) {
            startField("availableCountries");

            _queryBuilder.append('{');
            queryDef.define(new CountryQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of languages available for the active country.
        */
        public LocalizationQuery availableLanguages(LanguageQueryDefinition queryDef) {
            startField("availableLanguages");

            _queryBuilder.append('{');
            queryDef.define(new LanguageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The country of the active localized experience. Use the `@inContext` directive to change this value.
        */
        public LocalizationQuery country(CountryQueryDefinition queryDef) {
            startField("country");

            _queryBuilder.append('{');
            queryDef.define(new CountryQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The language of the active localized experience. Use the `@inContext` directive to change this
        * value.
        */
        public LocalizationQuery language(LanguageQueryDefinition queryDef) {
            startField("language");

            _queryBuilder.append('{');
            queryDef.define(new LanguageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The market including the country of the active localized experience. Use the `@inContext` directive
        * to change this value.
        */
        public LocalizationQuery market(MarketQueryDefinition queryDef) {
            startField("market");

            _queryBuilder.append('{');
            queryDef.define(new MarketQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Information about the localized experiences configured for the shop.
    */
    public static class Localization extends AbstractResponse<Localization> {
        public Localization() {
        }

        public Localization(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "availableCountries": {
                        List<Country> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Country(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "availableLanguages": {
                        List<Language> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Language(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "country": {
                        responseData.put(key, new Country(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "language": {
                        responseData.put(key, new Language(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "market": {
                        responseData.put(key, new Market(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Localization";
        }

        /**
        * The list of countries with enabled localized experiences.
        */

        public List<Country> getAvailableCountries() {
            return (List<Country>) get("availableCountries");
        }

        public Localization setAvailableCountries(List<Country> arg) {
            optimisticData.put(getKey("availableCountries"), arg);
            return this;
        }

        /**
        * The list of languages available for the active country.
        */

        public List<Language> getAvailableLanguages() {
            return (List<Language>) get("availableLanguages");
        }

        public Localization setAvailableLanguages(List<Language> arg) {
            optimisticData.put(getKey("availableLanguages"), arg);
            return this;
        }

        /**
        * The country of the active localized experience. Use the `@inContext` directive to change this value.
        */

        public Country getCountry() {
            return (Country) get("country");
        }

        public Localization setCountry(Country arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        /**
        * The language of the active localized experience. Use the `@inContext` directive to change this
        * value.
        */

        public Language getLanguage() {
            return (Language) get("language");
        }

        public Localization setLanguage(Language arg) {
            optimisticData.put(getKey("language"), arg);
            return this;
        }

        /**
        * The market including the country of the active localized experience. Use the `@inContext` directive
        * to change this value.
        */

        public Market getMarket() {
            return (Market) get("market");
        }

        public Localization setMarket(Market arg) {
            optimisticData.put(getKey("market"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "availableCountries": return true;

                case "availableLanguages": return true;

                case "country": return true;

                case "language": return true;

                case "market": return true;

                default: return false;
            }
        }
    }

    public interface LocationQueryDefinition {
        void define(LocationQuery _queryBuilder);
    }

    /**
    * Represents a location where product inventory is held.
    */
    public static class LocationQuery extends Query<LocationQuery> {
        LocationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The address of the location.
        */
        public LocationQuery address(LocationAddressQueryDefinition queryDef) {
            startField("address");

            _queryBuilder.append('{');
            queryDef.define(new LocationAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public LocationQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public LocationQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public LocationQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The name of the location.
        */
        public LocationQuery name() {
            startField("name");

            return this;
        }
    }

    /**
    * Represents a location where product inventory is held.
    */
    public static class Location extends AbstractResponse<Location> implements HasMetafields, MetafieldParentResource, Node {
        public Location() {
        }

        public Location(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        responseData.put(key, new LocationAddress(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Location(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Location";
        }

        /**
        * The address of the location.
        */

        public LocationAddress getAddress() {
            return (LocationAddress) get("address");
        }

        public Location setAddress(LocationAddress arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Location setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Location setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The name of the location.
        */

        public String getName() {
            return (String) get("name");
        }

        public Location setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return true;

                case "id": return false;

                case "metafield": return true;

                case "metafields": return true;

                case "name": return false;

                default: return false;
            }
        }
    }

    public interface LocationAddressQueryDefinition {
        void define(LocationAddressQuery _queryBuilder);
    }

    /**
    * Represents the address of a location.
    */
    public static class LocationAddressQuery extends Query<LocationAddressQuery> {
        LocationAddressQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The first line of the address for the location.
        */
        public LocationAddressQuery address1() {
            startField("address1");

            return this;
        }

        /**
        * The second line of the address for the location.
        */
        public LocationAddressQuery address2() {
            startField("address2");

            return this;
        }

        /**
        * The city of the location.
        */
        public LocationAddressQuery city() {
            startField("city");

            return this;
        }

        /**
        * The country of the location.
        */
        public LocationAddressQuery country() {
            startField("country");

            return this;
        }

        /**
        * The country code of the location.
        */
        public LocationAddressQuery countryCode() {
            startField("countryCode");

            return this;
        }

        /**
        * A formatted version of the address for the location.
        */
        public LocationAddressQuery formatted() {
            startField("formatted");

            return this;
        }

        /**
        * The latitude coordinates of the location.
        */
        public LocationAddressQuery latitude() {
            startField("latitude");

            return this;
        }

        /**
        * The longitude coordinates of the location.
        */
        public LocationAddressQuery longitude() {
            startField("longitude");

            return this;
        }

        /**
        * The phone number of the location.
        */
        public LocationAddressQuery phone() {
            startField("phone");

            return this;
        }

        /**
        * The province of the location.
        */
        public LocationAddressQuery province() {
            startField("province");

            return this;
        }

        /**
        * The code for the province, state, or district of the address of the location.
        */
        public LocationAddressQuery provinceCode() {
            startField("provinceCode");

            return this;
        }

        /**
        * The ZIP code of the location.
        */
        public LocationAddressQuery zip() {
            startField("zip");

            return this;
        }
    }

    /**
    * Represents the address of a location.
    */
    public static class LocationAddress extends AbstractResponse<LocationAddress> {
        public LocationAddress() {
        }

        public LocationAddress(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address1": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "address2": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "countryCode": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "formatted": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "latitude": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "longitude": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "province": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "provinceCode": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "zip": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "LocationAddress";
        }

        /**
        * The first line of the address for the location.
        */

        public String getAddress1() {
            return (String) get("address1");
        }

        public LocationAddress setAddress1(String arg) {
            optimisticData.put(getKey("address1"), arg);
            return this;
        }

        /**
        * The second line of the address for the location.
        */

        public String getAddress2() {
            return (String) get("address2");
        }

        public LocationAddress setAddress2(String arg) {
            optimisticData.put(getKey("address2"), arg);
            return this;
        }

        /**
        * The city of the location.
        */

        public String getCity() {
            return (String) get("city");
        }

        public LocationAddress setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        /**
        * The country of the location.
        */

        public String getCountry() {
            return (String) get("country");
        }

        public LocationAddress setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        /**
        * The country code of the location.
        */

        public String getCountryCode() {
            return (String) get("countryCode");
        }

        public LocationAddress setCountryCode(String arg) {
            optimisticData.put(getKey("countryCode"), arg);
            return this;
        }

        /**
        * A formatted version of the address for the location.
        */

        public List<String> getFormatted() {
            return (List<String>) get("formatted");
        }

        public LocationAddress setFormatted(List<String> arg) {
            optimisticData.put(getKey("formatted"), arg);
            return this;
        }

        /**
        * The latitude coordinates of the location.
        */

        public Double getLatitude() {
            return (Double) get("latitude");
        }

        public LocationAddress setLatitude(Double arg) {
            optimisticData.put(getKey("latitude"), arg);
            return this;
        }

        /**
        * The longitude coordinates of the location.
        */

        public Double getLongitude() {
            return (Double) get("longitude");
        }

        public LocationAddress setLongitude(Double arg) {
            optimisticData.put(getKey("longitude"), arg);
            return this;
        }

        /**
        * The phone number of the location.
        */

        public String getPhone() {
            return (String) get("phone");
        }

        public LocationAddress setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        /**
        * The province of the location.
        */

        public String getProvince() {
            return (String) get("province");
        }

        public LocationAddress setProvince(String arg) {
            optimisticData.put(getKey("province"), arg);
            return this;
        }

        /**
        * The code for the province, state, or district of the address of the location.
        */

        public String getProvinceCode() {
            return (String) get("provinceCode");
        }

        public LocationAddress setProvinceCode(String arg) {
            optimisticData.put(getKey("provinceCode"), arg);
            return this;
        }

        /**
        * The ZIP code of the location.
        */

        public String getZip() {
            return (String) get("zip");
        }

        public LocationAddress setZip(String arg) {
            optimisticData.put(getKey("zip"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address1": return false;

                case "address2": return false;

                case "city": return false;

                case "country": return false;

                case "countryCode": return false;

                case "formatted": return false;

                case "latitude": return false;

                case "longitude": return false;

                case "phone": return false;

                case "province": return false;

                case "provinceCode": return false;

                case "zip": return false;

                default: return false;
            }
        }
    }

    public interface LocationConnectionQueryDefinition {
        void define(LocationConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Locations.
    */
    public static class LocationConnectionQuery extends Query<LocationConnectionQuery> {
        LocationConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public LocationConnectionQuery edges(LocationEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new LocationEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in LocationEdge.
        */
        public LocationConnectionQuery nodes(LocationQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new LocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public LocationConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Locations.
    */
    public static class LocationConnection extends AbstractResponse<LocationConnection> {
        public LocationConnection() {
        }

        public LocationConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<LocationEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new LocationEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Location> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Location(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "LocationConnection";
        }

        /**
        * A list of edges.
        */

        public List<LocationEdge> getEdges() {
            return (List<LocationEdge>) get("edges");
        }

        public LocationConnection setEdges(List<LocationEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in LocationEdge.
        */

        public List<Location> getNodes() {
            return (List<Location>) get("nodes");
        }

        public LocationConnection setNodes(List<Location> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public LocationConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface LocationEdgeQueryDefinition {
        void define(LocationEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Location and a cursor during pagination.
    */
    public static class LocationEdgeQuery extends Query<LocationEdgeQuery> {
        LocationEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public LocationEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of LocationEdge.
        */
        public LocationEdgeQuery node(LocationQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new LocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Location and a cursor during pagination.
    */
    public static class LocationEdge extends AbstractResponse<LocationEdge> {
        public LocationEdge() {
        }

        public LocationEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Location(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "LocationEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public LocationEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of LocationEdge.
        */

        public Location getNode() {
            return (Location) get("node");
        }

        public LocationEdge setNode(Location arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the Location query.
    */
    public enum LocationSortKeys {
        /**
        * Sort by the `city` value.
        */
        CITY,

        /**
        * Sort by the `distance` value.
        */
        DISTANCE,

        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by the `name` value.
        */
        NAME,

        UNKNOWN_VALUE;

        public static LocationSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "CITY": {
                    return CITY;
                }

                case "DISTANCE": {
                    return DISTANCE;
                }

                case "ID": {
                    return ID;
                }

                case "NAME": {
                    return NAME;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CITY: {
                    return "CITY";
                }

                case DISTANCE: {
                    return "DISTANCE";
                }

                case ID: {
                    return "ID";
                }

                case NAME: {
                    return "NAME";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface MailingAddressQueryDefinition {
        void define(MailingAddressQuery _queryBuilder);
    }

    /**
    * Represents a mailing address for customers and shipping.
    */
    public static class MailingAddressQuery extends Query<MailingAddressQuery> {
        MailingAddressQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The first line of the address. Typically the street address or PO Box number.
        */
        public MailingAddressQuery address1() {
            startField("address1");

            return this;
        }

        /**
        * The second line of the address. Typically the number of the apartment, suite, or unit.
        */
        public MailingAddressQuery address2() {
            startField("address2");

            return this;
        }

        /**
        * The name of the city, district, village, or town.
        */
        public MailingAddressQuery city() {
            startField("city");

            return this;
        }

        /**
        * The name of the customer's company or organization.
        */
        public MailingAddressQuery company() {
            startField("company");

            return this;
        }

        /**
        * The name of the country.
        */
        public MailingAddressQuery country() {
            startField("country");

            return this;
        }

        /**
        * The two-letter code for the country of the address.
        * For example, US.
        *
        * @deprecated Use `countryCodeV2` instead.
        */
        @Deprecated
        public MailingAddressQuery countryCode() {
            startField("countryCode");

            return this;
        }

        /**
        * The two-letter code for the country of the address.
        * For example, US.
        */
        public MailingAddressQuery countryCodeV2() {
            startField("countryCodeV2");

            return this;
        }

        /**
        * The first name of the customer.
        */
        public MailingAddressQuery firstName() {
            startField("firstName");

            return this;
        }

        public class FormattedArguments extends Arguments {
            FormattedArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Whether to include the customer's name in the formatted address.
            */
            public FormattedArguments withName(Boolean value) {
                if (value != null) {
                    startArgument("withName");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Whether to include the customer's company in the formatted address.
            */
            public FormattedArguments withCompany(Boolean value) {
                if (value != null) {
                    startArgument("withCompany");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface FormattedArgumentsDefinition {
            void define(FormattedArguments args);
        }

        /**
        * A formatted version of the address, customized by the provided arguments.
        */
        public MailingAddressQuery formatted() {
            return formatted(args -> {});
        }

        /**
        * A formatted version of the address, customized by the provided arguments.
        */
        public MailingAddressQuery formatted(FormattedArgumentsDefinition argsDef) {
            startField("formatted");

            FormattedArguments args = new FormattedArguments(_queryBuilder);
            argsDef.define(args);
            FormattedArguments.end(args);

            return this;
        }

        /**
        * A comma-separated list of the values for city, province, and country.
        */
        public MailingAddressQuery formattedArea() {
            startField("formattedArea");

            return this;
        }

        /**
        * The last name of the customer.
        */
        public MailingAddressQuery lastName() {
            startField("lastName");

            return this;
        }

        /**
        * The latitude coordinate of the customer address.
        */
        public MailingAddressQuery latitude() {
            startField("latitude");

            return this;
        }

        /**
        * The longitude coordinate of the customer address.
        */
        public MailingAddressQuery longitude() {
            startField("longitude");

            return this;
        }

        /**
        * The full name of the customer, based on firstName and lastName.
        */
        public MailingAddressQuery name() {
            startField("name");

            return this;
        }

        /**
        * A unique phone number for the customer.
        * Formatted using E.164 standard. For example, _+16135551111_.
        */
        public MailingAddressQuery phone() {
            startField("phone");

            return this;
        }

        /**
        * The region of the address, such as the province, state, or district.
        */
        public MailingAddressQuery province() {
            startField("province");

            return this;
        }

        /**
        * The alphanumeric code for the region.
        * For example, ON.
        */
        public MailingAddressQuery provinceCode() {
            startField("provinceCode");

            return this;
        }

        /**
        * The zip or postal code of the address.
        */
        public MailingAddressQuery zip() {
            startField("zip");

            return this;
        }
    }

    /**
    * Represents a mailing address for customers and shipping.
    */
    public static class MailingAddress extends AbstractResponse<MailingAddress> implements DeliveryAddress, Node {
        public MailingAddress() {
        }

        public MailingAddress(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address1": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "address2": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "company": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "countryCode": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "countryCodeV2": {
                        CountryCode optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = CountryCode.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "firstName": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "formatted": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "formattedArea": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "lastName": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "latitude": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "longitude": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "province": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "provinceCode": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "zip": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public MailingAddress(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "MailingAddress";
        }

        /**
        * The first line of the address. Typically the street address or PO Box number.
        */

        public String getAddress1() {
            return (String) get("address1");
        }

        public MailingAddress setAddress1(String arg) {
            optimisticData.put(getKey("address1"), arg);
            return this;
        }

        /**
        * The second line of the address. Typically the number of the apartment, suite, or unit.
        */

        public String getAddress2() {
            return (String) get("address2");
        }

        public MailingAddress setAddress2(String arg) {
            optimisticData.put(getKey("address2"), arg);
            return this;
        }

        /**
        * The name of the city, district, village, or town.
        */

        public String getCity() {
            return (String) get("city");
        }

        public MailingAddress setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        /**
        * The name of the customer's company or organization.
        */

        public String getCompany() {
            return (String) get("company");
        }

        public MailingAddress setCompany(String arg) {
            optimisticData.put(getKey("company"), arg);
            return this;
        }

        /**
        * The name of the country.
        */

        public String getCountry() {
            return (String) get("country");
        }

        public MailingAddress setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        /**
        * The two-letter code for the country of the address.
        * For example, US.
        *
        * @deprecated Use `countryCodeV2` instead.
        */

        public String getCountryCode() {
            return (String) get("countryCode");
        }

        public MailingAddress setCountryCode(String arg) {
            optimisticData.put(getKey("countryCode"), arg);
            return this;
        }

        /**
        * The two-letter code for the country of the address.
        * For example, US.
        */

        public CountryCode getCountryCodeV2() {
            return (CountryCode) get("countryCodeV2");
        }

        public MailingAddress setCountryCodeV2(CountryCode arg) {
            optimisticData.put(getKey("countryCodeV2"), arg);
            return this;
        }

        /**
        * The first name of the customer.
        */

        public String getFirstName() {
            return (String) get("firstName");
        }

        public MailingAddress setFirstName(String arg) {
            optimisticData.put(getKey("firstName"), arg);
            return this;
        }

        /**
        * A formatted version of the address, customized by the provided arguments.
        */

        public List<String> getFormatted() {
            return (List<String>) get("formatted");
        }

        public MailingAddress setFormatted(List<String> arg) {
            optimisticData.put(getKey("formatted"), arg);
            return this;
        }

        /**
        * A comma-separated list of the values for city, province, and country.
        */

        public String getFormattedArea() {
            return (String) get("formattedArea");
        }

        public MailingAddress setFormattedArea(String arg) {
            optimisticData.put(getKey("formattedArea"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The last name of the customer.
        */

        public String getLastName() {
            return (String) get("lastName");
        }

        public MailingAddress setLastName(String arg) {
            optimisticData.put(getKey("lastName"), arg);
            return this;
        }

        /**
        * The latitude coordinate of the customer address.
        */

        public Double getLatitude() {
            return (Double) get("latitude");
        }

        public MailingAddress setLatitude(Double arg) {
            optimisticData.put(getKey("latitude"), arg);
            return this;
        }

        /**
        * The longitude coordinate of the customer address.
        */

        public Double getLongitude() {
            return (Double) get("longitude");
        }

        public MailingAddress setLongitude(Double arg) {
            optimisticData.put(getKey("longitude"), arg);
            return this;
        }

        /**
        * The full name of the customer, based on firstName and lastName.
        */

        public String getName() {
            return (String) get("name");
        }

        public MailingAddress setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * A unique phone number for the customer.
        * Formatted using E.164 standard. For example, _+16135551111_.
        */

        public String getPhone() {
            return (String) get("phone");
        }

        public MailingAddress setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        /**
        * The region of the address, such as the province, state, or district.
        */

        public String getProvince() {
            return (String) get("province");
        }

        public MailingAddress setProvince(String arg) {
            optimisticData.put(getKey("province"), arg);
            return this;
        }

        /**
        * The alphanumeric code for the region.
        * For example, ON.
        */

        public String getProvinceCode() {
            return (String) get("provinceCode");
        }

        public MailingAddress setProvinceCode(String arg) {
            optimisticData.put(getKey("provinceCode"), arg);
            return this;
        }

        /**
        * The zip or postal code of the address.
        */

        public String getZip() {
            return (String) get("zip");
        }

        public MailingAddress setZip(String arg) {
            optimisticData.put(getKey("zip"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address1": return false;

                case "address2": return false;

                case "city": return false;

                case "company": return false;

                case "country": return false;

                case "countryCode": return false;

                case "countryCodeV2": return false;

                case "firstName": return false;

                case "formatted": return false;

                case "formattedArea": return false;

                case "id": return false;

                case "lastName": return false;

                case "latitude": return false;

                case "longitude": return false;

                case "name": return false;

                case "phone": return false;

                case "province": return false;

                case "provinceCode": return false;

                case "zip": return false;

                default: return false;
            }
        }
    }

    public interface MailingAddressConnectionQueryDefinition {
        void define(MailingAddressConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple MailingAddresses.
    */
    public static class MailingAddressConnectionQuery extends Query<MailingAddressConnectionQuery> {
        MailingAddressConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public MailingAddressConnectionQuery edges(MailingAddressEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in MailingAddressEdge.
        */
        public MailingAddressConnectionQuery nodes(MailingAddressQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public MailingAddressConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple MailingAddresses.
    */
    public static class MailingAddressConnection extends AbstractResponse<MailingAddressConnection> {
        public MailingAddressConnection() {
        }

        public MailingAddressConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<MailingAddressEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MailingAddressEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<MailingAddress> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MailingAddress(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MailingAddressConnection";
        }

        /**
        * A list of edges.
        */

        public List<MailingAddressEdge> getEdges() {
            return (List<MailingAddressEdge>) get("edges");
        }

        public MailingAddressConnection setEdges(List<MailingAddressEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in MailingAddressEdge.
        */

        public List<MailingAddress> getNodes() {
            return (List<MailingAddress>) get("nodes");
        }

        public MailingAddressConnection setNodes(List<MailingAddress> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public MailingAddressConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface MailingAddressEdgeQueryDefinition {
        void define(MailingAddressEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one MailingAddress and a cursor during pagination.
    */
    public static class MailingAddressEdgeQuery extends Query<MailingAddressEdgeQuery> {
        MailingAddressEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public MailingAddressEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of MailingAddressEdge.
        */
        public MailingAddressEdgeQuery node(MailingAddressQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one MailingAddress and a cursor during pagination.
    */
    public static class MailingAddressEdge extends AbstractResponse<MailingAddressEdge> {
        public MailingAddressEdge() {
        }

        public MailingAddressEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new MailingAddress(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MailingAddressEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public MailingAddressEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of MailingAddressEdge.
        */

        public MailingAddress getNode() {
            return (MailingAddress) get("node");
        }

        public MailingAddressEdge setNode(MailingAddress arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public static class MailingAddressInput implements Serializable {
        private Input<String> address1 = Input.undefined();

        private Input<String> address2 = Input.undefined();

        private Input<String> city = Input.undefined();

        private Input<String> company = Input.undefined();

        private Input<String> country = Input.undefined();

        private Input<String> firstName = Input.undefined();

        private Input<String> lastName = Input.undefined();

        private Input<String> phone = Input.undefined();

        private Input<String> province = Input.undefined();

        private Input<String> zip = Input.undefined();

        public String getAddress1() {
            return address1.getValue();
        }

        public Input<String> getAddress1Input() {
            return address1;
        }

        public MailingAddressInput setAddress1(String address1) {
            this.address1 = Input.optional(address1);
            return this;
        }

        public MailingAddressInput setAddress1Input(Input<String> address1) {
            if (address1 == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.address1 = address1;
            return this;
        }

        public String getAddress2() {
            return address2.getValue();
        }

        public Input<String> getAddress2Input() {
            return address2;
        }

        public MailingAddressInput setAddress2(String address2) {
            this.address2 = Input.optional(address2);
            return this;
        }

        public MailingAddressInput setAddress2Input(Input<String> address2) {
            if (address2 == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.address2 = address2;
            return this;
        }

        public String getCity() {
            return city.getValue();
        }

        public Input<String> getCityInput() {
            return city;
        }

        public MailingAddressInput setCity(String city) {
            this.city = Input.optional(city);
            return this;
        }

        public MailingAddressInput setCityInput(Input<String> city) {
            if (city == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.city = city;
            return this;
        }

        public String getCompany() {
            return company.getValue();
        }

        public Input<String> getCompanyInput() {
            return company;
        }

        public MailingAddressInput setCompany(String company) {
            this.company = Input.optional(company);
            return this;
        }

        public MailingAddressInput setCompanyInput(Input<String> company) {
            if (company == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.company = company;
            return this;
        }

        public String getCountry() {
            return country.getValue();
        }

        public Input<String> getCountryInput() {
            return country;
        }

        public MailingAddressInput setCountry(String country) {
            this.country = Input.optional(country);
            return this;
        }

        public MailingAddressInput setCountryInput(Input<String> country) {
            if (country == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.country = country;
            return this;
        }

        public String getFirstName() {
            return firstName.getValue();
        }

        public Input<String> getFirstNameInput() {
            return firstName;
        }

        public MailingAddressInput setFirstName(String firstName) {
            this.firstName = Input.optional(firstName);
            return this;
        }

        public MailingAddressInput setFirstNameInput(Input<String> firstName) {
            if (firstName == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.firstName = firstName;
            return this;
        }

        public String getLastName() {
            return lastName.getValue();
        }

        public Input<String> getLastNameInput() {
            return lastName;
        }

        public MailingAddressInput setLastName(String lastName) {
            this.lastName = Input.optional(lastName);
            return this;
        }

        public MailingAddressInput setLastNameInput(Input<String> lastName) {
            if (lastName == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.lastName = lastName;
            return this;
        }

        public String getPhone() {
            return phone.getValue();
        }

        public Input<String> getPhoneInput() {
            return phone;
        }

        public MailingAddressInput setPhone(String phone) {
            this.phone = Input.optional(phone);
            return this;
        }

        public MailingAddressInput setPhoneInput(Input<String> phone) {
            if (phone == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.phone = phone;
            return this;
        }

        public String getProvince() {
            return province.getValue();
        }

        public Input<String> getProvinceInput() {
            return province;
        }

        public MailingAddressInput setProvince(String province) {
            this.province = Input.optional(province);
            return this;
        }

        public MailingAddressInput setProvinceInput(Input<String> province) {
            if (province == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.province = province;
            return this;
        }

        public String getZip() {
            return zip.getValue();
        }

        public Input<String> getZipInput() {
            return zip;
        }

        public MailingAddressInput setZip(String zip) {
            this.zip = Input.optional(zip);
            return this;
        }

        public MailingAddressInput setZipInput(Input<String> zip) {
            if (zip == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.zip = zip;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.address1.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address1:");
                if (address1.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, address1.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.address2.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address2:");
                if (address2.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, address2.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.city.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                if (city.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, city.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.company.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company:");
                if (company.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, company.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.country.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                if (country.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, country.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.firstName.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("firstName:");
                if (firstName.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, firstName.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.lastName.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("lastName:");
                if (lastName.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, lastName.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.phone.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                if (phone.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, phone.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.province.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("province:");
                if (province.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, province.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.zip.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("zip:");
                if (zip.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, zip.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface ManualDiscountApplicationQueryDefinition {
        void define(ManualDiscountApplicationQuery _queryBuilder);
    }

    /**
    * Manual discount applications capture the intentions of a discount that was manually created.
    */
    public static class ManualDiscountApplicationQuery extends Query<ManualDiscountApplicationQuery> {
        ManualDiscountApplicationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */
        public ManualDiscountApplicationQuery allocationMethod() {
            startField("allocationMethod");

            return this;
        }

        /**
        * The description of the application.
        */
        public ManualDiscountApplicationQuery description() {
            startField("description");

            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */
        public ManualDiscountApplicationQuery targetSelection() {
            startField("targetSelection");

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public ManualDiscountApplicationQuery targetType() {
            startField("targetType");

            return this;
        }

        /**
        * The title of the application.
        */
        public ManualDiscountApplicationQuery title() {
            startField("title");

            return this;
        }

        /**
        * The value of the discount application.
        */
        public ManualDiscountApplicationQuery value(PricingValueQueryDefinition queryDef) {
            startField("value");

            _queryBuilder.append('{');
            queryDef.define(new PricingValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Manual discount applications capture the intentions of a discount that was manually created.
    */
    public static class ManualDiscountApplication extends AbstractResponse<ManualDiscountApplication> implements DiscountApplication {
        public ManualDiscountApplication() {
        }

        public ManualDiscountApplication(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "allocationMethod": {
                        responseData.put(key, DiscountApplicationAllocationMethod.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "targetSelection": {
                        responseData.put(key, DiscountApplicationTargetSelection.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "value": {
                        responseData.put(key, UnknownPricingValue.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ManualDiscountApplication";
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */

        public DiscountApplicationAllocationMethod getAllocationMethod() {
            return (DiscountApplicationAllocationMethod) get("allocationMethod");
        }

        public ManualDiscountApplication setAllocationMethod(DiscountApplicationAllocationMethod arg) {
            optimisticData.put(getKey("allocationMethod"), arg);
            return this;
        }

        /**
        * The description of the application.
        */

        public String getDescription() {
            return (String) get("description");
        }

        public ManualDiscountApplication setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */

        public DiscountApplicationTargetSelection getTargetSelection() {
            return (DiscountApplicationTargetSelection) get("targetSelection");
        }

        public ManualDiscountApplication setTargetSelection(DiscountApplicationTargetSelection arg) {
            optimisticData.put(getKey("targetSelection"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public ManualDiscountApplication setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        /**
        * The title of the application.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public ManualDiscountApplication setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * The value of the discount application.
        */

        public PricingValue getValue() {
            return (PricingValue) get("value");
        }

        public ManualDiscountApplication setValue(PricingValue arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "allocationMethod": return false;

                case "description": return false;

                case "targetSelection": return false;

                case "targetType": return false;

                case "title": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    public interface MarketQueryDefinition {
        void define(MarketQuery _queryBuilder);
    }

    /**
    * A group of one or more regions of the world that a merchant is targeting for sales. To learn more
    * about markets, refer to [the Shopify Markets conceptual overview](/docs/apps/markets).
    */
    public static class MarketQuery extends Query<MarketQuery> {
        MarketQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * A human-readable unique string for the market automatically generated from its title.
        */
        public MarketQuery handle() {
            startField("handle");

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public MarketQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public MarketQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public MarketQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * A group of one or more regions of the world that a merchant is targeting for sales. To learn more
    * about markets, refer to [the Shopify Markets conceptual overview](/docs/apps/markets).
    */
    public static class Market extends AbstractResponse<Market> implements HasMetafields, MetafieldParentResource, Node {
        public Market() {
        }

        public Market(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Market(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Market";
        }

        /**
        * A human-readable unique string for the market automatically generated from its title.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public Market setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Market setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Market setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "handle": return false;

                case "id": return false;

                case "metafield": return true;

                case "metafields": return true;

                default: return false;
            }
        }
    }

    public interface MediaQueryDefinition {
        void define(MediaQuery _queryBuilder);
    }

    /**
    * Represents a media interface.
    */
    public static class MediaQuery extends Query<MediaQuery> {
        MediaQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */
        public MediaQuery alt() {
            startField("alt");

            return this;
        }

        /**
        * A globally-unique ID.
        */
        public MediaQuery id() {
            startField("id");

            return this;
        }

        /**
        * The media content type.
        */
        public MediaQuery mediaContentType() {
            startField("mediaContentType");

            return this;
        }

        /**
        * The presentation for a media.
        */
        public MediaQuery presentation(MediaPresentationQueryDefinition queryDef) {
            startField("presentation");

            _queryBuilder.append('{');
            queryDef.define(new MediaPresentationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The preview image for the media.
        */
        public MediaQuery previewImage(ImageQueryDefinition queryDef) {
            startField("previewImage");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public MediaQuery onExternalVideo(ExternalVideoQueryDefinition queryDef) {
            startInlineFragment("ExternalVideo");
            queryDef.define(new ExternalVideoQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MediaQuery onMediaImage(MediaImageQueryDefinition queryDef) {
            startInlineFragment("MediaImage");
            queryDef.define(new MediaImageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MediaQuery onModel3d(Model3dQueryDefinition queryDef) {
            startInlineFragment("Model3d");
            queryDef.define(new Model3dQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MediaQuery onVideo(VideoQueryDefinition queryDef) {
            startInlineFragment("Video");
            queryDef.define(new VideoQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface Media {
        String getGraphQlTypeName();

        String getAlt();

        ID getId();

        MediaContentType getMediaContentType();

        MediaPresentation getPresentation();

        Image getPreviewImage();
    }

    /**
    * Represents a media interface.
    */
    public static class UnknownMedia extends AbstractResponse<UnknownMedia> implements Media {
        public UnknownMedia() {
        }

        public UnknownMedia(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "alt": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "mediaContentType": {
                        responseData.put(key, MediaContentType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "presentation": {
                        MediaPresentation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaPresentation(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "previewImage": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static Media create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "ExternalVideo": {
                    return new ExternalVideo(fields);
                }

                case "MediaImage": {
                    return new MediaImage(fields);
                }

                case "Model3d": {
                    return new Model3d(fields);
                }

                case "Video": {
                    return new Video(fields);
                }

                default: {
                    return new UnknownMedia(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */

        public String getAlt() {
            return (String) get("alt");
        }

        public UnknownMedia setAlt(String arg) {
            optimisticData.put(getKey("alt"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public UnknownMedia setId(ID arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The media content type.
        */

        public MediaContentType getMediaContentType() {
            return (MediaContentType) get("mediaContentType");
        }

        public UnknownMedia setMediaContentType(MediaContentType arg) {
            optimisticData.put(getKey("mediaContentType"), arg);
            return this;
        }

        /**
        * The presentation for a media.
        */

        public MediaPresentation getPresentation() {
            return (MediaPresentation) get("presentation");
        }

        public UnknownMedia setPresentation(MediaPresentation arg) {
            optimisticData.put(getKey("presentation"), arg);
            return this;
        }

        /**
        * The preview image for the media.
        */

        public Image getPreviewImage() {
            return (Image) get("previewImage");
        }

        public UnknownMedia setPreviewImage(Image arg) {
            optimisticData.put(getKey("previewImage"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "alt": return false;

                case "id": return false;

                case "mediaContentType": return false;

                case "presentation": return true;

                case "previewImage": return true;

                default: return false;
            }
        }
    }

    public interface MediaConnectionQueryDefinition {
        void define(MediaConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Media.
    */
    public static class MediaConnectionQuery extends Query<MediaConnectionQuery> {
        MediaConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public MediaConnectionQuery edges(MediaEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new MediaEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in MediaEdge.
        */
        public MediaConnectionQuery nodes(MediaQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new MediaQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public MediaConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Media.
    */
    public static class MediaConnection extends AbstractResponse<MediaConnection> {
        public MediaConnection() {
        }

        public MediaConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<MediaEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MediaEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Media> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownMedia.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MediaConnection";
        }

        /**
        * A list of edges.
        */

        public List<MediaEdge> getEdges() {
            return (List<MediaEdge>) get("edges");
        }

        public MediaConnection setEdges(List<MediaEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in MediaEdge.
        */

        public List<Media> getNodes() {
            return (List<Media>) get("nodes");
        }

        public MediaConnection setNodes(List<Media> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public MediaConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return false;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    /**
    * The possible content types for a media object.
    */
    public enum MediaContentType {
        /**
        * An externally hosted video.
        */
        EXTERNAL_VIDEO,

        /**
        * A Shopify hosted image.
        */
        IMAGE,

        /**
        * A 3d model.
        */
        MODEL_3D,

        /**
        * A Shopify hosted video.
        */
        VIDEO,

        UNKNOWN_VALUE;

        public static MediaContentType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "EXTERNAL_VIDEO": {
                    return EXTERNAL_VIDEO;
                }

                case "IMAGE": {
                    return IMAGE;
                }

                case "MODEL_3D": {
                    return MODEL_3D;
                }

                case "VIDEO": {
                    return VIDEO;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case EXTERNAL_VIDEO: {
                    return "EXTERNAL_VIDEO";
                }

                case IMAGE: {
                    return "IMAGE";
                }

                case MODEL_3D: {
                    return "MODEL_3D";
                }

                case VIDEO: {
                    return "VIDEO";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface MediaEdgeQueryDefinition {
        void define(MediaEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Media and a cursor during pagination.
    */
    public static class MediaEdgeQuery extends Query<MediaEdgeQuery> {
        MediaEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public MediaEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of MediaEdge.
        */
        public MediaEdgeQuery node(MediaQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new MediaQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Media and a cursor during pagination.
    */
    public static class MediaEdge extends AbstractResponse<MediaEdge> {
        public MediaEdge() {
        }

        public MediaEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, UnknownMedia.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MediaEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public MediaEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of MediaEdge.
        */

        public Media getNode() {
            return (Media) get("node");
        }

        public MediaEdge setNode(Media arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return false;

                default: return false;
            }
        }
    }

    /**
    * Host for a Media Resource.
    */
    public enum MediaHost {
        /**
        * Host for Vimeo embedded videos.
        */
        VIMEO,

        /**
        * Host for YouTube embedded videos.
        */
        YOUTUBE,

        UNKNOWN_VALUE;

        public static MediaHost fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "VIMEO": {
                    return VIMEO;
                }

                case "YOUTUBE": {
                    return YOUTUBE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case VIMEO: {
                    return "VIMEO";
                }

                case YOUTUBE: {
                    return "YOUTUBE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface MediaImageQueryDefinition {
        void define(MediaImageQuery _queryBuilder);
    }

    /**
    * Represents a Shopify hosted image.
    */
    public static class MediaImageQuery extends Query<MediaImageQuery> {
        MediaImageQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */
        public MediaImageQuery alt() {
            startField("alt");

            return this;
        }

        /**
        * The image for the media.
        */
        public MediaImageQuery image(ImageQueryDefinition queryDef) {
            startField("image");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The media content type.
        */
        public MediaImageQuery mediaContentType() {
            startField("mediaContentType");

            return this;
        }

        /**
        * The presentation for a media.
        */
        public MediaImageQuery presentation(MediaPresentationQueryDefinition queryDef) {
            startField("presentation");

            _queryBuilder.append('{');
            queryDef.define(new MediaPresentationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The preview image for the media.
        */
        public MediaImageQuery previewImage(ImageQueryDefinition queryDef) {
            startField("previewImage");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a Shopify hosted image.
    */
    public static class MediaImage extends AbstractResponse<MediaImage> implements Media, MetafieldReference, Node {
        public MediaImage() {
        }

        public MediaImage(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "alt": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "image": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "mediaContentType": {
                        responseData.put(key, MediaContentType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "presentation": {
                        MediaPresentation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaPresentation(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "previewImage": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public MediaImage(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "MediaImage";
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */

        public String getAlt() {
            return (String) get("alt");
        }

        public MediaImage setAlt(String arg) {
            optimisticData.put(getKey("alt"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The image for the media.
        */

        public Image getImage() {
            return (Image) get("image");
        }

        public MediaImage setImage(Image arg) {
            optimisticData.put(getKey("image"), arg);
            return this;
        }

        /**
        * The media content type.
        */

        public MediaContentType getMediaContentType() {
            return (MediaContentType) get("mediaContentType");
        }

        public MediaImage setMediaContentType(MediaContentType arg) {
            optimisticData.put(getKey("mediaContentType"), arg);
            return this;
        }

        /**
        * The presentation for a media.
        */

        public MediaPresentation getPresentation() {
            return (MediaPresentation) get("presentation");
        }

        public MediaImage setPresentation(MediaPresentation arg) {
            optimisticData.put(getKey("presentation"), arg);
            return this;
        }

        /**
        * The preview image for the media.
        */

        public Image getPreviewImage() {
            return (Image) get("previewImage");
        }

        public MediaImage setPreviewImage(Image arg) {
            optimisticData.put(getKey("previewImage"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "alt": return false;

                case "id": return false;

                case "image": return true;

                case "mediaContentType": return false;

                case "presentation": return true;

                case "previewImage": return true;

                default: return false;
            }
        }
    }

    public interface MediaPresentationQueryDefinition {
        void define(MediaPresentationQuery _queryBuilder);
    }

    /**
    * A media presentation.
    */
    public static class MediaPresentationQuery extends Query<MediaPresentationQuery> {
        MediaPresentationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * A JSON object representing a presentation view.
        */
        public MediaPresentationQuery asJson(MediaPresentationFormat format) {
            startField("asJson");

            _queryBuilder.append("(format:");
            _queryBuilder.append(format.toString());

            _queryBuilder.append(')');

            return this;
        }
    }

    /**
    * A media presentation.
    */
    public static class MediaPresentation extends AbstractResponse<MediaPresentation> implements Node {
        public MediaPresentation() {
        }

        public MediaPresentation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "asJson": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public MediaPresentation(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "MediaPresentation";
        }

        /**
        * A JSON object representing a presentation view.
        */

        public String getAsJson() {
            return (String) get("asJson");
        }

        public MediaPresentation setAsJson(String arg) {
            optimisticData.put(getKey("asJson"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "asJson": return false;

                case "id": return false;

                default: return false;
            }
        }
    }

    /**
    * The possible formats for a media presentation.
    */
    public enum MediaPresentationFormat {
        /**
        * A media image presentation.
        */
        IMAGE,

        /**
        * A model viewer presentation.
        */
        MODEL_VIEWER,

        UNKNOWN_VALUE;

        public static MediaPresentationFormat fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "IMAGE": {
                    return IMAGE;
                }

                case "MODEL_VIEWER": {
                    return MODEL_VIEWER;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case IMAGE: {
                    return "IMAGE";
                }

                case MODEL_VIEWER: {
                    return "MODEL_VIEWER";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface MenuQueryDefinition {
        void define(MenuQuery _queryBuilder);
    }

    /**
    * A [navigation menu](https://help.shopify.com/manual/online-store/menus-and-links) representing a
    * hierarchy
    * of hyperlinks (items).
    */
    public static class MenuQuery extends Query<MenuQuery> {
        MenuQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The menu's handle.
        */
        public MenuQuery handle() {
            startField("handle");

            return this;
        }

        /**
        * The menu's child items.
        */
        public MenuQuery items(MenuItemQueryDefinition queryDef) {
            startField("items");

            _queryBuilder.append('{');
            queryDef.define(new MenuItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The count of items on the menu.
        */
        public MenuQuery itemsCount() {
            startField("itemsCount");

            return this;
        }

        /**
        * The menu's title.
        */
        public MenuQuery title() {
            startField("title");

            return this;
        }
    }

    /**
    * A [navigation menu](https://help.shopify.com/manual/online-store/menus-and-links) representing a
    * hierarchy
    * of hyperlinks (items).
    */
    public static class Menu extends AbstractResponse<Menu> implements Node {
        public Menu() {
        }

        public Menu(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "items": {
                        List<MenuItem> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MenuItem(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "itemsCount": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Menu(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Menu";
        }

        /**
        * The menu's handle.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public Menu setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The menu's child items.
        */

        public List<MenuItem> getItems() {
            return (List<MenuItem>) get("items");
        }

        public Menu setItems(List<MenuItem> arg) {
            optimisticData.put(getKey("items"), arg);
            return this;
        }

        /**
        * The count of items on the menu.
        */

        public Integer getItemsCount() {
            return (Integer) get("itemsCount");
        }

        public Menu setItemsCount(Integer arg) {
            optimisticData.put(getKey("itemsCount"), arg);
            return this;
        }

        /**
        * The menu's title.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public Menu setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "handle": return false;

                case "id": return false;

                case "items": return true;

                case "itemsCount": return false;

                case "title": return false;

                default: return false;
            }
        }
    }

    public interface MenuItemQueryDefinition {
        void define(MenuItemQuery _queryBuilder);
    }

    /**
    * A menu item within a parent menu.
    */
    public static class MenuItemQuery extends Query<MenuItemQuery> {
        MenuItemQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The menu item's child items.
        */
        public MenuItemQuery items(MenuItemQueryDefinition queryDef) {
            startField("items");

            _queryBuilder.append('{');
            queryDef.define(new MenuItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The linked resource.
        */
        public MenuItemQuery resource(MenuItemResourceQueryDefinition queryDef) {
            startField("resource");

            _queryBuilder.append('{');
            queryDef.define(new MenuItemResourceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The ID of the linked resource.
        */
        public MenuItemQuery resourceId() {
            startField("resourceId");

            return this;
        }

        /**
        * The menu item's tags to filter a collection.
        */
        public MenuItemQuery tags() {
            startField("tags");

            return this;
        }

        /**
        * The menu item's title.
        */
        public MenuItemQuery title() {
            startField("title");

            return this;
        }

        /**
        * The menu item's type.
        */
        public MenuItemQuery type() {
            startField("type");

            return this;
        }

        /**
        * The menu item's URL.
        */
        public MenuItemQuery url() {
            startField("url");

            return this;
        }
    }

    /**
    * A menu item within a parent menu.
    */
    public static class MenuItem extends AbstractResponse<MenuItem> implements Node {
        public MenuItem() {
        }

        public MenuItem(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "items": {
                        List<MenuItem> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MenuItem(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "resource": {
                        MenuItemResource optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownMenuItemResource.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "resourceId": {
                        ID optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ID(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "tags": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "type": {
                        responseData.put(key, MenuItemType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "url": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public MenuItem(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "MenuItem";
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The menu item's child items.
        */

        public List<MenuItem> getItems() {
            return (List<MenuItem>) get("items");
        }

        public MenuItem setItems(List<MenuItem> arg) {
            optimisticData.put(getKey("items"), arg);
            return this;
        }

        /**
        * The linked resource.
        */

        public MenuItemResource getResource() {
            return (MenuItemResource) get("resource");
        }

        public MenuItem setResource(MenuItemResource arg) {
            optimisticData.put(getKey("resource"), arg);
            return this;
        }

        /**
        * The ID of the linked resource.
        */

        public ID getResourceId() {
            return (ID) get("resourceId");
        }

        public MenuItem setResourceId(ID arg) {
            optimisticData.put(getKey("resourceId"), arg);
            return this;
        }

        /**
        * The menu item's tags to filter a collection.
        */

        public List<String> getTags() {
            return (List<String>) get("tags");
        }

        public MenuItem setTags(List<String> arg) {
            optimisticData.put(getKey("tags"), arg);
            return this;
        }

        /**
        * The menu item's title.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public MenuItem setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * The menu item's type.
        */

        public MenuItemType getType() {
            return (MenuItemType) get("type");
        }

        public MenuItem setType(MenuItemType arg) {
            optimisticData.put(getKey("type"), arg);
            return this;
        }

        /**
        * The menu item's URL.
        */

        public String getUrl() {
            return (String) get("url");
        }

        public MenuItem setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "id": return false;

                case "items": return true;

                case "resource": return false;

                case "resourceId": return false;

                case "tags": return false;

                case "title": return false;

                case "type": return false;

                case "url": return false;

                default: return false;
            }
        }
    }

    public interface MenuItemResourceQueryDefinition {
        void define(MenuItemResourceQuery _queryBuilder);
    }

    /**
    * The list of possible resources a `MenuItem` can reference.
    */
    public static class MenuItemResourceQuery extends Query<MenuItemResourceQuery> {
        MenuItemResourceQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public MenuItemResourceQuery onArticle(ArticleQueryDefinition queryDef) {
            startInlineFragment("Article");
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MenuItemResourceQuery onBlog(BlogQueryDefinition queryDef) {
            startInlineFragment("Blog");
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MenuItemResourceQuery onCollection(CollectionQueryDefinition queryDef) {
            startInlineFragment("Collection");
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MenuItemResourceQuery onMetaobject(MetaobjectQueryDefinition queryDef) {
            startInlineFragment("Metaobject");
            queryDef.define(new MetaobjectQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MenuItemResourceQuery onPage(PageQueryDefinition queryDef) {
            startInlineFragment("Page");
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MenuItemResourceQuery onProduct(ProductQueryDefinition queryDef) {
            startInlineFragment("Product");
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MenuItemResourceQuery onShopPolicy(ShopPolicyQueryDefinition queryDef) {
            startInlineFragment("ShopPolicy");
            queryDef.define(new ShopPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface MenuItemResource {
        String getGraphQlTypeName();
    }

    /**
    * The list of possible resources a `MenuItem` can reference.
    */
    public static class UnknownMenuItemResource extends AbstractResponse<UnknownMenuItemResource> implements MenuItemResource {
        public UnknownMenuItemResource() {
        }

        public UnknownMenuItemResource(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static MenuItemResource create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "Article": {
                    return new Article(fields);
                }

                case "Blog": {
                    return new Blog(fields);
                }

                case "Collection": {
                    return new Collection(fields);
                }

                case "Metaobject": {
                    return new Metaobject(fields);
                }

                case "Page": {
                    return new Page(fields);
                }

                case "Product": {
                    return new Product(fields);
                }

                case "ShopPolicy": {
                    return new ShopPolicy(fields);
                }

                default: {
                    return new UnknownMenuItemResource(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    /**
    * A menu item type.
    */
    public enum MenuItemType {
        /**
        * An article link.
        */
        ARTICLE,

        /**
        * A blog link.
        */
        BLOG,

        /**
        * A catalog link.
        */
        CATALOG,

        /**
        * A collection link.
        */
        COLLECTION,

        /**
        * A collection link.
        */
        COLLECTIONS,

        /**
        * A frontpage link.
        */
        FRONTPAGE,

        /**
        * An http link.
        */
        HTTP,

        /**
        * A metaobject page link.
        */
        METAOBJECT,

        /**
        * A page link.
        */
        PAGE,

        /**
        * A product link.
        */
        PRODUCT,

        /**
        * A search link.
        */
        SEARCH,

        /**
        * A shop policy link.
        */
        SHOP_POLICY,

        UNKNOWN_VALUE;

        public static MenuItemType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ARTICLE": {
                    return ARTICLE;
                }

                case "BLOG": {
                    return BLOG;
                }

                case "CATALOG": {
                    return CATALOG;
                }

                case "COLLECTION": {
                    return COLLECTION;
                }

                case "COLLECTIONS": {
                    return COLLECTIONS;
                }

                case "FRONTPAGE": {
                    return FRONTPAGE;
                }

                case "HTTP": {
                    return HTTP;
                }

                case "METAOBJECT": {
                    return METAOBJECT;
                }

                case "PAGE": {
                    return PAGE;
                }

                case "PRODUCT": {
                    return PRODUCT;
                }

                case "SEARCH": {
                    return SEARCH;
                }

                case "SHOP_POLICY": {
                    return SHOP_POLICY;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ARTICLE: {
                    return "ARTICLE";
                }

                case BLOG: {
                    return "BLOG";
                }

                case CATALOG: {
                    return "CATALOG";
                }

                case COLLECTION: {
                    return "COLLECTION";
                }

                case COLLECTIONS: {
                    return "COLLECTIONS";
                }

                case FRONTPAGE: {
                    return "FRONTPAGE";
                }

                case HTTP: {
                    return "HTTP";
                }

                case METAOBJECT: {
                    return "METAOBJECT";
                }

                case PAGE: {
                    return "PAGE";
                }

                case PRODUCT: {
                    return "PRODUCT";
                }

                case SEARCH: {
                    return "SEARCH";
                }

                case SHOP_POLICY: {
                    return "SHOP_POLICY";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface MerchandiseQueryDefinition {
        void define(MerchandiseQuery _queryBuilder);
    }

    /**
    * The merchandise to be purchased at checkout.
    */
    public static class MerchandiseQuery extends Query<MerchandiseQuery> {
        MerchandiseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public MerchandiseQuery onProductVariant(ProductVariantQueryDefinition queryDef) {
            startInlineFragment("ProductVariant");
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface Merchandise {
        String getGraphQlTypeName();
    }

    /**
    * The merchandise to be purchased at checkout.
    */
    public static class UnknownMerchandise extends AbstractResponse<UnknownMerchandise> implements Merchandise {
        public UnknownMerchandise() {
        }

        public UnknownMerchandise(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static Merchandise create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "ProductVariant": {
                    return new ProductVariant(fields);
                }

                default: {
                    return new UnknownMerchandise(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface MetafieldQueryDefinition {
        void define(MetafieldQuery _queryBuilder);
    }

    /**
    * Metafields represent custom metadata attached to a resource. Metafields can be sorted into
    * namespaces and are
    * comprised of keys, values, and value types.
    */
    public static class MetafieldQuery extends Query<MetafieldQuery> {
        MetafieldQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The date and time when the storefront metafield was created.
        */
        public MetafieldQuery createdAt() {
            startField("createdAt");

            return this;
        }

        /**
        * The description of a metafield.
        */
        public MetafieldQuery description() {
            startField("description");

            return this;
        }

        /**
        * The unique identifier for the metafield within its namespace.
        */
        public MetafieldQuery key() {
            startField("key");

            return this;
        }

        /**
        * The container for a group of metafields that the metafield is associated with.
        */
        public MetafieldQuery namespace() {
            startField("namespace");

            return this;
        }

        /**
        * The type of resource that the metafield is attached to.
        */
        public MetafieldQuery parentResource(MetafieldParentResourceQueryDefinition queryDef) {
            startField("parentResource");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldParentResourceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Returns a reference object if the metafield's type is a resource reference.
        */
        public MetafieldQuery reference(MetafieldReferenceQueryDefinition queryDef) {
            startField("reference");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldReferenceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ReferencesArguments extends Arguments {
            ReferencesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public ReferencesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public ReferencesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public ReferencesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public ReferencesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface ReferencesArgumentsDefinition {
            void define(ReferencesArguments args);
        }

        /**
        * A list of reference objects if the metafield's type is a resource reference list.
        */
        public MetafieldQuery references(MetafieldReferenceConnectionQueryDefinition queryDef) {
            return references(args -> {}, queryDef);
        }

        /**
        * A list of reference objects if the metafield's type is a resource reference list.
        */
        public MetafieldQuery references(ReferencesArgumentsDefinition argsDef, MetafieldReferenceConnectionQueryDefinition queryDef) {
            startField("references");

            ReferencesArguments args = new ReferencesArguments(_queryBuilder);
            argsDef.define(args);
            ReferencesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new MetafieldReferenceConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The type name of the metafield.
        * Refer to the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
        */
        public MetafieldQuery type() {
            startField("type");

            return this;
        }

        /**
        * The date and time when the metafield was last updated.
        */
        public MetafieldQuery updatedAt() {
            startField("updatedAt");

            return this;
        }

        /**
        * The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
        */
        public MetafieldQuery value() {
            startField("value");

            return this;
        }
    }

    /**
    * Metafields represent custom metadata attached to a resource. Metafields can be sorted into
    * namespaces and are
    * comprised of keys, values, and value types.
    */
    public static class Metafield extends AbstractResponse<Metafield> implements Node {
        public Metafield() {
        }

        public Metafield(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "createdAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "key": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "namespace": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "parentResource": {
                        responseData.put(key, UnknownMetafieldParentResource.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "reference": {
                        MetafieldReference optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownMetafieldReference.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "references": {
                        MetafieldReferenceConnection optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MetafieldReferenceConnection(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "type": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "value": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Metafield(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Metafield";
        }

        /**
        * The date and time when the storefront metafield was created.
        */

        public DateTime getCreatedAt() {
            return (DateTime) get("createdAt");
        }

        public Metafield setCreatedAt(DateTime arg) {
            optimisticData.put(getKey("createdAt"), arg);
            return this;
        }

        /**
        * The description of a metafield.
        */

        public String getDescription() {
            return (String) get("description");
        }

        public Metafield setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The unique identifier for the metafield within its namespace.
        */

        public String getKey() {
            return (String) get("key");
        }

        public Metafield setKey(String arg) {
            optimisticData.put(getKey("key"), arg);
            return this;
        }

        /**
        * The container for a group of metafields that the metafield is associated with.
        */

        public String getNamespace() {
            return (String) get("namespace");
        }

        public Metafield setNamespace(String arg) {
            optimisticData.put(getKey("namespace"), arg);
            return this;
        }

        /**
        * The type of resource that the metafield is attached to.
        */

        public MetafieldParentResource getParentResource() {
            return (MetafieldParentResource) get("parentResource");
        }

        public Metafield setParentResource(MetafieldParentResource arg) {
            optimisticData.put(getKey("parentResource"), arg);
            return this;
        }

        /**
        * Returns a reference object if the metafield's type is a resource reference.
        */

        public MetafieldReference getReference() {
            return (MetafieldReference) get("reference");
        }

        public Metafield setReference(MetafieldReference arg) {
            optimisticData.put(getKey("reference"), arg);
            return this;
        }

        /**
        * A list of reference objects if the metafield's type is a resource reference list.
        */

        public MetafieldReferenceConnection getReferences() {
            return (MetafieldReferenceConnection) get("references");
        }

        public Metafield setReferences(MetafieldReferenceConnection arg) {
            optimisticData.put(getKey("references"), arg);
            return this;
        }

        /**
        * The type name of the metafield.
        * Refer to the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
        */

        public String getType() {
            return (String) get("type");
        }

        public Metafield setType(String arg) {
            optimisticData.put(getKey("type"), arg);
            return this;
        }

        /**
        * The date and time when the metafield was last updated.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public Metafield setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        /**
        * The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
        */

        public String getValue() {
            return (String) get("value");
        }

        public Metafield setValue(String arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "createdAt": return false;

                case "description": return false;

                case "id": return false;

                case "key": return false;

                case "namespace": return false;

                case "parentResource": return false;

                case "reference": return false;

                case "references": return true;

                case "type": return false;

                case "updatedAt": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    /**
    * Possible error codes that can be returned by `MetafieldDeleteUserError`.
    */
    public enum MetafieldDeleteErrorCode {
        /**
        * The owner ID is invalid.
        */
        INVALID_OWNER,

        /**
        * Metafield not found.
        */
        METAFIELD_DOES_NOT_EXIST,

        UNKNOWN_VALUE;

        public static MetafieldDeleteErrorCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "INVALID_OWNER": {
                    return INVALID_OWNER;
                }

                case "METAFIELD_DOES_NOT_EXIST": {
                    return METAFIELD_DOES_NOT_EXIST;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case INVALID_OWNER: {
                    return "INVALID_OWNER";
                }

                case METAFIELD_DOES_NOT_EXIST: {
                    return "METAFIELD_DOES_NOT_EXIST";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface MetafieldDeleteUserErrorQueryDefinition {
        void define(MetafieldDeleteUserErrorQuery _queryBuilder);
    }

    /**
    * An error that occurs during the execution of cart metafield deletion.
    */
    public static class MetafieldDeleteUserErrorQuery extends Query<MetafieldDeleteUserErrorQuery> {
        MetafieldDeleteUserErrorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The error code.
        */
        public MetafieldDeleteUserErrorQuery code() {
            startField("code");

            return this;
        }

        /**
        * The path to the input field that caused the error.
        */
        public MetafieldDeleteUserErrorQuery field() {
            startField("field");

            return this;
        }

        /**
        * The error message.
        */
        public MetafieldDeleteUserErrorQuery message() {
            startField("message");

            return this;
        }
    }

    /**
    * An error that occurs during the execution of cart metafield deletion.
    */
    public static class MetafieldDeleteUserError extends AbstractResponse<MetafieldDeleteUserError> implements DisplayableError {
        public MetafieldDeleteUserError() {
        }

        public MetafieldDeleteUserError(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        MetafieldDeleteErrorCode optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = MetafieldDeleteErrorCode.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "field": {
                        List<String> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<String> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(jsonAsString(element1, key));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "message": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MetafieldDeleteUserError";
        }

        /**
        * The error code.
        */

        public MetafieldDeleteErrorCode getCode() {
            return (MetafieldDeleteErrorCode) get("code");
        }

        public MetafieldDeleteUserError setCode(MetafieldDeleteErrorCode arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The path to the input field that caused the error.
        */

        public List<String> getField() {
            return (List<String>) get("field");
        }

        public MetafieldDeleteUserError setField(List<String> arg) {
            optimisticData.put(getKey("field"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public MetafieldDeleteUserError setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "field": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    public static class MetafieldFilter implements Serializable {
        private String namespace;

        private String key;

        private String value;

        public MetafieldFilter(String namespace, String key, String value) {
            this.namespace = namespace;

            this.key = key;

            this.value = value;
        }

        public String getNamespace() {
            return namespace;
        }

        public MetafieldFilter setNamespace(String namespace) {
            this.namespace = namespace;
            return this;
        }

        public String getKey() {
            return key;
        }

        public MetafieldFilter setKey(String key) {
            this.key = key;
            return this;
        }

        public String getValue() {
            return value;
        }

        public MetafieldFilter setValue(String value) {
            this.value = value;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("namespace:");
            Query.appendQuotedString(_queryBuilder, namespace.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("value:");
            Query.appendQuotedString(_queryBuilder, value.toString());

            _queryBuilder.append('}');
        }
    }

    public interface MetafieldParentResourceQueryDefinition {
        void define(MetafieldParentResourceQuery _queryBuilder);
    }

    /**
    * A resource that the metafield belongs to.
    */
    public static class MetafieldParentResourceQuery extends Query<MetafieldParentResourceQuery> {
        MetafieldParentResourceQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public MetafieldParentResourceQuery onArticle(ArticleQueryDefinition queryDef) {
            startInlineFragment("Article");
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onBlog(BlogQueryDefinition queryDef) {
            startInlineFragment("Blog");
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onCart(CartQueryDefinition queryDef) {
            startInlineFragment("Cart");
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onCollection(CollectionQueryDefinition queryDef) {
            startInlineFragment("Collection");
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onCompany(CompanyQueryDefinition queryDef) {
            startInlineFragment("Company");
            queryDef.define(new CompanyQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onCompanyLocation(CompanyLocationQueryDefinition queryDef) {
            startInlineFragment("CompanyLocation");
            queryDef.define(new CompanyLocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onCustomer(CustomerQueryDefinition queryDef) {
            startInlineFragment("Customer");
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onLocation(LocationQueryDefinition queryDef) {
            startInlineFragment("Location");
            queryDef.define(new LocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onMarket(MarketQueryDefinition queryDef) {
            startInlineFragment("Market");
            queryDef.define(new MarketQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onOrder(OrderQueryDefinition queryDef) {
            startInlineFragment("Order");
            queryDef.define(new OrderQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onPage(PageQueryDefinition queryDef) {
            startInlineFragment("Page");
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onProduct(ProductQueryDefinition queryDef) {
            startInlineFragment("Product");
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onProductVariant(ProductVariantQueryDefinition queryDef) {
            startInlineFragment("ProductVariant");
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onSellingPlan(SellingPlanQueryDefinition queryDef) {
            startInlineFragment("SellingPlan");
            queryDef.define(new SellingPlanQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldParentResourceQuery onShop(ShopQueryDefinition queryDef) {
            startInlineFragment("Shop");
            queryDef.define(new ShopQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface MetafieldParentResource {
        String getGraphQlTypeName();
    }

    /**
    * A resource that the metafield belongs to.
    */
    public static class UnknownMetafieldParentResource extends AbstractResponse<UnknownMetafieldParentResource> implements MetafieldParentResource {
        public UnknownMetafieldParentResource() {
        }

        public UnknownMetafieldParentResource(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static MetafieldParentResource create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "Article": {
                    return new Article(fields);
                }

                case "Blog": {
                    return new Blog(fields);
                }

                case "Cart": {
                    return new Cart(fields);
                }

                case "Collection": {
                    return new Collection(fields);
                }

                case "Company": {
                    return new Company(fields);
                }

                case "CompanyLocation": {
                    return new CompanyLocation(fields);
                }

                case "Customer": {
                    return new Customer(fields);
                }

                case "Location": {
                    return new Location(fields);
                }

                case "Market": {
                    return new Market(fields);
                }

                case "Order": {
                    return new Order(fields);
                }

                case "Page": {
                    return new Page(fields);
                }

                case "Product": {
                    return new Product(fields);
                }

                case "ProductVariant": {
                    return new ProductVariant(fields);
                }

                case "SellingPlan": {
                    return new SellingPlan(fields);
                }

                case "Shop": {
                    return new Shop(fields);
                }

                default: {
                    return new UnknownMetafieldParentResource(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface MetafieldReferenceQueryDefinition {
        void define(MetafieldReferenceQuery _queryBuilder);
    }

    /**
    * Returns the resource which is being referred to by a metafield.
    */
    public static class MetafieldReferenceQuery extends Query<MetafieldReferenceQuery> {
        MetafieldReferenceQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public MetafieldReferenceQuery onCollection(CollectionQueryDefinition queryDef) {
            startInlineFragment("Collection");
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldReferenceQuery onGenericFile(GenericFileQueryDefinition queryDef) {
            startInlineFragment("GenericFile");
            queryDef.define(new GenericFileQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldReferenceQuery onMediaImage(MediaImageQueryDefinition queryDef) {
            startInlineFragment("MediaImage");
            queryDef.define(new MediaImageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldReferenceQuery onMetaobject(MetaobjectQueryDefinition queryDef) {
            startInlineFragment("Metaobject");
            queryDef.define(new MetaobjectQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldReferenceQuery onModel3d(Model3dQueryDefinition queryDef) {
            startInlineFragment("Model3d");
            queryDef.define(new Model3dQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldReferenceQuery onPage(PageQueryDefinition queryDef) {
            startInlineFragment("Page");
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldReferenceQuery onProduct(ProductQueryDefinition queryDef) {
            startInlineFragment("Product");
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldReferenceQuery onProductVariant(ProductVariantQueryDefinition queryDef) {
            startInlineFragment("ProductVariant");
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public MetafieldReferenceQuery onVideo(VideoQueryDefinition queryDef) {
            startInlineFragment("Video");
            queryDef.define(new VideoQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface MetafieldReference {
        String getGraphQlTypeName();
    }

    /**
    * Returns the resource which is being referred to by a metafield.
    */
    public static class UnknownMetafieldReference extends AbstractResponse<UnknownMetafieldReference> implements MetafieldReference {
        public UnknownMetafieldReference() {
        }

        public UnknownMetafieldReference(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static MetafieldReference create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "Collection": {
                    return new Collection(fields);
                }

                case "GenericFile": {
                    return new GenericFile(fields);
                }

                case "MediaImage": {
                    return new MediaImage(fields);
                }

                case "Metaobject": {
                    return new Metaobject(fields);
                }

                case "Model3d": {
                    return new Model3d(fields);
                }

                case "Page": {
                    return new Page(fields);
                }

                case "Product": {
                    return new Product(fields);
                }

                case "ProductVariant": {
                    return new ProductVariant(fields);
                }

                case "Video": {
                    return new Video(fields);
                }

                default: {
                    return new UnknownMetafieldReference(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface MetafieldReferenceConnectionQueryDefinition {
        void define(MetafieldReferenceConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple MetafieldReferences.
    */
    public static class MetafieldReferenceConnectionQuery extends Query<MetafieldReferenceConnectionQuery> {
        MetafieldReferenceConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public MetafieldReferenceConnectionQuery edges(MetafieldReferenceEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldReferenceEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in MetafieldReferenceEdge.
        */
        public MetafieldReferenceConnectionQuery nodes(MetafieldReferenceQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldReferenceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public MetafieldReferenceConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple MetafieldReferences.
    */
    public static class MetafieldReferenceConnection extends AbstractResponse<MetafieldReferenceConnection> {
        public MetafieldReferenceConnection() {
        }

        public MetafieldReferenceConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<MetafieldReferenceEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MetafieldReferenceEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<MetafieldReference> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownMetafieldReference.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MetafieldReferenceConnection";
        }

        /**
        * A list of edges.
        */

        public List<MetafieldReferenceEdge> getEdges() {
            return (List<MetafieldReferenceEdge>) get("edges");
        }

        public MetafieldReferenceConnection setEdges(List<MetafieldReferenceEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in MetafieldReferenceEdge.
        */

        public List<MetafieldReference> getNodes() {
            return (List<MetafieldReference>) get("nodes");
        }

        public MetafieldReferenceConnection setNodes(List<MetafieldReference> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public MetafieldReferenceConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return false;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface MetafieldReferenceEdgeQueryDefinition {
        void define(MetafieldReferenceEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one MetafieldReference and a cursor during pagination.
    */
    public static class MetafieldReferenceEdgeQuery extends Query<MetafieldReferenceEdgeQuery> {
        MetafieldReferenceEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public MetafieldReferenceEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of MetafieldReferenceEdge.
        */
        public MetafieldReferenceEdgeQuery node(MetafieldReferenceQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldReferenceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one MetafieldReference and a cursor during pagination.
    */
    public static class MetafieldReferenceEdge extends AbstractResponse<MetafieldReferenceEdge> {
        public MetafieldReferenceEdge() {
        }

        public MetafieldReferenceEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, UnknownMetafieldReference.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MetafieldReferenceEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public MetafieldReferenceEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of MetafieldReferenceEdge.
        */

        public MetafieldReference getNode() {
            return (MetafieldReference) get("node");
        }

        public MetafieldReferenceEdge setNode(MetafieldReference arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return false;

                default: return false;
            }
        }
    }

    public interface MetafieldsSetUserErrorQueryDefinition {
        void define(MetafieldsSetUserErrorQuery _queryBuilder);
    }

    /**
    * An error that occurs during the execution of `MetafieldsSet`.
    */
    public static class MetafieldsSetUserErrorQuery extends Query<MetafieldsSetUserErrorQuery> {
        MetafieldsSetUserErrorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The error code.
        */
        public MetafieldsSetUserErrorQuery code() {
            startField("code");

            return this;
        }

        /**
        * The index of the array element that's causing the error.
        */
        public MetafieldsSetUserErrorQuery elementIndex() {
            startField("elementIndex");

            return this;
        }

        /**
        * The path to the input field that caused the error.
        */
        public MetafieldsSetUserErrorQuery field() {
            startField("field");

            return this;
        }

        /**
        * The error message.
        */
        public MetafieldsSetUserErrorQuery message() {
            startField("message");

            return this;
        }
    }

    /**
    * An error that occurs during the execution of `MetafieldsSet`.
    */
    public static class MetafieldsSetUserError extends AbstractResponse<MetafieldsSetUserError> implements DisplayableError {
        public MetafieldsSetUserError() {
        }

        public MetafieldsSetUserError(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        MetafieldsSetUserErrorCode optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = MetafieldsSetUserErrorCode.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "elementIndex": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "field": {
                        List<String> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<String> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(jsonAsString(element1, key));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "message": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MetafieldsSetUserError";
        }

        /**
        * The error code.
        */

        public MetafieldsSetUserErrorCode getCode() {
            return (MetafieldsSetUserErrorCode) get("code");
        }

        public MetafieldsSetUserError setCode(MetafieldsSetUserErrorCode arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The index of the array element that's causing the error.
        */

        public Integer getElementIndex() {
            return (Integer) get("elementIndex");
        }

        public MetafieldsSetUserError setElementIndex(Integer arg) {
            optimisticData.put(getKey("elementIndex"), arg);
            return this;
        }

        /**
        * The path to the input field that caused the error.
        */

        public List<String> getField() {
            return (List<String>) get("field");
        }

        public MetafieldsSetUserError setField(List<String> arg) {
            optimisticData.put(getKey("field"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public MetafieldsSetUserError setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "elementIndex": return false;

                case "field": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    /**
    * Possible error codes that can be returned by `MetafieldsSetUserError`.
    */
    public enum MetafieldsSetUserErrorCode {
        /**
        * The input value is blank.
        */
        BLANK,

        /**
        * The input value isn't included in the list.
        */
        INCLUSION,

        /**
        * The owner ID is invalid.
        */
        INVALID_OWNER,

        /**
        * The type is invalid.
        */
        INVALID_TYPE,

        /**
        * The value is invalid for metafield type or for definition options.
        */
        INVALID_VALUE,

        /**
        * The input value should be less than or equal to the maximum value allowed.
        */
        LESS_THAN_OR_EQUAL_TO,

        /**
        * The input value needs to be blank.
        */
        PRESENT,

        /**
        * The input value is too long.
        */
        TOO_LONG,

        /**
        * The input value is too short.
        */
        TOO_SHORT,

        UNKNOWN_VALUE;

        public static MetafieldsSetUserErrorCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "BLANK": {
                    return BLANK;
                }

                case "INCLUSION": {
                    return INCLUSION;
                }

                case "INVALID_OWNER": {
                    return INVALID_OWNER;
                }

                case "INVALID_TYPE": {
                    return INVALID_TYPE;
                }

                case "INVALID_VALUE": {
                    return INVALID_VALUE;
                }

                case "LESS_THAN_OR_EQUAL_TO": {
                    return LESS_THAN_OR_EQUAL_TO;
                }

                case "PRESENT": {
                    return PRESENT;
                }

                case "TOO_LONG": {
                    return TOO_LONG;
                }

                case "TOO_SHORT": {
                    return TOO_SHORT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case BLANK: {
                    return "BLANK";
                }

                case INCLUSION: {
                    return "INCLUSION";
                }

                case INVALID_OWNER: {
                    return "INVALID_OWNER";
                }

                case INVALID_TYPE: {
                    return "INVALID_TYPE";
                }

                case INVALID_VALUE: {
                    return "INVALID_VALUE";
                }

                case LESS_THAN_OR_EQUAL_TO: {
                    return "LESS_THAN_OR_EQUAL_TO";
                }

                case PRESENT: {
                    return "PRESENT";
                }

                case TOO_LONG: {
                    return "TOO_LONG";
                }

                case TOO_SHORT: {
                    return "TOO_SHORT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface MetaobjectQueryDefinition {
        void define(MetaobjectQuery _queryBuilder);
    }

    /**
    * An instance of a user-defined model based on a MetaobjectDefinition.
    */
    public static class MetaobjectQuery extends Query<MetaobjectQuery> {
        MetaobjectQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * Accesses a field of the object by key.
        */
        public MetaobjectQuery field(String key, MetaobjectFieldQueryDefinition queryDef) {
            startField("field");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectFieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * All object fields with defined values.
        * Omitted object keys can be assumed null, and no guarantees are made about field order.
        */
        public MetaobjectQuery fields(MetaobjectFieldQueryDefinition queryDef) {
            startField("fields");

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectFieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The unique handle of the metaobject. Useful as a custom ID.
        */
        public MetaobjectQuery handle() {
            startField("handle");

            return this;
        }

        /**
        * The URL used for viewing the metaobject on the shop's Online Store. Returns `null` if the metaobject
        * definition doesn't have the `online_store` capability.
        */
        public MetaobjectQuery onlineStoreUrl() {
            startField("onlineStoreUrl");

            return this;
        }

        /**
        * The metaobject's SEO information. Returns `null` if the metaobject definition
        * doesn't have the `renderable` capability.
        */
        public MetaobjectQuery seo(MetaobjectSEOQueryDefinition queryDef) {
            startField("seo");

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectSEOQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The type of the metaobject. Defines the namespace of its associated metafields.
        */
        public MetaobjectQuery type() {
            startField("type");

            return this;
        }

        /**
        * The date and time when the metaobject was last updated.
        */
        public MetaobjectQuery updatedAt() {
            startField("updatedAt");

            return this;
        }
    }

    /**
    * An instance of a user-defined model based on a MetaobjectDefinition.
    */
    public static class Metaobject extends AbstractResponse<Metaobject> implements MenuItemResource, MetafieldReference, Node, OnlineStorePublishable {
        public Metaobject() {
        }

        public Metaobject(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "field": {
                        MetaobjectField optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MetaobjectField(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "fields": {
                        List<MetaobjectField> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MetaobjectField(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "onlineStoreUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "seo": {
                        MetaobjectSEO optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MetaobjectSEO(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "type": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Metaobject(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Metaobject";
        }

        /**
        * Accesses a field of the object by key.
        */

        public MetaobjectField getField() {
            return (MetaobjectField) get("field");
        }

        public Metaobject setField(MetaobjectField arg) {
            optimisticData.put(getKey("field"), arg);
            return this;
        }

        /**
        * All object fields with defined values.
        * Omitted object keys can be assumed null, and no guarantees are made about field order.
        */

        public List<MetaobjectField> getFields() {
            return (List<MetaobjectField>) get("fields");
        }

        public Metaobject setFields(List<MetaobjectField> arg) {
            optimisticData.put(getKey("fields"), arg);
            return this;
        }

        /**
        * The unique handle of the metaobject. Useful as a custom ID.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public Metaobject setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The URL used for viewing the metaobject on the shop's Online Store. Returns `null` if the metaobject
        * definition doesn't have the `online_store` capability.
        */

        public String getOnlineStoreUrl() {
            return (String) get("onlineStoreUrl");
        }

        public Metaobject setOnlineStoreUrl(String arg) {
            optimisticData.put(getKey("onlineStoreUrl"), arg);
            return this;
        }

        /**
        * The metaobject's SEO information. Returns `null` if the metaobject definition
        * doesn't have the `renderable` capability.
        */

        public MetaobjectSEO getSeo() {
            return (MetaobjectSEO) get("seo");
        }

        public Metaobject setSeo(MetaobjectSEO arg) {
            optimisticData.put(getKey("seo"), arg);
            return this;
        }

        /**
        * The type of the metaobject. Defines the namespace of its associated metafields.
        */

        public String getType() {
            return (String) get("type");
        }

        public Metaobject setType(String arg) {
            optimisticData.put(getKey("type"), arg);
            return this;
        }

        /**
        * The date and time when the metaobject was last updated.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public Metaobject setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "field": return true;

                case "fields": return true;

                case "handle": return false;

                case "id": return false;

                case "onlineStoreUrl": return false;

                case "seo": return true;

                case "type": return false;

                case "updatedAt": return false;

                default: return false;
            }
        }
    }

    public interface MetaobjectConnectionQueryDefinition {
        void define(MetaobjectConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Metaobjects.
    */
    public static class MetaobjectConnectionQuery extends Query<MetaobjectConnectionQuery> {
        MetaobjectConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public MetaobjectConnectionQuery edges(MetaobjectEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in MetaobjectEdge.
        */
        public MetaobjectConnectionQuery nodes(MetaobjectQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public MetaobjectConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Metaobjects.
    */
    public static class MetaobjectConnection extends AbstractResponse<MetaobjectConnection> {
        public MetaobjectConnection() {
        }

        public MetaobjectConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<MetaobjectEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new MetaobjectEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Metaobject> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Metaobject(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MetaobjectConnection";
        }

        /**
        * A list of edges.
        */

        public List<MetaobjectEdge> getEdges() {
            return (List<MetaobjectEdge>) get("edges");
        }

        public MetaobjectConnection setEdges(List<MetaobjectEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in MetaobjectEdge.
        */

        public List<Metaobject> getNodes() {
            return (List<Metaobject>) get("nodes");
        }

        public MetaobjectConnection setNodes(List<Metaobject> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public MetaobjectConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface MetaobjectEdgeQueryDefinition {
        void define(MetaobjectEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Metaobject and a cursor during pagination.
    */
    public static class MetaobjectEdgeQuery extends Query<MetaobjectEdgeQuery> {
        MetaobjectEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public MetaobjectEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of MetaobjectEdge.
        */
        public MetaobjectEdgeQuery node(MetaobjectQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Metaobject and a cursor during pagination.
    */
    public static class MetaobjectEdge extends AbstractResponse<MetaobjectEdge> {
        public MetaobjectEdge() {
        }

        public MetaobjectEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Metaobject(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MetaobjectEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public MetaobjectEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of MetaobjectEdge.
        */

        public Metaobject getNode() {
            return (Metaobject) get("node");
        }

        public MetaobjectEdge setNode(Metaobject arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface MetaobjectFieldQueryDefinition {
        void define(MetaobjectFieldQuery _queryBuilder);
    }

    /**
    * Provides the value of a Metaobject field.
    */
    public static class MetaobjectFieldQuery extends Query<MetaobjectFieldQuery> {
        MetaobjectFieldQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The field key.
        */
        public MetaobjectFieldQuery key() {
            startField("key");

            return this;
        }

        /**
        * A referenced object if the field type is a resource reference.
        */
        public MetaobjectFieldQuery reference(MetafieldReferenceQueryDefinition queryDef) {
            startField("reference");

            _queryBuilder.append('{');
            queryDef.define(new MetafieldReferenceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ReferencesArguments extends Arguments {
            ReferencesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public ReferencesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public ReferencesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public ReferencesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public ReferencesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface ReferencesArgumentsDefinition {
            void define(ReferencesArguments args);
        }

        /**
        * A list of referenced objects if the field type is a resource reference list.
        */
        public MetaobjectFieldQuery references(MetafieldReferenceConnectionQueryDefinition queryDef) {
            return references(args -> {}, queryDef);
        }

        /**
        * A list of referenced objects if the field type is a resource reference list.
        */
        public MetaobjectFieldQuery references(ReferencesArgumentsDefinition argsDef, MetafieldReferenceConnectionQueryDefinition queryDef) {
            startField("references");

            ReferencesArguments args = new ReferencesArguments(_queryBuilder);
            argsDef.define(args);
            ReferencesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new MetafieldReferenceConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The type name of the field.
        * See the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
        */
        public MetaobjectFieldQuery type() {
            startField("type");

            return this;
        }

        /**
        * The field value.
        */
        public MetaobjectFieldQuery value() {
            startField("value");

            return this;
        }
    }

    /**
    * Provides the value of a Metaobject field.
    */
    public static class MetaobjectField extends AbstractResponse<MetaobjectField> {
        public MetaobjectField() {
        }

        public MetaobjectField(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "key": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "reference": {
                        MetafieldReference optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownMetafieldReference.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "references": {
                        MetafieldReferenceConnection optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MetafieldReferenceConnection(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "type": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "value": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MetaobjectField";
        }

        /**
        * The field key.
        */

        public String getKey() {
            return (String) get("key");
        }

        public MetaobjectField setKey(String arg) {
            optimisticData.put(getKey("key"), arg);
            return this;
        }

        /**
        * A referenced object if the field type is a resource reference.
        */

        public MetafieldReference getReference() {
            return (MetafieldReference) get("reference");
        }

        public MetaobjectField setReference(MetafieldReference arg) {
            optimisticData.put(getKey("reference"), arg);
            return this;
        }

        /**
        * A list of referenced objects if the field type is a resource reference list.
        */

        public MetafieldReferenceConnection getReferences() {
            return (MetafieldReferenceConnection) get("references");
        }

        public MetaobjectField setReferences(MetafieldReferenceConnection arg) {
            optimisticData.put(getKey("references"), arg);
            return this;
        }

        /**
        * The type name of the field.
        * See the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
        */

        public String getType() {
            return (String) get("type");
        }

        public MetaobjectField setType(String arg) {
            optimisticData.put(getKey("type"), arg);
            return this;
        }

        /**
        * The field value.
        */

        public String getValue() {
            return (String) get("value");
        }

        public MetaobjectField setValue(String arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "key": return false;

                case "reference": return false;

                case "references": return true;

                case "type": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    public static class MetaobjectHandleInput implements Serializable {
        private String handle;

        private String type;

        public MetaobjectHandleInput(String handle, String type) {
            this.handle = handle;

            this.type = type;
        }

        public String getHandle() {
            return handle;
        }

        public MetaobjectHandleInput setHandle(String handle) {
            this.handle = handle;
            return this;
        }

        public String getType() {
            return type;
        }

        public MetaobjectHandleInput setType(String type) {
            this.type = type;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("handle:");
            Query.appendQuotedString(_queryBuilder, handle.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("type:");
            Query.appendQuotedString(_queryBuilder, type.toString());

            _queryBuilder.append('}');
        }
    }

    public interface MetaobjectSEOQueryDefinition {
        void define(MetaobjectSEOQuery _queryBuilder);
    }

    /**
    * SEO information for a metaobject.
    */
    public static class MetaobjectSEOQuery extends Query<MetaobjectSEOQuery> {
        MetaobjectSEOQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The meta description.
        */
        public MetaobjectSEOQuery description(MetaobjectFieldQueryDefinition queryDef) {
            startField("description");

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectFieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The SEO title.
        */
        public MetaobjectSEOQuery title(MetaobjectFieldQueryDefinition queryDef) {
            startField("title");

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectFieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * SEO information for a metaobject.
    */
    public static class MetaobjectSEO extends AbstractResponse<MetaobjectSEO> {
        public MetaobjectSEO() {
        }

        public MetaobjectSEO(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "description": {
                        MetaobjectField optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MetaobjectField(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        MetaobjectField optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MetaobjectField(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MetaobjectSEO";
        }

        /**
        * The meta description.
        */

        public MetaobjectField getDescription() {
            return (MetaobjectField) get("description");
        }

        public MetaobjectSEO setDescription(MetaobjectField arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * The SEO title.
        */

        public MetaobjectField getTitle() {
            return (MetaobjectField) get("title");
        }

        public MetaobjectSEO setTitle(MetaobjectField arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "description": return true;

                case "title": return true;

                default: return false;
            }
        }
    }

    public interface Model3dQueryDefinition {
        void define(Model3dQuery _queryBuilder);
    }

    /**
    * Represents a Shopify hosted 3D model.
    */
    public static class Model3dQuery extends Query<Model3dQuery> {
        Model3dQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */
        public Model3dQuery alt() {
            startField("alt");

            return this;
        }

        /**
        * The media content type.
        */
        public Model3dQuery mediaContentType() {
            startField("mediaContentType");

            return this;
        }

        /**
        * The presentation for a media.
        */
        public Model3dQuery presentation(MediaPresentationQueryDefinition queryDef) {
            startField("presentation");

            _queryBuilder.append('{');
            queryDef.define(new MediaPresentationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The preview image for the media.
        */
        public Model3dQuery previewImage(ImageQueryDefinition queryDef) {
            startField("previewImage");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The sources for a 3d model.
        */
        public Model3dQuery sources(Model3dSourceQueryDefinition queryDef) {
            startField("sources");

            _queryBuilder.append('{');
            queryDef.define(new Model3dSourceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a Shopify hosted 3D model.
    */
    public static class Model3d extends AbstractResponse<Model3d> implements Media, MetafieldReference, Node {
        public Model3d() {
        }

        public Model3d(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "alt": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "mediaContentType": {
                        responseData.put(key, MediaContentType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "presentation": {
                        MediaPresentation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaPresentation(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "previewImage": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sources": {
                        List<Model3dSource> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Model3dSource(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Model3d(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Model3d";
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */

        public String getAlt() {
            return (String) get("alt");
        }

        public Model3d setAlt(String arg) {
            optimisticData.put(getKey("alt"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The media content type.
        */

        public MediaContentType getMediaContentType() {
            return (MediaContentType) get("mediaContentType");
        }

        public Model3d setMediaContentType(MediaContentType arg) {
            optimisticData.put(getKey("mediaContentType"), arg);
            return this;
        }

        /**
        * The presentation for a media.
        */

        public MediaPresentation getPresentation() {
            return (MediaPresentation) get("presentation");
        }

        public Model3d setPresentation(MediaPresentation arg) {
            optimisticData.put(getKey("presentation"), arg);
            return this;
        }

        /**
        * The preview image for the media.
        */

        public Image getPreviewImage() {
            return (Image) get("previewImage");
        }

        public Model3d setPreviewImage(Image arg) {
            optimisticData.put(getKey("previewImage"), arg);
            return this;
        }

        /**
        * The sources for a 3d model.
        */

        public List<Model3dSource> getSources() {
            return (List<Model3dSource>) get("sources");
        }

        public Model3d setSources(List<Model3dSource> arg) {
            optimisticData.put(getKey("sources"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "alt": return false;

                case "id": return false;

                case "mediaContentType": return false;

                case "presentation": return true;

                case "previewImage": return true;

                case "sources": return true;

                default: return false;
            }
        }
    }

    public interface Model3dSourceQueryDefinition {
        void define(Model3dSourceQuery _queryBuilder);
    }

    /**
    * Represents a source for a Shopify hosted 3d model.
    */
    public static class Model3dSourceQuery extends Query<Model3dSourceQuery> {
        Model3dSourceQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The filesize of the 3d model.
        */
        public Model3dSourceQuery filesize() {
            startField("filesize");

            return this;
        }

        /**
        * The format of the 3d model.
        */
        public Model3dSourceQuery format() {
            startField("format");

            return this;
        }

        /**
        * The MIME type of the 3d model.
        */
        public Model3dSourceQuery mimeType() {
            startField("mimeType");

            return this;
        }

        /**
        * The URL of the 3d model.
        */
        public Model3dSourceQuery url() {
            startField("url");

            return this;
        }
    }

    /**
    * Represents a source for a Shopify hosted 3d model.
    */
    public static class Model3dSource extends AbstractResponse<Model3dSource> {
        public Model3dSource() {
        }

        public Model3dSource(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "filesize": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "format": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "mimeType": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "url": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Model3dSource";
        }

        /**
        * The filesize of the 3d model.
        */

        public Integer getFilesize() {
            return (Integer) get("filesize");
        }

        public Model3dSource setFilesize(Integer arg) {
            optimisticData.put(getKey("filesize"), arg);
            return this;
        }

        /**
        * The format of the 3d model.
        */

        public String getFormat() {
            return (String) get("format");
        }

        public Model3dSource setFormat(String arg) {
            optimisticData.put(getKey("format"), arg);
            return this;
        }

        /**
        * The MIME type of the 3d model.
        */

        public String getMimeType() {
            return (String) get("mimeType");
        }

        public Model3dSource setMimeType(String arg) {
            optimisticData.put(getKey("mimeType"), arg);
            return this;
        }

        /**
        * The URL of the 3d model.
        */

        public String getUrl() {
            return (String) get("url");
        }

        public Model3dSource setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "filesize": return false;

                case "format": return false;

                case "mimeType": return false;

                case "url": return false;

                default: return false;
            }
        }
    }

    public static class MoneyInput implements Serializable {
        private String amount;

        private CurrencyCode currencyCode;

        public MoneyInput(String amount, CurrencyCode currencyCode) {
            this.amount = amount;

            this.currencyCode = currencyCode;
        }

        public String getAmount() {
            return amount;
        }

        public MoneyInput setAmount(String amount) {
            this.amount = amount;
            return this;
        }

        public CurrencyCode getCurrencyCode() {
            return currencyCode;
        }

        public MoneyInput setCurrencyCode(CurrencyCode currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("amount:");
            Query.appendQuotedString(_queryBuilder, amount.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("currencyCode:");
            _queryBuilder.append(currencyCode.toString());

            _queryBuilder.append('}');
        }
    }

    public interface MoneyV2QueryDefinition {
        void define(MoneyV2Query _queryBuilder);
    }

    /**
    * A monetary value with currency.
    */
    public static class MoneyV2Query extends Query<MoneyV2Query> {
        MoneyV2Query(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Decimal money amount.
        */
        public MoneyV2Query amount() {
            startField("amount");

            return this;
        }

        /**
        * Currency of the money.
        */
        public MoneyV2Query currencyCode() {
            startField("currencyCode");

            return this;
        }
    }

    /**
    * A monetary value with currency.
    */
    public static class MoneyV2 extends AbstractResponse<MoneyV2> implements PricingValue, SellingPlanCheckoutChargeValue {
        public MoneyV2() {
        }

        public MoneyV2(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "amount": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "currencyCode": {
                        responseData.put(key, CurrencyCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "MoneyV2";
        }

        /**
        * Decimal money amount.
        */

        public String getAmount() {
            return (String) get("amount");
        }

        public MoneyV2 setAmount(String arg) {
            optimisticData.put(getKey("amount"), arg);
            return this;
        }

        /**
        * Currency of the money.
        */

        public CurrencyCode getCurrencyCode() {
            return (CurrencyCode) get("currencyCode");
        }

        public MoneyV2 setCurrencyCode(CurrencyCode arg) {
            optimisticData.put(getKey("currencyCode"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "amount": return false;

                case "currencyCode": return false;

                default: return false;
            }
        }
    }

    public interface MutationQueryDefinition {
        void define(MutationQuery _queryBuilder);
    }

    /**
    * The schema’s entry-point for mutations. This acts as the public, top-level API from which all
    * mutation queries must start.
    */
    public static class MutationQuery extends Query<MutationQuery> {
        MutationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Updates the attributes on a cart.
        */
        public MutationQuery cartAttributesUpdate(List<AttributeInput> attributes, ID cartId, CartAttributesUpdatePayloadQueryDefinition queryDef) {
            startField("cartAttributesUpdate");

            _queryBuilder.append("(attributes:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (AttributeInput item1 : attributes) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(",cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartAttributesUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CartBillingAddressUpdateArguments extends Arguments {
            CartBillingAddressUpdateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The customer's billing address.
            */
            public CartBillingAddressUpdateArguments billingAddress(MailingAddressInput value) {
                if (value != null) {
                    startArgument("billingAddress");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CartBillingAddressUpdateArgumentsDefinition {
            void define(CartBillingAddressUpdateArguments args);
        }

        /**
        * Updates the billing address on the cart.
        */
        public MutationQuery cartBillingAddressUpdate(ID cartId, CartBillingAddressUpdatePayloadQueryDefinition queryDef) {
            return cartBillingAddressUpdate(cartId, args -> {}, queryDef);
        }

        /**
        * Updates the billing address on the cart.
        */
        public MutationQuery cartBillingAddressUpdate(ID cartId, CartBillingAddressUpdateArgumentsDefinition argsDef, CartBillingAddressUpdatePayloadQueryDefinition queryDef) {
            startField("cartBillingAddressUpdate");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            argsDef.define(new CartBillingAddressUpdateArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartBillingAddressUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Updates customer information associated with a cart.
        * Buyer identity is used to determine
        * [international
        * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
        * and should match the customer's shipping address.
        */
        public MutationQuery cartBuyerIdentityUpdate(ID cartId, CartBuyerIdentityInput buyerIdentity, CartBuyerIdentityUpdatePayloadQueryDefinition queryDef) {
            startField("cartBuyerIdentityUpdate");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(",buyerIdentity:");
            buyerIdentity.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartBuyerIdentityUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CartCreateArguments extends Arguments {
            CartCreateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * The fields used to create a cart.
            */
            public CartCreateArguments input(CartInput value) {
                if (value != null) {
                    startArgument("input");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CartCreateArgumentsDefinition {
            void define(CartCreateArguments args);
        }

        /**
        * Creates a new cart.
        */
        public MutationQuery cartCreate(CartCreatePayloadQueryDefinition queryDef) {
            return cartCreate(args -> {}, queryDef);
        }

        /**
        * Creates a new cart.
        */
        public MutationQuery cartCreate(CartCreateArgumentsDefinition argsDef, CartCreatePayloadQueryDefinition queryDef) {
            startField("cartCreate");

            CartCreateArguments args = new CartCreateArguments(_queryBuilder);
            argsDef.define(args);
            CartCreateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new CartCreatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CartDiscountCodesUpdateArguments extends Arguments {
            CartDiscountCodesUpdateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The case-insensitive discount codes that the customer added at checkout.
            * The input must not contain more than `250` values.
            */
            public CartDiscountCodesUpdateArguments discountCodes(List<String> value) {
                if (value != null) {
                    startArgument("discountCodes");
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (String item1 : value) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            Query.appendQuotedString(_queryBuilder, item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }
        }

        public interface CartDiscountCodesUpdateArgumentsDefinition {
            void define(CartDiscountCodesUpdateArguments args);
        }

        /**
        * Updates the discount codes applied to the cart.
        */
        public MutationQuery cartDiscountCodesUpdate(ID cartId, CartDiscountCodesUpdatePayloadQueryDefinition queryDef) {
            return cartDiscountCodesUpdate(cartId, args -> {}, queryDef);
        }

        /**
        * Updates the discount codes applied to the cart.
        */
        public MutationQuery cartDiscountCodesUpdate(ID cartId, CartDiscountCodesUpdateArgumentsDefinition argsDef, CartDiscountCodesUpdatePayloadQueryDefinition queryDef) {
            startField("cartDiscountCodesUpdate");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            argsDef.define(new CartDiscountCodesUpdateArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartDiscountCodesUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Updates the gift card codes applied to the cart.
        */
        public MutationQuery cartGiftCardCodesUpdate(ID cartId, List<String> giftCardCodes, CartGiftCardCodesUpdatePayloadQueryDefinition queryDef) {
            startField("cartGiftCardCodesUpdate");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(",giftCardCodes:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (String item1 : giftCardCodes) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartGiftCardCodesUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Adds a merchandise line to the cart.
        */
        public MutationQuery cartLinesAdd(List<CartLineInput> lines, ID cartId, CartLinesAddPayloadQueryDefinition queryDef) {
            startField("cartLinesAdd");

            _queryBuilder.append("(lines:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (CartLineInput item1 : lines) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(",cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartLinesAddPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Removes one or more merchandise lines from the cart.
        */
        public MutationQuery cartLinesRemove(ID cartId, List<ID> lineIds, CartLinesRemovePayloadQueryDefinition queryDef) {
            startField("cartLinesRemove");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(",lineIds:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (ID item1 : lineIds) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartLinesRemovePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Updates one or more merchandise lines on a cart.
        */
        public MutationQuery cartLinesUpdate(ID cartId, List<CartLineUpdateInput> lines, CartLinesUpdatePayloadQueryDefinition queryDef) {
            startField("cartLinesUpdate");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(",lines:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (CartLineUpdateInput item1 : lines) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartLinesUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Deletes a cart metafield.
        */
        public MutationQuery cartMetafieldDelete(CartMetafieldDeleteInput input, CartMetafieldDeletePayloadQueryDefinition queryDef) {
            startField("cartMetafieldDelete");

            _queryBuilder.append("(input:");
            input.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartMetafieldDeletePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Sets cart metafield values. Cart metafield values will be set regardless if they were previously
        * created or not.
        * Allows a maximum of 25 cart metafields to be set at a time.
        */
        public MutationQuery cartMetafieldsSet(List<CartMetafieldsSetInput> metafields, CartMetafieldsSetPayloadQueryDefinition queryDef) {
            startField("cartMetafieldsSet");

            _queryBuilder.append("(metafields:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (CartMetafieldsSetInput item1 : metafields) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartMetafieldsSetPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Updates the note on the cart.
        */
        public MutationQuery cartNoteUpdate(ID cartId, String note, CartNoteUpdatePayloadQueryDefinition queryDef) {
            startField("cartNoteUpdate");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(",note:");
            Query.appendQuotedString(_queryBuilder, note.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartNoteUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Update the customer's payment method that will be used to checkout.
        */
        public MutationQuery cartPaymentUpdate(ID cartId, CartPaymentInput payment, CartPaymentUpdatePayloadQueryDefinition queryDef) {
            startField("cartPaymentUpdate");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(",payment:");
            payment.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartPaymentUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Update the selected delivery options for a delivery group.
        */
        public MutationQuery cartSelectedDeliveryOptionsUpdate(ID cartId, List<CartSelectedDeliveryOptionInput> selectedDeliveryOptions, CartSelectedDeliveryOptionsUpdatePayloadQueryDefinition queryDef) {
            startField("cartSelectedDeliveryOptionsUpdate");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(",selectedDeliveryOptions:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (CartSelectedDeliveryOptionInput item1 : selectedDeliveryOptions) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartSelectedDeliveryOptionsUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Submit the cart for checkout completion.
        */
        public MutationQuery cartSubmitForCompletion(ID cartId, String attemptToken, CartSubmitForCompletionPayloadQueryDefinition queryDef) {
            startField("cartSubmitForCompletion");

            _queryBuilder.append("(cartId:");
            Query.appendQuotedString(_queryBuilder, cartId.toString());

            _queryBuilder.append(",attemptToken:");
            Query.appendQuotedString(_queryBuilder, attemptToken.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartSubmitForCompletionPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Creates a customer access token.
        * The customer access token is required to modify the customer object in any way.
        */
        public MutationQuery customerAccessTokenCreate(CustomerAccessTokenCreateInput input, CustomerAccessTokenCreatePayloadQueryDefinition queryDef) {
            startField("customerAccessTokenCreate");

            _queryBuilder.append("(input:");
            input.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenCreatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Creates a customer access token using a
        * [multipass token](https://shopify.dev/api/multipass) instead of email and
        * password. A customer record is created if the customer doesn't exist. If a customer
        * record already exists but the record is disabled, then the customer record is enabled.
        */
        public MutationQuery customerAccessTokenCreateWithMultipass(String multipassToken, CustomerAccessTokenCreateWithMultipassPayloadQueryDefinition queryDef) {
            startField("customerAccessTokenCreateWithMultipass");

            _queryBuilder.append("(multipassToken:");
            Query.appendQuotedString(_queryBuilder, multipassToken.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenCreateWithMultipassPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Permanently destroys a customer access token.
        */
        public MutationQuery customerAccessTokenDelete(String customerAccessToken, CustomerAccessTokenDeletePayloadQueryDefinition queryDef) {
            startField("customerAccessTokenDelete");

            _queryBuilder.append("(customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenDeletePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Renews a customer access token.
        * Access token renewal must happen *before* a token expires.
        * If a token has already expired, a new one should be created instead via `customerAccessTokenCreate`.
        */
        public MutationQuery customerAccessTokenRenew(String customerAccessToken, CustomerAccessTokenRenewPayloadQueryDefinition queryDef) {
            startField("customerAccessTokenRenew");

            _queryBuilder.append("(customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerAccessTokenRenewPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Activates a customer.
        */
        public MutationQuery customerActivate(ID id, CustomerActivateInput input, CustomerActivatePayloadQueryDefinition queryDef) {
            startField("customerActivate");

            _queryBuilder.append("(id:");
            Query.appendQuotedString(_queryBuilder, id.toString());

            _queryBuilder.append(",input:");
            input.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerActivatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Activates a customer with the activation url received from `customerCreate`.
        */
        public MutationQuery customerActivateByUrl(String activationUrl, String password, CustomerActivateByUrlPayloadQueryDefinition queryDef) {
            startField("customerActivateByUrl");

            _queryBuilder.append("(activationUrl:");
            Query.appendQuotedString(_queryBuilder, activationUrl.toString());

            _queryBuilder.append(",password:");
            Query.appendQuotedString(_queryBuilder, password.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerActivateByUrlPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Creates a new address for a customer.
        */
        public MutationQuery customerAddressCreate(String customerAccessToken, MailingAddressInput address, CustomerAddressCreatePayloadQueryDefinition queryDef) {
            startField("customerAddressCreate");

            _queryBuilder.append("(customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            _queryBuilder.append(",address:");
            address.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerAddressCreatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Permanently deletes the address of an existing customer.
        */
        public MutationQuery customerAddressDelete(ID id, String customerAccessToken, CustomerAddressDeletePayloadQueryDefinition queryDef) {
            startField("customerAddressDelete");

            _queryBuilder.append("(id:");
            Query.appendQuotedString(_queryBuilder, id.toString());

            _queryBuilder.append(",customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerAddressDeletePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Updates the address of an existing customer.
        */
        public MutationQuery customerAddressUpdate(String customerAccessToken, ID id, MailingAddressInput address, CustomerAddressUpdatePayloadQueryDefinition queryDef) {
            startField("customerAddressUpdate");

            _queryBuilder.append("(customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            _queryBuilder.append(",id:");
            Query.appendQuotedString(_queryBuilder, id.toString());

            _queryBuilder.append(",address:");
            address.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerAddressUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Creates a new customer.
        */
        public MutationQuery customerCreate(CustomerCreateInput input, CustomerCreatePayloadQueryDefinition queryDef) {
            startField("customerCreate");

            _queryBuilder.append("(input:");
            input.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerCreatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Updates the default address of an existing customer.
        */
        public MutationQuery customerDefaultAddressUpdate(String customerAccessToken, ID addressId, CustomerDefaultAddressUpdatePayloadQueryDefinition queryDef) {
            startField("customerDefaultAddressUpdate");

            _queryBuilder.append("(customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            _queryBuilder.append(",addressId:");
            Query.appendQuotedString(_queryBuilder, addressId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerDefaultAddressUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Sends a reset password email to the customer. The reset password
        * email contains a reset password URL and token that you can pass to
        * the [`customerResetByUrl`](https://shopify.dev/api/storefront/latest/mutations/customerResetByUrl)
        * or
        * [`customerReset`](https://shopify.dev/api/storefront/latest/mutations/customerReset) mutation to
        * reset the
        * customer password.
        * This mutation is throttled by IP. With private access,
        * you can provide a
        * [`Shopify-Storefront-Buyer-IP`](https://shopify.dev/api/usage/authentication#optional-ip-header)
        * instead of the request IP.
        * The header is case-sensitive and must be sent as `Shopify-Storefront-Buyer-IP`.
        * Make sure that the value provided to `Shopify-Storefront-Buyer-IP` is trusted. Unthrottled access to
        * this
        * mutation presents a security risk.
        */
        public MutationQuery customerRecover(String email, CustomerRecoverPayloadQueryDefinition queryDef) {
            startField("customerRecover");

            _queryBuilder.append("(email:");
            Query.appendQuotedString(_queryBuilder, email.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerRecoverPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * "Resets a customer’s password with the token received from a reset password email. You can send a
        * reset password email with the
        * [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation."
        */
        public MutationQuery customerReset(ID id, CustomerResetInput input, CustomerResetPayloadQueryDefinition queryDef) {
            startField("customerReset");

            _queryBuilder.append("(id:");
            Query.appendQuotedString(_queryBuilder, id.toString());

            _queryBuilder.append(",input:");
            input.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerResetPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * "Resets a customer’s password with the reset password URL received from a reset password email. You
        * can send a reset password email with the
        * [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation."
        */
        public MutationQuery customerResetByUrl(String resetUrl, String password, CustomerResetByUrlPayloadQueryDefinition queryDef) {
            startField("customerResetByUrl");

            _queryBuilder.append("(resetUrl:");
            Query.appendQuotedString(_queryBuilder, resetUrl.toString());

            _queryBuilder.append(",password:");
            Query.appendQuotedString(_queryBuilder, password.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerResetByUrlPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Updates an existing customer.
        */
        public MutationQuery customerUpdate(String customerAccessToken, CustomerUpdateInput customer, CustomerUpdatePayloadQueryDefinition queryDef) {
            startField("customerUpdate");

            _queryBuilder.append("(customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            _queryBuilder.append(",customer:");
            customer.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerUpdatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Create a new Shop Pay payment request session.
        */
        public MutationQuery shopPayPaymentRequestSessionCreate(String sourceIdentifier, ShopPayPaymentRequestInput paymentRequest, ShopPayPaymentRequestSessionCreatePayloadQueryDefinition queryDef) {
            startField("shopPayPaymentRequestSessionCreate");

            _queryBuilder.append("(sourceIdentifier:");
            Query.appendQuotedString(_queryBuilder, sourceIdentifier.toString());

            _queryBuilder.append(",paymentRequest:");
            paymentRequest.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestSessionCreatePayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ShopPayPaymentRequestSessionSubmitArguments extends Arguments {
            ShopPayPaymentRequestSessionSubmitArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The order name to be used for the order created from the payment request.
            */
            public ShopPayPaymentRequestSessionSubmitArguments orderName(String value) {
                if (value != null) {
                    startArgument("orderName");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface ShopPayPaymentRequestSessionSubmitArgumentsDefinition {
            void define(ShopPayPaymentRequestSessionSubmitArguments args);
        }

        /**
        * Submits a Shop Pay payment request session.
        */
        public MutationQuery shopPayPaymentRequestSessionSubmit(String token, ShopPayPaymentRequestInput paymentRequest, String idempotencyKey, ShopPayPaymentRequestSessionSubmitPayloadQueryDefinition queryDef) {
            return shopPayPaymentRequestSessionSubmit(token, paymentRequest, idempotencyKey, args -> {}, queryDef);
        }

        /**
        * Submits a Shop Pay payment request session.
        */
        public MutationQuery shopPayPaymentRequestSessionSubmit(String token, ShopPayPaymentRequestInput paymentRequest, String idempotencyKey, ShopPayPaymentRequestSessionSubmitArgumentsDefinition argsDef, ShopPayPaymentRequestSessionSubmitPayloadQueryDefinition queryDef) {
            startField("shopPayPaymentRequestSessionSubmit");

            _queryBuilder.append("(token:");
            Query.appendQuotedString(_queryBuilder, token.toString());

            _queryBuilder.append(",paymentRequest:");
            paymentRequest.appendTo(_queryBuilder);

            _queryBuilder.append(",idempotencyKey:");
            Query.appendQuotedString(_queryBuilder, idempotencyKey.toString());

            argsDef.define(new ShopPayPaymentRequestSessionSubmitArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestSessionSubmitPayloadQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public String toString() {
            return _queryBuilder.toString();
        }
    }

    /**
    * The schema’s entry-point for mutations. This acts as the public, top-level API from which all
    * mutation queries must start.
    */
    public static class Mutation extends AbstractResponse<Mutation> {
        public Mutation() {
        }

        public Mutation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cartAttributesUpdate": {
                        CartAttributesUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartAttributesUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartBillingAddressUpdate": {
                        CartBillingAddressUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartBillingAddressUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartBuyerIdentityUpdate": {
                        CartBuyerIdentityUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartBuyerIdentityUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartCreate": {
                        CartCreatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartCreatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartDiscountCodesUpdate": {
                        CartDiscountCodesUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartDiscountCodesUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartGiftCardCodesUpdate": {
                        CartGiftCardCodesUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartGiftCardCodesUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartLinesAdd": {
                        CartLinesAddPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartLinesAddPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartLinesRemove": {
                        CartLinesRemovePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartLinesRemovePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartLinesUpdate": {
                        CartLinesUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartLinesUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartMetafieldDelete": {
                        CartMetafieldDeletePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartMetafieldDeletePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartMetafieldsSet": {
                        CartMetafieldsSetPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartMetafieldsSetPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartNoteUpdate": {
                        CartNoteUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartNoteUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartPaymentUpdate": {
                        CartPaymentUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartPaymentUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartSelectedDeliveryOptionsUpdate": {
                        CartSelectedDeliveryOptionsUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartSelectedDeliveryOptionsUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartSubmitForCompletion": {
                        CartSubmitForCompletionPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CartSubmitForCompletionPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessTokenCreate": {
                        CustomerAccessTokenCreatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessTokenCreatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessTokenCreateWithMultipass": {
                        CustomerAccessTokenCreateWithMultipassPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessTokenCreateWithMultipassPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessTokenDelete": {
                        CustomerAccessTokenDeletePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessTokenDeletePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAccessTokenRenew": {
                        CustomerAccessTokenRenewPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAccessTokenRenewPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerActivate": {
                        CustomerActivatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerActivatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerActivateByUrl": {
                        CustomerActivateByUrlPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerActivateByUrlPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAddressCreate": {
                        CustomerAddressCreatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAddressCreatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAddressDelete": {
                        CustomerAddressDeletePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAddressDeletePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerAddressUpdate": {
                        CustomerAddressUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerAddressUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerCreate": {
                        CustomerCreatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerCreatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerDefaultAddressUpdate": {
                        CustomerDefaultAddressUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerDefaultAddressUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerRecover": {
                        CustomerRecoverPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerRecoverPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerReset": {
                        CustomerResetPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerResetPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerResetByUrl": {
                        CustomerResetByUrlPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerResetByUrlPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUpdate": {
                        CustomerUpdatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CustomerUpdatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shopPayPaymentRequestSessionCreate": {
                        ShopPayPaymentRequestSessionCreatePayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPayPaymentRequestSessionCreatePayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shopPayPaymentRequestSessionSubmit": {
                        ShopPayPaymentRequestSessionSubmitPayload optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPayPaymentRequestSessionSubmitPayload(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Mutation";
        }

        /**
        * Updates the attributes on a cart.
        */

        public CartAttributesUpdatePayload getCartAttributesUpdate() {
            return (CartAttributesUpdatePayload) get("cartAttributesUpdate");
        }

        public Mutation setCartAttributesUpdate(CartAttributesUpdatePayload arg) {
            optimisticData.put(getKey("cartAttributesUpdate"), arg);
            return this;
        }

        /**
        * Updates the billing address on the cart.
        */

        public CartBillingAddressUpdatePayload getCartBillingAddressUpdate() {
            return (CartBillingAddressUpdatePayload) get("cartBillingAddressUpdate");
        }

        public Mutation setCartBillingAddressUpdate(CartBillingAddressUpdatePayload arg) {
            optimisticData.put(getKey("cartBillingAddressUpdate"), arg);
            return this;
        }

        /**
        * Updates customer information associated with a cart.
        * Buyer identity is used to determine
        * [international
        * pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
        * and should match the customer's shipping address.
        */

        public CartBuyerIdentityUpdatePayload getCartBuyerIdentityUpdate() {
            return (CartBuyerIdentityUpdatePayload) get("cartBuyerIdentityUpdate");
        }

        public Mutation setCartBuyerIdentityUpdate(CartBuyerIdentityUpdatePayload arg) {
            optimisticData.put(getKey("cartBuyerIdentityUpdate"), arg);
            return this;
        }

        /**
        * Creates a new cart.
        */

        public CartCreatePayload getCartCreate() {
            return (CartCreatePayload) get("cartCreate");
        }

        public Mutation setCartCreate(CartCreatePayload arg) {
            optimisticData.put(getKey("cartCreate"), arg);
            return this;
        }

        /**
        * Updates the discount codes applied to the cart.
        */

        public CartDiscountCodesUpdatePayload getCartDiscountCodesUpdate() {
            return (CartDiscountCodesUpdatePayload) get("cartDiscountCodesUpdate");
        }

        public Mutation setCartDiscountCodesUpdate(CartDiscountCodesUpdatePayload arg) {
            optimisticData.put(getKey("cartDiscountCodesUpdate"), arg);
            return this;
        }

        /**
        * Updates the gift card codes applied to the cart.
        */

        public CartGiftCardCodesUpdatePayload getCartGiftCardCodesUpdate() {
            return (CartGiftCardCodesUpdatePayload) get("cartGiftCardCodesUpdate");
        }

        public Mutation setCartGiftCardCodesUpdate(CartGiftCardCodesUpdatePayload arg) {
            optimisticData.put(getKey("cartGiftCardCodesUpdate"), arg);
            return this;
        }

        /**
        * Adds a merchandise line to the cart.
        */

        public CartLinesAddPayload getCartLinesAdd() {
            return (CartLinesAddPayload) get("cartLinesAdd");
        }

        public Mutation setCartLinesAdd(CartLinesAddPayload arg) {
            optimisticData.put(getKey("cartLinesAdd"), arg);
            return this;
        }

        /**
        * Removes one or more merchandise lines from the cart.
        */

        public CartLinesRemovePayload getCartLinesRemove() {
            return (CartLinesRemovePayload) get("cartLinesRemove");
        }

        public Mutation setCartLinesRemove(CartLinesRemovePayload arg) {
            optimisticData.put(getKey("cartLinesRemove"), arg);
            return this;
        }

        /**
        * Updates one or more merchandise lines on a cart.
        */

        public CartLinesUpdatePayload getCartLinesUpdate() {
            return (CartLinesUpdatePayload) get("cartLinesUpdate");
        }

        public Mutation setCartLinesUpdate(CartLinesUpdatePayload arg) {
            optimisticData.put(getKey("cartLinesUpdate"), arg);
            return this;
        }

        /**
        * Deletes a cart metafield.
        */

        public CartMetafieldDeletePayload getCartMetafieldDelete() {
            return (CartMetafieldDeletePayload) get("cartMetafieldDelete");
        }

        public Mutation setCartMetafieldDelete(CartMetafieldDeletePayload arg) {
            optimisticData.put(getKey("cartMetafieldDelete"), arg);
            return this;
        }

        /**
        * Sets cart metafield values. Cart metafield values will be set regardless if they were previously
        * created or not.
        * Allows a maximum of 25 cart metafields to be set at a time.
        */

        public CartMetafieldsSetPayload getCartMetafieldsSet() {
            return (CartMetafieldsSetPayload) get("cartMetafieldsSet");
        }

        public Mutation setCartMetafieldsSet(CartMetafieldsSetPayload arg) {
            optimisticData.put(getKey("cartMetafieldsSet"), arg);
            return this;
        }

        /**
        * Updates the note on the cart.
        */

        public CartNoteUpdatePayload getCartNoteUpdate() {
            return (CartNoteUpdatePayload) get("cartNoteUpdate");
        }

        public Mutation setCartNoteUpdate(CartNoteUpdatePayload arg) {
            optimisticData.put(getKey("cartNoteUpdate"), arg);
            return this;
        }

        /**
        * Update the customer's payment method that will be used to checkout.
        */

        public CartPaymentUpdatePayload getCartPaymentUpdate() {
            return (CartPaymentUpdatePayload) get("cartPaymentUpdate");
        }

        public Mutation setCartPaymentUpdate(CartPaymentUpdatePayload arg) {
            optimisticData.put(getKey("cartPaymentUpdate"), arg);
            return this;
        }

        /**
        * Update the selected delivery options for a delivery group.
        */

        public CartSelectedDeliveryOptionsUpdatePayload getCartSelectedDeliveryOptionsUpdate() {
            return (CartSelectedDeliveryOptionsUpdatePayload) get("cartSelectedDeliveryOptionsUpdate");
        }

        public Mutation setCartSelectedDeliveryOptionsUpdate(CartSelectedDeliveryOptionsUpdatePayload arg) {
            optimisticData.put(getKey("cartSelectedDeliveryOptionsUpdate"), arg);
            return this;
        }

        /**
        * Submit the cart for checkout completion.
        */

        public CartSubmitForCompletionPayload getCartSubmitForCompletion() {
            return (CartSubmitForCompletionPayload) get("cartSubmitForCompletion");
        }

        public Mutation setCartSubmitForCompletion(CartSubmitForCompletionPayload arg) {
            optimisticData.put(getKey("cartSubmitForCompletion"), arg);
            return this;
        }

        /**
        * Creates a customer access token.
        * The customer access token is required to modify the customer object in any way.
        */

        public CustomerAccessTokenCreatePayload getCustomerAccessTokenCreate() {
            return (CustomerAccessTokenCreatePayload) get("customerAccessTokenCreate");
        }

        public Mutation setCustomerAccessTokenCreate(CustomerAccessTokenCreatePayload arg) {
            optimisticData.put(getKey("customerAccessTokenCreate"), arg);
            return this;
        }

        /**
        * Creates a customer access token using a
        * [multipass token](https://shopify.dev/api/multipass) instead of email and
        * password. A customer record is created if the customer doesn't exist. If a customer
        * record already exists but the record is disabled, then the customer record is enabled.
        */

        public CustomerAccessTokenCreateWithMultipassPayload getCustomerAccessTokenCreateWithMultipass() {
            return (CustomerAccessTokenCreateWithMultipassPayload) get("customerAccessTokenCreateWithMultipass");
        }

        public Mutation setCustomerAccessTokenCreateWithMultipass(CustomerAccessTokenCreateWithMultipassPayload arg) {
            optimisticData.put(getKey("customerAccessTokenCreateWithMultipass"), arg);
            return this;
        }

        /**
        * Permanently destroys a customer access token.
        */

        public CustomerAccessTokenDeletePayload getCustomerAccessTokenDelete() {
            return (CustomerAccessTokenDeletePayload) get("customerAccessTokenDelete");
        }

        public Mutation setCustomerAccessTokenDelete(CustomerAccessTokenDeletePayload arg) {
            optimisticData.put(getKey("customerAccessTokenDelete"), arg);
            return this;
        }

        /**
        * Renews a customer access token.
        * Access token renewal must happen *before* a token expires.
        * If a token has already expired, a new one should be created instead via `customerAccessTokenCreate`.
        */

        public CustomerAccessTokenRenewPayload getCustomerAccessTokenRenew() {
            return (CustomerAccessTokenRenewPayload) get("customerAccessTokenRenew");
        }

        public Mutation setCustomerAccessTokenRenew(CustomerAccessTokenRenewPayload arg) {
            optimisticData.put(getKey("customerAccessTokenRenew"), arg);
            return this;
        }

        /**
        * Activates a customer.
        */

        public CustomerActivatePayload getCustomerActivate() {
            return (CustomerActivatePayload) get("customerActivate");
        }

        public Mutation setCustomerActivate(CustomerActivatePayload arg) {
            optimisticData.put(getKey("customerActivate"), arg);
            return this;
        }

        /**
        * Activates a customer with the activation url received from `customerCreate`.
        */

        public CustomerActivateByUrlPayload getCustomerActivateByUrl() {
            return (CustomerActivateByUrlPayload) get("customerActivateByUrl");
        }

        public Mutation setCustomerActivateByUrl(CustomerActivateByUrlPayload arg) {
            optimisticData.put(getKey("customerActivateByUrl"), arg);
            return this;
        }

        /**
        * Creates a new address for a customer.
        */

        public CustomerAddressCreatePayload getCustomerAddressCreate() {
            return (CustomerAddressCreatePayload) get("customerAddressCreate");
        }

        public Mutation setCustomerAddressCreate(CustomerAddressCreatePayload arg) {
            optimisticData.put(getKey("customerAddressCreate"), arg);
            return this;
        }

        /**
        * Permanently deletes the address of an existing customer.
        */

        public CustomerAddressDeletePayload getCustomerAddressDelete() {
            return (CustomerAddressDeletePayload) get("customerAddressDelete");
        }

        public Mutation setCustomerAddressDelete(CustomerAddressDeletePayload arg) {
            optimisticData.put(getKey("customerAddressDelete"), arg);
            return this;
        }

        /**
        * Updates the address of an existing customer.
        */

        public CustomerAddressUpdatePayload getCustomerAddressUpdate() {
            return (CustomerAddressUpdatePayload) get("customerAddressUpdate");
        }

        public Mutation setCustomerAddressUpdate(CustomerAddressUpdatePayload arg) {
            optimisticData.put(getKey("customerAddressUpdate"), arg);
            return this;
        }

        /**
        * Creates a new customer.
        */

        public CustomerCreatePayload getCustomerCreate() {
            return (CustomerCreatePayload) get("customerCreate");
        }

        public Mutation setCustomerCreate(CustomerCreatePayload arg) {
            optimisticData.put(getKey("customerCreate"), arg);
            return this;
        }

        /**
        * Updates the default address of an existing customer.
        */

        public CustomerDefaultAddressUpdatePayload getCustomerDefaultAddressUpdate() {
            return (CustomerDefaultAddressUpdatePayload) get("customerDefaultAddressUpdate");
        }

        public Mutation setCustomerDefaultAddressUpdate(CustomerDefaultAddressUpdatePayload arg) {
            optimisticData.put(getKey("customerDefaultAddressUpdate"), arg);
            return this;
        }

        /**
        * Sends a reset password email to the customer. The reset password
        * email contains a reset password URL and token that you can pass to
        * the [`customerResetByUrl`](https://shopify.dev/api/storefront/latest/mutations/customerResetByUrl)
        * or
        * [`customerReset`](https://shopify.dev/api/storefront/latest/mutations/customerReset) mutation to
        * reset the
        * customer password.
        * This mutation is throttled by IP. With private access,
        * you can provide a
        * [`Shopify-Storefront-Buyer-IP`](https://shopify.dev/api/usage/authentication#optional-ip-header)
        * instead of the request IP.
        * The header is case-sensitive and must be sent as `Shopify-Storefront-Buyer-IP`.
        * Make sure that the value provided to `Shopify-Storefront-Buyer-IP` is trusted. Unthrottled access to
        * this
        * mutation presents a security risk.
        */

        public CustomerRecoverPayload getCustomerRecover() {
            return (CustomerRecoverPayload) get("customerRecover");
        }

        public Mutation setCustomerRecover(CustomerRecoverPayload arg) {
            optimisticData.put(getKey("customerRecover"), arg);
            return this;
        }

        /**
        * "Resets a customer’s password with the token received from a reset password email. You can send a
        * reset password email with the
        * [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation."
        */

        public CustomerResetPayload getCustomerReset() {
            return (CustomerResetPayload) get("customerReset");
        }

        public Mutation setCustomerReset(CustomerResetPayload arg) {
            optimisticData.put(getKey("customerReset"), arg);
            return this;
        }

        /**
        * "Resets a customer’s password with the reset password URL received from a reset password email. You
        * can send a reset password email with the
        * [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation."
        */

        public CustomerResetByUrlPayload getCustomerResetByUrl() {
            return (CustomerResetByUrlPayload) get("customerResetByUrl");
        }

        public Mutation setCustomerResetByUrl(CustomerResetByUrlPayload arg) {
            optimisticData.put(getKey("customerResetByUrl"), arg);
            return this;
        }

        /**
        * Updates an existing customer.
        */

        public CustomerUpdatePayload getCustomerUpdate() {
            return (CustomerUpdatePayload) get("customerUpdate");
        }

        public Mutation setCustomerUpdate(CustomerUpdatePayload arg) {
            optimisticData.put(getKey("customerUpdate"), arg);
            return this;
        }

        /**
        * Create a new Shop Pay payment request session.
        */

        public ShopPayPaymentRequestSessionCreatePayload getShopPayPaymentRequestSessionCreate() {
            return (ShopPayPaymentRequestSessionCreatePayload) get("shopPayPaymentRequestSessionCreate");
        }

        public Mutation setShopPayPaymentRequestSessionCreate(ShopPayPaymentRequestSessionCreatePayload arg) {
            optimisticData.put(getKey("shopPayPaymentRequestSessionCreate"), arg);
            return this;
        }

        /**
        * Submits a Shop Pay payment request session.
        */

        public ShopPayPaymentRequestSessionSubmitPayload getShopPayPaymentRequestSessionSubmit() {
            return (ShopPayPaymentRequestSessionSubmitPayload) get("shopPayPaymentRequestSessionSubmit");
        }

        public Mutation setShopPayPaymentRequestSessionSubmit(ShopPayPaymentRequestSessionSubmitPayload arg) {
            optimisticData.put(getKey("shopPayPaymentRequestSessionSubmit"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cartAttributesUpdate": return true;

                case "cartBillingAddressUpdate": return true;

                case "cartBuyerIdentityUpdate": return true;

                case "cartCreate": return true;

                case "cartDiscountCodesUpdate": return true;

                case "cartGiftCardCodesUpdate": return true;

                case "cartLinesAdd": return true;

                case "cartLinesRemove": return true;

                case "cartLinesUpdate": return true;

                case "cartMetafieldDelete": return true;

                case "cartMetafieldsSet": return true;

                case "cartNoteUpdate": return true;

                case "cartPaymentUpdate": return true;

                case "cartSelectedDeliveryOptionsUpdate": return true;

                case "cartSubmitForCompletion": return true;

                case "customerAccessTokenCreate": return true;

                case "customerAccessTokenCreateWithMultipass": return true;

                case "customerAccessTokenDelete": return true;

                case "customerAccessTokenRenew": return true;

                case "customerActivate": return true;

                case "customerActivateByUrl": return true;

                case "customerAddressCreate": return true;

                case "customerAddressDelete": return true;

                case "customerAddressUpdate": return true;

                case "customerCreate": return true;

                case "customerDefaultAddressUpdate": return true;

                case "customerRecover": return true;

                case "customerReset": return true;

                case "customerResetByUrl": return true;

                case "customerUpdate": return true;

                case "shopPayPaymentRequestSessionCreate": return true;

                case "shopPayPaymentRequestSessionSubmit": return true;

                default: return false;
            }
        }
    }

    public interface NodeQueryDefinition {
        void define(NodeQuery _queryBuilder);
    }

    /**
    * An object with an ID field to support global identification, in accordance with the
    * [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
    * This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
    * and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
    */
    public static class NodeQuery extends Query<NodeQuery> {
        NodeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        /**
        * A globally-unique ID.
        */
        public NodeQuery id() {
            startField("id");

            return this;
        }

        public NodeQuery onAppliedGiftCard(AppliedGiftCardQueryDefinition queryDef) {
            startInlineFragment("AppliedGiftCard");
            queryDef.define(new AppliedGiftCardQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onArticle(ArticleQueryDefinition queryDef) {
            startInlineFragment("Article");
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onBlog(BlogQueryDefinition queryDef) {
            startInlineFragment("Blog");
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onCart(CartQueryDefinition queryDef) {
            startInlineFragment("Cart");
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onCartLine(CartLineQueryDefinition queryDef) {
            startInlineFragment("CartLine");
            queryDef.define(new CartLineQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onCollection(CollectionQueryDefinition queryDef) {
            startInlineFragment("Collection");
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onComment(CommentQueryDefinition queryDef) {
            startInlineFragment("Comment");
            queryDef.define(new CommentQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onCompany(CompanyQueryDefinition queryDef) {
            startInlineFragment("Company");
            queryDef.define(new CompanyQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onCompanyContact(CompanyContactQueryDefinition queryDef) {
            startInlineFragment("CompanyContact");
            queryDef.define(new CompanyContactQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onCompanyLocation(CompanyLocationQueryDefinition queryDef) {
            startInlineFragment("CompanyLocation");
            queryDef.define(new CompanyLocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onComponentizableCartLine(ComponentizableCartLineQueryDefinition queryDef) {
            startInlineFragment("ComponentizableCartLine");
            queryDef.define(new ComponentizableCartLineQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onExternalVideo(ExternalVideoQueryDefinition queryDef) {
            startInlineFragment("ExternalVideo");
            queryDef.define(new ExternalVideoQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onGenericFile(GenericFileQueryDefinition queryDef) {
            startInlineFragment("GenericFile");
            queryDef.define(new GenericFileQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onLocation(LocationQueryDefinition queryDef) {
            startInlineFragment("Location");
            queryDef.define(new LocationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onMailingAddress(MailingAddressQueryDefinition queryDef) {
            startInlineFragment("MailingAddress");
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onMarket(MarketQueryDefinition queryDef) {
            startInlineFragment("Market");
            queryDef.define(new MarketQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onMediaImage(MediaImageQueryDefinition queryDef) {
            startInlineFragment("MediaImage");
            queryDef.define(new MediaImageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onMediaPresentation(MediaPresentationQueryDefinition queryDef) {
            startInlineFragment("MediaPresentation");
            queryDef.define(new MediaPresentationQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onMenu(MenuQueryDefinition queryDef) {
            startInlineFragment("Menu");
            queryDef.define(new MenuQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onMenuItem(MenuItemQueryDefinition queryDef) {
            startInlineFragment("MenuItem");
            queryDef.define(new MenuItemQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onMetafield(MetafieldQueryDefinition queryDef) {
            startInlineFragment("Metafield");
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onMetaobject(MetaobjectQueryDefinition queryDef) {
            startInlineFragment("Metaobject");
            queryDef.define(new MetaobjectQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onModel3d(Model3dQueryDefinition queryDef) {
            startInlineFragment("Model3d");
            queryDef.define(new Model3dQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onOrder(OrderQueryDefinition queryDef) {
            startInlineFragment("Order");
            queryDef.define(new OrderQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onPage(PageQueryDefinition queryDef) {
            startInlineFragment("Page");
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onProduct(ProductQueryDefinition queryDef) {
            startInlineFragment("Product");
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onProductOption(ProductOptionQueryDefinition queryDef) {
            startInlineFragment("ProductOption");
            queryDef.define(new ProductOptionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onProductOptionValue(ProductOptionValueQueryDefinition queryDef) {
            startInlineFragment("ProductOptionValue");
            queryDef.define(new ProductOptionValueQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onProductVariant(ProductVariantQueryDefinition queryDef) {
            startInlineFragment("ProductVariant");
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onShop(ShopQueryDefinition queryDef) {
            startInlineFragment("Shop");
            queryDef.define(new ShopQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onShopPolicy(ShopPolicyQueryDefinition queryDef) {
            startInlineFragment("ShopPolicy");
            queryDef.define(new ShopPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onUrlRedirect(UrlRedirectQueryDefinition queryDef) {
            startInlineFragment("UrlRedirect");
            queryDef.define(new UrlRedirectQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public NodeQuery onVideo(VideoQueryDefinition queryDef) {
            startInlineFragment("Video");
            queryDef.define(new VideoQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface Node extends com.shopify.graphql.support.Node {
        String getGraphQlTypeName();

        ID getId();
    }

    /**
    * An object with an ID field to support global identification, in accordance with the
    * [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
    * This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
    * and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
    */
    public static class UnknownNode extends AbstractResponse<UnknownNode> implements Node {
        public UnknownNode() {
        }

        public UnknownNode(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static Node create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "AppliedGiftCard": {
                    return new AppliedGiftCard(fields);
                }

                case "Article": {
                    return new Article(fields);
                }

                case "Blog": {
                    return new Blog(fields);
                }

                case "Cart": {
                    return new Cart(fields);
                }

                case "CartLine": {
                    return new CartLine(fields);
                }

                case "Collection": {
                    return new Collection(fields);
                }

                case "Comment": {
                    return new Comment(fields);
                }

                case "Company": {
                    return new Company(fields);
                }

                case "CompanyContact": {
                    return new CompanyContact(fields);
                }

                case "CompanyLocation": {
                    return new CompanyLocation(fields);
                }

                case "ComponentizableCartLine": {
                    return new ComponentizableCartLine(fields);
                }

                case "ExternalVideo": {
                    return new ExternalVideo(fields);
                }

                case "GenericFile": {
                    return new GenericFile(fields);
                }

                case "Location": {
                    return new Location(fields);
                }

                case "MailingAddress": {
                    return new MailingAddress(fields);
                }

                case "Market": {
                    return new Market(fields);
                }

                case "MediaImage": {
                    return new MediaImage(fields);
                }

                case "MediaPresentation": {
                    return new MediaPresentation(fields);
                }

                case "Menu": {
                    return new Menu(fields);
                }

                case "MenuItem": {
                    return new MenuItem(fields);
                }

                case "Metafield": {
                    return new Metafield(fields);
                }

                case "Metaobject": {
                    return new Metaobject(fields);
                }

                case "Model3d": {
                    return new Model3d(fields);
                }

                case "Order": {
                    return new Order(fields);
                }

                case "Page": {
                    return new Page(fields);
                }

                case "Product": {
                    return new Product(fields);
                }

                case "ProductOption": {
                    return new ProductOption(fields);
                }

                case "ProductOptionValue": {
                    return new ProductOptionValue(fields);
                }

                case "ProductVariant": {
                    return new ProductVariant(fields);
                }

                case "Shop": {
                    return new Shop(fields);
                }

                case "ShopPolicy": {
                    return new ShopPolicy(fields);
                }

                case "UrlRedirect": {
                    return new UrlRedirect(fields);
                }

                case "Video": {
                    return new Video(fields);
                }

                default: {
                    return new UnknownNode(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public UnknownNode setId(ID arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "id": return false;

                default: return false;
            }
        }
    }

    public interface OnlineStorePublishableQueryDefinition {
        void define(OnlineStorePublishableQuery _queryBuilder);
    }

    /**
    * Represents a resource that can be published to the Online Store sales channel.
    */
    public static class OnlineStorePublishableQuery extends Query<OnlineStorePublishableQuery> {
        OnlineStorePublishableQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */
        public OnlineStorePublishableQuery onlineStoreUrl() {
            startField("onlineStoreUrl");

            return this;
        }

        public OnlineStorePublishableQuery onArticle(ArticleQueryDefinition queryDef) {
            startInlineFragment("Article");
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public OnlineStorePublishableQuery onBlog(BlogQueryDefinition queryDef) {
            startInlineFragment("Blog");
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public OnlineStorePublishableQuery onCollection(CollectionQueryDefinition queryDef) {
            startInlineFragment("Collection");
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public OnlineStorePublishableQuery onMetaobject(MetaobjectQueryDefinition queryDef) {
            startInlineFragment("Metaobject");
            queryDef.define(new MetaobjectQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public OnlineStorePublishableQuery onPage(PageQueryDefinition queryDef) {
            startInlineFragment("Page");
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public OnlineStorePublishableQuery onProduct(ProductQueryDefinition queryDef) {
            startInlineFragment("Product");
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface OnlineStorePublishable {
        String getGraphQlTypeName();

        String getOnlineStoreUrl();
    }

    /**
    * Represents a resource that can be published to the Online Store sales channel.
    */
    public static class UnknownOnlineStorePublishable extends AbstractResponse<UnknownOnlineStorePublishable> implements OnlineStorePublishable {
        public UnknownOnlineStorePublishable() {
        }

        public UnknownOnlineStorePublishable(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "onlineStoreUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static OnlineStorePublishable create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "Article": {
                    return new Article(fields);
                }

                case "Blog": {
                    return new Blog(fields);
                }

                case "Collection": {
                    return new Collection(fields);
                }

                case "Metaobject": {
                    return new Metaobject(fields);
                }

                case "Page": {
                    return new Page(fields);
                }

                case "Product": {
                    return new Product(fields);
                }

                default: {
                    return new UnknownOnlineStorePublishable(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */

        public String getOnlineStoreUrl() {
            return (String) get("onlineStoreUrl");
        }

        public UnknownOnlineStorePublishable setOnlineStoreUrl(String arg) {
            optimisticData.put(getKey("onlineStoreUrl"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "onlineStoreUrl": return false;

                default: return false;
            }
        }
    }

    public interface OrderQueryDefinition {
        void define(OrderQuery _queryBuilder);
    }

    /**
    * An order is a customer’s completed request to purchase one or more products from a shop. An order is
    * created when a customer completes the checkout process, during which time they provides an email
    * address, billing address and payment information.
    */
    public static class OrderQuery extends Query<OrderQuery> {
        OrderQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The address associated with the payment method.
        */
        public OrderQuery billingAddress(MailingAddressQueryDefinition queryDef) {
            startField("billingAddress");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The reason for the order's cancellation. Returns `null` if the order wasn't canceled.
        */
        public OrderQuery cancelReason() {
            startField("cancelReason");

            return this;
        }

        /**
        * The date and time when the order was canceled. Returns null if the order wasn't canceled.
        */
        public OrderQuery canceledAt() {
            startField("canceledAt");

            return this;
        }

        /**
        * The code of the currency used for the payment.
        */
        public OrderQuery currencyCode() {
            startField("currencyCode");

            return this;
        }

        /**
        * The subtotal of line items and their discounts, excluding line items that have been removed. Does
        * not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes aren't
        * included unless the order is a taxes-included order.
        */
        public OrderQuery currentSubtotalPrice(MoneyV2QueryDefinition queryDef) {
            startField("currentSubtotalPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total cost of duties for the order, including refunds.
        */
        public OrderQuery currentTotalDuties(MoneyV2QueryDefinition queryDef) {
            startField("currentTotalDuties");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total amount of the order, including duties, taxes and discounts, minus amounts for line items
        * that have been removed.
        */
        public OrderQuery currentTotalPrice(MoneyV2QueryDefinition queryDef) {
            startField("currentTotalPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total cost of shipping, excluding shipping lines that have been refunded or removed. Taxes
        * aren't included unless the order is a taxes-included order.
        */
        public OrderQuery currentTotalShippingPrice(MoneyV2QueryDefinition queryDef) {
            startField("currentTotalShippingPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total of all taxes applied to the order, excluding taxes for returned line items.
        */
        public OrderQuery currentTotalTax(MoneyV2QueryDefinition queryDef) {
            startField("currentTotalTax");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the custom attributes added to the order.
        */
        public OrderQuery customAttributes(AttributeQueryDefinition queryDef) {
            startField("customAttributes");

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The locale code in which this specific order happened.
        */
        public OrderQuery customerLocale() {
            startField("customerLocale");

            return this;
        }

        /**
        * The unique URL that the customer can use to access the order.
        */
        public OrderQuery customerUrl() {
            startField("customerUrl");

            return this;
        }

        public class DiscountApplicationsArguments extends Arguments {
            DiscountApplicationsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public DiscountApplicationsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public DiscountApplicationsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public DiscountApplicationsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public DiscountApplicationsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public DiscountApplicationsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface DiscountApplicationsArgumentsDefinition {
            void define(DiscountApplicationsArguments args);
        }

        /**
        * Discounts that have been applied on the order.
        */
        public OrderQuery discountApplications(DiscountApplicationConnectionQueryDefinition queryDef) {
            return discountApplications(args -> {}, queryDef);
        }

        /**
        * Discounts that have been applied on the order.
        */
        public OrderQuery discountApplications(DiscountApplicationsArgumentsDefinition argsDef, DiscountApplicationConnectionQueryDefinition queryDef) {
            startField("discountApplications");

            DiscountApplicationsArguments args = new DiscountApplicationsArguments(_queryBuilder);
            argsDef.define(args);
            DiscountApplicationsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new DiscountApplicationConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether the order has had any edits applied or not.
        */
        public OrderQuery edited() {
            startField("edited");

            return this;
        }

        /**
        * The customer's email address.
        */
        public OrderQuery email() {
            startField("email");

            return this;
        }

        /**
        * The financial status of the order.
        */
        public OrderQuery financialStatus() {
            startField("financialStatus");

            return this;
        }

        /**
        * The fulfillment status for the order.
        */
        public OrderQuery fulfillmentStatus() {
            startField("fulfillmentStatus");

            return this;
        }

        public class LineItemsArguments extends Arguments {
            LineItemsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public LineItemsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public LineItemsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public LineItemsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public LineItemsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public LineItemsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface LineItemsArgumentsDefinition {
            void define(LineItemsArguments args);
        }

        /**
        * List of the order’s line items.
        */
        public OrderQuery lineItems(OrderLineItemConnectionQueryDefinition queryDef) {
            return lineItems(args -> {}, queryDef);
        }

        /**
        * List of the order’s line items.
        */
        public OrderQuery lineItems(LineItemsArgumentsDefinition argsDef, OrderLineItemConnectionQueryDefinition queryDef) {
            startField("lineItems");

            LineItemsArguments args = new LineItemsArguments(_queryBuilder);
            argsDef.define(args);
            LineItemsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new OrderLineItemConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public OrderQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public OrderQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public OrderQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Unique identifier for the order that appears on the order.
        * For example, _#1000_ or _Store1001.
        */
        public OrderQuery name() {
            startField("name");

            return this;
        }

        /**
        * A unique numeric identifier for the order for use by shop owner and customer.
        */
        public OrderQuery orderNumber() {
            startField("orderNumber");

            return this;
        }

        /**
        * The total cost of duties charged at checkout.
        */
        public OrderQuery originalTotalDuties(MoneyV2QueryDefinition queryDef) {
            startField("originalTotalDuties");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total price of the order before any applied edits.
        */
        public OrderQuery originalTotalPrice(MoneyV2QueryDefinition queryDef) {
            startField("originalTotalPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The customer's phone number for receiving SMS notifications.
        */
        public OrderQuery phone() {
            startField("phone");

            return this;
        }

        /**
        * The date and time when the order was imported.
        * This value can be set to dates in the past when importing from other systems.
        * If no value is provided, it will be auto-generated based on current date and time.
        */
        public OrderQuery processedAt() {
            startField("processedAt");

            return this;
        }

        /**
        * The address to where the order will be shipped.
        */
        public OrderQuery shippingAddress(MailingAddressQueryDefinition queryDef) {
            startField("shippingAddress");

            _queryBuilder.append('{');
            queryDef.define(new MailingAddressQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The discounts that have been allocated onto the shipping line by discount applications.
        */
        public OrderQuery shippingDiscountAllocations(DiscountAllocationQueryDefinition queryDef) {
            startField("shippingDiscountAllocations");

            _queryBuilder.append('{');
            queryDef.define(new DiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The unique URL for the order's status page.
        */
        public OrderQuery statusUrl() {
            startField("statusUrl");

            return this;
        }

        /**
        * Price of the order before shipping and taxes.
        */
        public OrderQuery subtotalPrice(MoneyV2QueryDefinition queryDef) {
            startField("subtotalPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Price of the order before duties, shipping and taxes.
        *
        * @deprecated Use `subtotalPrice` instead.
        */
        @Deprecated
        public OrderQuery subtotalPriceV2(MoneyV2QueryDefinition queryDef) {
            startField("subtotalPriceV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class SuccessfulFulfillmentsArguments extends Arguments {
            SuccessfulFulfillmentsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Truncate the array result to this size.
            */
            public SuccessfulFulfillmentsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface SuccessfulFulfillmentsArgumentsDefinition {
            void define(SuccessfulFulfillmentsArguments args);
        }

        /**
        * List of the order’s successful fulfillments.
        */
        public OrderQuery successfulFulfillments(FulfillmentQueryDefinition queryDef) {
            return successfulFulfillments(args -> {}, queryDef);
        }

        /**
        * List of the order’s successful fulfillments.
        */
        public OrderQuery successfulFulfillments(SuccessfulFulfillmentsArgumentsDefinition argsDef, FulfillmentQueryDefinition queryDef) {
            startField("successfulFulfillments");

            SuccessfulFulfillmentsArguments args = new SuccessfulFulfillmentsArguments(_queryBuilder);
            argsDef.define(args);
            SuccessfulFulfillmentsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new FulfillmentQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The sum of all the prices of all the items in the order, duties, taxes and discounts included (must
        * be positive).
        */
        public OrderQuery totalPrice(MoneyV2QueryDefinition queryDef) {
            startField("totalPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The sum of all the prices of all the items in the order, duties, taxes and discounts included (must
        * be positive).
        *
        * @deprecated Use `totalPrice` instead.
        */
        @Deprecated
        public OrderQuery totalPriceV2(MoneyV2QueryDefinition queryDef) {
            startField("totalPriceV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total amount that has been refunded.
        */
        public OrderQuery totalRefunded(MoneyV2QueryDefinition queryDef) {
            startField("totalRefunded");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total amount that has been refunded.
        *
        * @deprecated Use `totalRefunded` instead.
        */
        @Deprecated
        public OrderQuery totalRefundedV2(MoneyV2QueryDefinition queryDef) {
            startField("totalRefundedV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total cost of shipping.
        */
        public OrderQuery totalShippingPrice(MoneyV2QueryDefinition queryDef) {
            startField("totalShippingPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total cost of shipping.
        *
        * @deprecated Use `totalShippingPrice` instead.
        */
        @Deprecated
        public OrderQuery totalShippingPriceV2(MoneyV2QueryDefinition queryDef) {
            startField("totalShippingPriceV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total cost of taxes.
        */
        public OrderQuery totalTax(MoneyV2QueryDefinition queryDef) {
            startField("totalTax");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total cost of taxes.
        *
        * @deprecated Use `totalTax` instead.
        */
        @Deprecated
        public OrderQuery totalTaxV2(MoneyV2QueryDefinition queryDef) {
            startField("totalTaxV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An order is a customer’s completed request to purchase one or more products from a shop. An order is
    * created when a customer completes the checkout process, during which time they provides an email
    * address, billing address and payment information.
    */
    public static class Order extends AbstractResponse<Order> implements HasMetafields, MetafieldParentResource, Node {
        public Order() {
        }

        public Order(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "billingAddress": {
                        MailingAddress optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MailingAddress(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cancelReason": {
                        OrderCancelReason optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = OrderCancelReason.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "canceledAt": {
                        DateTime optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = Utils.parseDateTime(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "currencyCode": {
                        responseData.put(key, CurrencyCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "currentSubtotalPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "currentTotalDuties": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "currentTotalPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "currentTotalShippingPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "currentTotalTax": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "customAttributes": {
                        List<Attribute> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Attribute(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "customerLocale": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customerUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discountApplications": {
                        responseData.put(key, new DiscountApplicationConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "edited": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "email": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "financialStatus": {
                        OrderFinancialStatus optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = OrderFinancialStatus.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "fulfillmentStatus": {
                        responseData.put(key, OrderFulfillmentStatus.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "lineItems": {
                        responseData.put(key, new OrderLineItemConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "orderNumber": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "originalTotalDuties": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "originalTotalPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "processedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "shippingAddress": {
                        MailingAddress optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MailingAddress(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shippingDiscountAllocations": {
                        List<DiscountAllocation> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new DiscountAllocation(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "statusUrl": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "subtotalPrice": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "subtotalPriceV2": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "successfulFulfillments": {
                        List<Fulfillment> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<Fulfillment> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(new Fulfillment(jsonAsObject(element1, key)));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "totalPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalPriceV2": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalRefunded": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalRefundedV2": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalShippingPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalShippingPriceV2": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalTax": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "totalTaxV2": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Order(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Order";
        }

        /**
        * The address associated with the payment method.
        */

        public MailingAddress getBillingAddress() {
            return (MailingAddress) get("billingAddress");
        }

        public Order setBillingAddress(MailingAddress arg) {
            optimisticData.put(getKey("billingAddress"), arg);
            return this;
        }

        /**
        * The reason for the order's cancellation. Returns `null` if the order wasn't canceled.
        */

        public OrderCancelReason getCancelReason() {
            return (OrderCancelReason) get("cancelReason");
        }

        public Order setCancelReason(OrderCancelReason arg) {
            optimisticData.put(getKey("cancelReason"), arg);
            return this;
        }

        /**
        * The date and time when the order was canceled. Returns null if the order wasn't canceled.
        */

        public DateTime getCanceledAt() {
            return (DateTime) get("canceledAt");
        }

        public Order setCanceledAt(DateTime arg) {
            optimisticData.put(getKey("canceledAt"), arg);
            return this;
        }

        /**
        * The code of the currency used for the payment.
        */

        public CurrencyCode getCurrencyCode() {
            return (CurrencyCode) get("currencyCode");
        }

        public Order setCurrencyCode(CurrencyCode arg) {
            optimisticData.put(getKey("currencyCode"), arg);
            return this;
        }

        /**
        * The subtotal of line items and their discounts, excluding line items that have been removed. Does
        * not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes aren't
        * included unless the order is a taxes-included order.
        */

        public MoneyV2 getCurrentSubtotalPrice() {
            return (MoneyV2) get("currentSubtotalPrice");
        }

        public Order setCurrentSubtotalPrice(MoneyV2 arg) {
            optimisticData.put(getKey("currentSubtotalPrice"), arg);
            return this;
        }

        /**
        * The total cost of duties for the order, including refunds.
        */

        public MoneyV2 getCurrentTotalDuties() {
            return (MoneyV2) get("currentTotalDuties");
        }

        public Order setCurrentTotalDuties(MoneyV2 arg) {
            optimisticData.put(getKey("currentTotalDuties"), arg);
            return this;
        }

        /**
        * The total amount of the order, including duties, taxes and discounts, minus amounts for line items
        * that have been removed.
        */

        public MoneyV2 getCurrentTotalPrice() {
            return (MoneyV2) get("currentTotalPrice");
        }

        public Order setCurrentTotalPrice(MoneyV2 arg) {
            optimisticData.put(getKey("currentTotalPrice"), arg);
            return this;
        }

        /**
        * The total cost of shipping, excluding shipping lines that have been refunded or removed. Taxes
        * aren't included unless the order is a taxes-included order.
        */

        public MoneyV2 getCurrentTotalShippingPrice() {
            return (MoneyV2) get("currentTotalShippingPrice");
        }

        public Order setCurrentTotalShippingPrice(MoneyV2 arg) {
            optimisticData.put(getKey("currentTotalShippingPrice"), arg);
            return this;
        }

        /**
        * The total of all taxes applied to the order, excluding taxes for returned line items.
        */

        public MoneyV2 getCurrentTotalTax() {
            return (MoneyV2) get("currentTotalTax");
        }

        public Order setCurrentTotalTax(MoneyV2 arg) {
            optimisticData.put(getKey("currentTotalTax"), arg);
            return this;
        }

        /**
        * A list of the custom attributes added to the order.
        */

        public List<Attribute> getCustomAttributes() {
            return (List<Attribute>) get("customAttributes");
        }

        public Order setCustomAttributes(List<Attribute> arg) {
            optimisticData.put(getKey("customAttributes"), arg);
            return this;
        }

        /**
        * The locale code in which this specific order happened.
        */

        public String getCustomerLocale() {
            return (String) get("customerLocale");
        }

        public Order setCustomerLocale(String arg) {
            optimisticData.put(getKey("customerLocale"), arg);
            return this;
        }

        /**
        * The unique URL that the customer can use to access the order.
        */

        public String getCustomerUrl() {
            return (String) get("customerUrl");
        }

        public Order setCustomerUrl(String arg) {
            optimisticData.put(getKey("customerUrl"), arg);
            return this;
        }

        /**
        * Discounts that have been applied on the order.
        */

        public DiscountApplicationConnection getDiscountApplications() {
            return (DiscountApplicationConnection) get("discountApplications");
        }

        public Order setDiscountApplications(DiscountApplicationConnection arg) {
            optimisticData.put(getKey("discountApplications"), arg);
            return this;
        }

        /**
        * Whether the order has had any edits applied or not.
        */

        public Boolean getEdited() {
            return (Boolean) get("edited");
        }

        public Order setEdited(Boolean arg) {
            optimisticData.put(getKey("edited"), arg);
            return this;
        }

        /**
        * The customer's email address.
        */

        public String getEmail() {
            return (String) get("email");
        }

        public Order setEmail(String arg) {
            optimisticData.put(getKey("email"), arg);
            return this;
        }

        /**
        * The financial status of the order.
        */

        public OrderFinancialStatus getFinancialStatus() {
            return (OrderFinancialStatus) get("financialStatus");
        }

        public Order setFinancialStatus(OrderFinancialStatus arg) {
            optimisticData.put(getKey("financialStatus"), arg);
            return this;
        }

        /**
        * The fulfillment status for the order.
        */

        public OrderFulfillmentStatus getFulfillmentStatus() {
            return (OrderFulfillmentStatus) get("fulfillmentStatus");
        }

        public Order setFulfillmentStatus(OrderFulfillmentStatus arg) {
            optimisticData.put(getKey("fulfillmentStatus"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * List of the order’s line items.
        */

        public OrderLineItemConnection getLineItems() {
            return (OrderLineItemConnection) get("lineItems");
        }

        public Order setLineItems(OrderLineItemConnection arg) {
            optimisticData.put(getKey("lineItems"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Order setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Order setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * Unique identifier for the order that appears on the order.
        * For example, _#1000_ or _Store1001.
        */

        public String getName() {
            return (String) get("name");
        }

        public Order setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * A unique numeric identifier for the order for use by shop owner and customer.
        */

        public Integer getOrderNumber() {
            return (Integer) get("orderNumber");
        }

        public Order setOrderNumber(Integer arg) {
            optimisticData.put(getKey("orderNumber"), arg);
            return this;
        }

        /**
        * The total cost of duties charged at checkout.
        */

        public MoneyV2 getOriginalTotalDuties() {
            return (MoneyV2) get("originalTotalDuties");
        }

        public Order setOriginalTotalDuties(MoneyV2 arg) {
            optimisticData.put(getKey("originalTotalDuties"), arg);
            return this;
        }

        /**
        * The total price of the order before any applied edits.
        */

        public MoneyV2 getOriginalTotalPrice() {
            return (MoneyV2) get("originalTotalPrice");
        }

        public Order setOriginalTotalPrice(MoneyV2 arg) {
            optimisticData.put(getKey("originalTotalPrice"), arg);
            return this;
        }

        /**
        * The customer's phone number for receiving SMS notifications.
        */

        public String getPhone() {
            return (String) get("phone");
        }

        public Order setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        /**
        * The date and time when the order was imported.
        * This value can be set to dates in the past when importing from other systems.
        * If no value is provided, it will be auto-generated based on current date and time.
        */

        public DateTime getProcessedAt() {
            return (DateTime) get("processedAt");
        }

        public Order setProcessedAt(DateTime arg) {
            optimisticData.put(getKey("processedAt"), arg);
            return this;
        }

        /**
        * The address to where the order will be shipped.
        */

        public MailingAddress getShippingAddress() {
            return (MailingAddress) get("shippingAddress");
        }

        public Order setShippingAddress(MailingAddress arg) {
            optimisticData.put(getKey("shippingAddress"), arg);
            return this;
        }

        /**
        * The discounts that have been allocated onto the shipping line by discount applications.
        */

        public List<DiscountAllocation> getShippingDiscountAllocations() {
            return (List<DiscountAllocation>) get("shippingDiscountAllocations");
        }

        public Order setShippingDiscountAllocations(List<DiscountAllocation> arg) {
            optimisticData.put(getKey("shippingDiscountAllocations"), arg);
            return this;
        }

        /**
        * The unique URL for the order's status page.
        */

        public String getStatusUrl() {
            return (String) get("statusUrl");
        }

        public Order setStatusUrl(String arg) {
            optimisticData.put(getKey("statusUrl"), arg);
            return this;
        }

        /**
        * Price of the order before shipping and taxes.
        */

        public MoneyV2 getSubtotalPrice() {
            return (MoneyV2) get("subtotalPrice");
        }

        public Order setSubtotalPrice(MoneyV2 arg) {
            optimisticData.put(getKey("subtotalPrice"), arg);
            return this;
        }

        /**
        * Price of the order before duties, shipping and taxes.
        *
        * @deprecated Use `subtotalPrice` instead.
        */

        public MoneyV2 getSubtotalPriceV2() {
            return (MoneyV2) get("subtotalPriceV2");
        }

        public Order setSubtotalPriceV2(MoneyV2 arg) {
            optimisticData.put(getKey("subtotalPriceV2"), arg);
            return this;
        }

        /**
        * List of the order’s successful fulfillments.
        */

        public List<Fulfillment> getSuccessfulFulfillments() {
            return (List<Fulfillment>) get("successfulFulfillments");
        }

        public Order setSuccessfulFulfillments(List<Fulfillment> arg) {
            optimisticData.put(getKey("successfulFulfillments"), arg);
            return this;
        }

        /**
        * The sum of all the prices of all the items in the order, duties, taxes and discounts included (must
        * be positive).
        */

        public MoneyV2 getTotalPrice() {
            return (MoneyV2) get("totalPrice");
        }

        public Order setTotalPrice(MoneyV2 arg) {
            optimisticData.put(getKey("totalPrice"), arg);
            return this;
        }

        /**
        * The sum of all the prices of all the items in the order, duties, taxes and discounts included (must
        * be positive).
        *
        * @deprecated Use `totalPrice` instead.
        */

        public MoneyV2 getTotalPriceV2() {
            return (MoneyV2) get("totalPriceV2");
        }

        public Order setTotalPriceV2(MoneyV2 arg) {
            optimisticData.put(getKey("totalPriceV2"), arg);
            return this;
        }

        /**
        * The total amount that has been refunded.
        */

        public MoneyV2 getTotalRefunded() {
            return (MoneyV2) get("totalRefunded");
        }

        public Order setTotalRefunded(MoneyV2 arg) {
            optimisticData.put(getKey("totalRefunded"), arg);
            return this;
        }

        /**
        * The total amount that has been refunded.
        *
        * @deprecated Use `totalRefunded` instead.
        */

        public MoneyV2 getTotalRefundedV2() {
            return (MoneyV2) get("totalRefundedV2");
        }

        public Order setTotalRefundedV2(MoneyV2 arg) {
            optimisticData.put(getKey("totalRefundedV2"), arg);
            return this;
        }

        /**
        * The total cost of shipping.
        */

        public MoneyV2 getTotalShippingPrice() {
            return (MoneyV2) get("totalShippingPrice");
        }

        public Order setTotalShippingPrice(MoneyV2 arg) {
            optimisticData.put(getKey("totalShippingPrice"), arg);
            return this;
        }

        /**
        * The total cost of shipping.
        *
        * @deprecated Use `totalShippingPrice` instead.
        */

        public MoneyV2 getTotalShippingPriceV2() {
            return (MoneyV2) get("totalShippingPriceV2");
        }

        public Order setTotalShippingPriceV2(MoneyV2 arg) {
            optimisticData.put(getKey("totalShippingPriceV2"), arg);
            return this;
        }

        /**
        * The total cost of taxes.
        */

        public MoneyV2 getTotalTax() {
            return (MoneyV2) get("totalTax");
        }

        public Order setTotalTax(MoneyV2 arg) {
            optimisticData.put(getKey("totalTax"), arg);
            return this;
        }

        /**
        * The total cost of taxes.
        *
        * @deprecated Use `totalTax` instead.
        */

        public MoneyV2 getTotalTaxV2() {
            return (MoneyV2) get("totalTaxV2");
        }

        public Order setTotalTaxV2(MoneyV2 arg) {
            optimisticData.put(getKey("totalTaxV2"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "billingAddress": return true;

                case "cancelReason": return false;

                case "canceledAt": return false;

                case "currencyCode": return false;

                case "currentSubtotalPrice": return true;

                case "currentTotalDuties": return true;

                case "currentTotalPrice": return true;

                case "currentTotalShippingPrice": return true;

                case "currentTotalTax": return true;

                case "customAttributes": return true;

                case "customerLocale": return false;

                case "customerUrl": return false;

                case "discountApplications": return true;

                case "edited": return false;

                case "email": return false;

                case "financialStatus": return false;

                case "fulfillmentStatus": return false;

                case "id": return false;

                case "lineItems": return true;

                case "metafield": return true;

                case "metafields": return true;

                case "name": return false;

                case "orderNumber": return false;

                case "originalTotalDuties": return true;

                case "originalTotalPrice": return true;

                case "phone": return false;

                case "processedAt": return false;

                case "shippingAddress": return true;

                case "shippingDiscountAllocations": return true;

                case "statusUrl": return false;

                case "subtotalPrice": return true;

                case "subtotalPriceV2": return true;

                case "successfulFulfillments": return true;

                case "totalPrice": return true;

                case "totalPriceV2": return true;

                case "totalRefunded": return true;

                case "totalRefundedV2": return true;

                case "totalShippingPrice": return true;

                case "totalShippingPriceV2": return true;

                case "totalTax": return true;

                case "totalTaxV2": return true;

                default: return false;
            }
        }
    }

    /**
    * Represents the reason for the order's cancellation.
    */
    public enum OrderCancelReason {
        /**
        * The customer wanted to cancel the order.
        */
        CUSTOMER,

        /**
        * Payment was declined.
        */
        DECLINED,

        /**
        * The order was fraudulent.
        */
        FRAUD,

        /**
        * There was insufficient inventory.
        */
        INVENTORY,

        /**
        * The order was canceled for an unlisted reason.
        */
        OTHER,

        /**
        * Staff made an error.
        */
        STAFF,

        UNKNOWN_VALUE;

        public static OrderCancelReason fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "CUSTOMER": {
                    return CUSTOMER;
                }

                case "DECLINED": {
                    return DECLINED;
                }

                case "FRAUD": {
                    return FRAUD;
                }

                case "INVENTORY": {
                    return INVENTORY;
                }

                case "OTHER": {
                    return OTHER;
                }

                case "STAFF": {
                    return STAFF;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CUSTOMER: {
                    return "CUSTOMER";
                }

                case DECLINED: {
                    return "DECLINED";
                }

                case FRAUD: {
                    return "FRAUD";
                }

                case INVENTORY: {
                    return "INVENTORY";
                }

                case OTHER: {
                    return "OTHER";
                }

                case STAFF: {
                    return "STAFF";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface OrderConnectionQueryDefinition {
        void define(OrderConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Orders.
    */
    public static class OrderConnectionQuery extends Query<OrderConnectionQuery> {
        OrderConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public OrderConnectionQuery edges(OrderEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new OrderEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in OrderEdge.
        */
        public OrderConnectionQuery nodes(OrderQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new OrderQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public OrderConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total count of Orders.
        */
        public OrderConnectionQuery totalCount() {
            startField("totalCount");

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Orders.
    */
    public static class OrderConnection extends AbstractResponse<OrderConnection> {
        public OrderConnection() {
        }

        public OrderConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<OrderEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new OrderEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Order> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Order(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalCount": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "OrderConnection";
        }

        /**
        * A list of edges.
        */

        public List<OrderEdge> getEdges() {
            return (List<OrderEdge>) get("edges");
        }

        public OrderConnection setEdges(List<OrderEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in OrderEdge.
        */

        public List<Order> getNodes() {
            return (List<Order>) get("nodes");
        }

        public OrderConnection setNodes(List<Order> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public OrderConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        /**
        * The total count of Orders.
        */

        public String getTotalCount() {
            return (String) get("totalCount");
        }

        public OrderConnection setTotalCount(String arg) {
            optimisticData.put(getKey("totalCount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                case "totalCount": return false;

                default: return false;
            }
        }
    }

    public interface OrderEdgeQueryDefinition {
        void define(OrderEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Order and a cursor during pagination.
    */
    public static class OrderEdgeQuery extends Query<OrderEdgeQuery> {
        OrderEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public OrderEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of OrderEdge.
        */
        public OrderEdgeQuery node(OrderQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new OrderQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Order and a cursor during pagination.
    */
    public static class OrderEdge extends AbstractResponse<OrderEdge> {
        public OrderEdge() {
        }

        public OrderEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Order(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "OrderEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public OrderEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of OrderEdge.
        */

        public Order getNode() {
            return (Order) get("node");
        }

        public OrderEdge setNode(Order arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    /**
    * Represents the order's current financial status.
    */
    public enum OrderFinancialStatus {
        /**
        * Displayed as **Authorized**.
        */
        AUTHORIZED,

        /**
        * Displayed as **Paid**.
        */
        PAID,

        /**
        * Displayed as **Partially paid**.
        */
        PARTIALLY_PAID,

        /**
        * Displayed as **Partially refunded**.
        */
        PARTIALLY_REFUNDED,

        /**
        * Displayed as **Pending**.
        */
        PENDING,

        /**
        * Displayed as **Refunded**.
        */
        REFUNDED,

        /**
        * Displayed as **Voided**.
        */
        VOIDED,

        UNKNOWN_VALUE;

        public static OrderFinancialStatus fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "AUTHORIZED": {
                    return AUTHORIZED;
                }

                case "PAID": {
                    return PAID;
                }

                case "PARTIALLY_PAID": {
                    return PARTIALLY_PAID;
                }

                case "PARTIALLY_REFUNDED": {
                    return PARTIALLY_REFUNDED;
                }

                case "PENDING": {
                    return PENDING;
                }

                case "REFUNDED": {
                    return REFUNDED;
                }

                case "VOIDED": {
                    return VOIDED;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case AUTHORIZED: {
                    return "AUTHORIZED";
                }

                case PAID: {
                    return "PAID";
                }

                case PARTIALLY_PAID: {
                    return "PARTIALLY_PAID";
                }

                case PARTIALLY_REFUNDED: {
                    return "PARTIALLY_REFUNDED";
                }

                case PENDING: {
                    return "PENDING";
                }

                case REFUNDED: {
                    return "REFUNDED";
                }

                case VOIDED: {
                    return "VOIDED";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * Represents the order's aggregated fulfillment status for display purposes.
    */
    public enum OrderFulfillmentStatus {
        /**
        * Displayed as **Fulfilled**. All of the items in the order have been fulfilled.
        */
        FULFILLED,

        /**
        * Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for
        * fulfillment has been sent to the fulfillment service.
        */
        IN_PROGRESS,

        /**
        * Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
        */
        ON_HOLD,

        /**
        * Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED"
        * status.
        */
        OPEN,

        /**
        * Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
        */
        PARTIALLY_FULFILLED,

        /**
        * Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from
        * the fulfillment service. Replaced by "IN_PROGRESS" status.
        */
        PENDING_FULFILLMENT,

        /**
        * Displayed as **Restocked**. All of the items in the order have been restocked. Replaced by
        * "UNFULFILLED" status.
        */
        RESTOCKED,

        /**
        * Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment
        * at later time.
        */
        SCHEDULED,

        /**
        * Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
        */
        UNFULFILLED,

        UNKNOWN_VALUE;

        public static OrderFulfillmentStatus fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "FULFILLED": {
                    return FULFILLED;
                }

                case "IN_PROGRESS": {
                    return IN_PROGRESS;
                }

                case "ON_HOLD": {
                    return ON_HOLD;
                }

                case "OPEN": {
                    return OPEN;
                }

                case "PARTIALLY_FULFILLED": {
                    return PARTIALLY_FULFILLED;
                }

                case "PENDING_FULFILLMENT": {
                    return PENDING_FULFILLMENT;
                }

                case "RESTOCKED": {
                    return RESTOCKED;
                }

                case "SCHEDULED": {
                    return SCHEDULED;
                }

                case "UNFULFILLED": {
                    return UNFULFILLED;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case FULFILLED: {
                    return "FULFILLED";
                }

                case IN_PROGRESS: {
                    return "IN_PROGRESS";
                }

                case ON_HOLD: {
                    return "ON_HOLD";
                }

                case OPEN: {
                    return "OPEN";
                }

                case PARTIALLY_FULFILLED: {
                    return "PARTIALLY_FULFILLED";
                }

                case PENDING_FULFILLMENT: {
                    return "PENDING_FULFILLMENT";
                }

                case RESTOCKED: {
                    return "RESTOCKED";
                }

                case SCHEDULED: {
                    return "SCHEDULED";
                }

                case UNFULFILLED: {
                    return "UNFULFILLED";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface OrderLineItemQueryDefinition {
        void define(OrderLineItemQuery _queryBuilder);
    }

    /**
    * Represents a single line in an order. There is one line item for each distinct product variant.
    */
    public static class OrderLineItemQuery extends Query<OrderLineItemQuery> {
        OrderLineItemQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The number of entries associated to the line item minus the items that have been removed.
        */
        public OrderLineItemQuery currentQuantity() {
            startField("currentQuantity");

            return this;
        }

        /**
        * List of custom attributes associated to the line item.
        */
        public OrderLineItemQuery customAttributes(AttributeQueryDefinition queryDef) {
            startField("customAttributes");

            _queryBuilder.append('{');
            queryDef.define(new AttributeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The discounts that have been allocated onto the order line item by discount applications.
        */
        public OrderLineItemQuery discountAllocations(DiscountAllocationQueryDefinition queryDef) {
            startField("discountAllocations");

            _queryBuilder.append('{');
            queryDef.define(new DiscountAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total price of the line item, including discounts, and displayed in the presentment currency.
        */
        public OrderLineItemQuery discountedTotalPrice(MoneyV2QueryDefinition queryDef) {
            startField("discountedTotalPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total price of the line item, not including any discounts. The total price is calculated using
        * the original unit price multiplied by the quantity, and it's displayed in the presentment currency.
        */
        public OrderLineItemQuery originalTotalPrice(MoneyV2QueryDefinition queryDef) {
            startField("originalTotalPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The number of products variants associated to the line item.
        */
        public OrderLineItemQuery quantity() {
            startField("quantity");

            return this;
        }

        /**
        * The title of the product combined with title of the variant.
        */
        public OrderLineItemQuery title() {
            startField("title");

            return this;
        }

        /**
        * The product variant object associated to the line item.
        */
        public OrderLineItemQuery variant(ProductVariantQueryDefinition queryDef) {
            startField("variant");

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a single line in an order. There is one line item for each distinct product variant.
    */
    public static class OrderLineItem extends AbstractResponse<OrderLineItem> {
        public OrderLineItem() {
        }

        public OrderLineItem(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "currentQuantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "customAttributes": {
                        List<Attribute> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Attribute(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "discountAllocations": {
                        List<DiscountAllocation> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new DiscountAllocation(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "discountedTotalPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "originalTotalPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "quantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "variant": {
                        ProductVariant optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ProductVariant(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "OrderLineItem";
        }

        /**
        * The number of entries associated to the line item minus the items that have been removed.
        */

        public Integer getCurrentQuantity() {
            return (Integer) get("currentQuantity");
        }

        public OrderLineItem setCurrentQuantity(Integer arg) {
            optimisticData.put(getKey("currentQuantity"), arg);
            return this;
        }

        /**
        * List of custom attributes associated to the line item.
        */

        public List<Attribute> getCustomAttributes() {
            return (List<Attribute>) get("customAttributes");
        }

        public OrderLineItem setCustomAttributes(List<Attribute> arg) {
            optimisticData.put(getKey("customAttributes"), arg);
            return this;
        }

        /**
        * The discounts that have been allocated onto the order line item by discount applications.
        */

        public List<DiscountAllocation> getDiscountAllocations() {
            return (List<DiscountAllocation>) get("discountAllocations");
        }

        public OrderLineItem setDiscountAllocations(List<DiscountAllocation> arg) {
            optimisticData.put(getKey("discountAllocations"), arg);
            return this;
        }

        /**
        * The total price of the line item, including discounts, and displayed in the presentment currency.
        */

        public MoneyV2 getDiscountedTotalPrice() {
            return (MoneyV2) get("discountedTotalPrice");
        }

        public OrderLineItem setDiscountedTotalPrice(MoneyV2 arg) {
            optimisticData.put(getKey("discountedTotalPrice"), arg);
            return this;
        }

        /**
        * The total price of the line item, not including any discounts. The total price is calculated using
        * the original unit price multiplied by the quantity, and it's displayed in the presentment currency.
        */

        public MoneyV2 getOriginalTotalPrice() {
            return (MoneyV2) get("originalTotalPrice");
        }

        public OrderLineItem setOriginalTotalPrice(MoneyV2 arg) {
            optimisticData.put(getKey("originalTotalPrice"), arg);
            return this;
        }

        /**
        * The number of products variants associated to the line item.
        */

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public OrderLineItem setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        /**
        * The title of the product combined with title of the variant.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public OrderLineItem setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * The product variant object associated to the line item.
        */

        public ProductVariant getVariant() {
            return (ProductVariant) get("variant");
        }

        public OrderLineItem setVariant(ProductVariant arg) {
            optimisticData.put(getKey("variant"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "currentQuantity": return false;

                case "customAttributes": return true;

                case "discountAllocations": return true;

                case "discountedTotalPrice": return true;

                case "originalTotalPrice": return true;

                case "quantity": return false;

                case "title": return false;

                case "variant": return true;

                default: return false;
            }
        }
    }

    public interface OrderLineItemConnectionQueryDefinition {
        void define(OrderLineItemConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple OrderLineItems.
    */
    public static class OrderLineItemConnectionQuery extends Query<OrderLineItemConnectionQuery> {
        OrderLineItemConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public OrderLineItemConnectionQuery edges(OrderLineItemEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new OrderLineItemEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in OrderLineItemEdge.
        */
        public OrderLineItemConnectionQuery nodes(OrderLineItemQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new OrderLineItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public OrderLineItemConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple OrderLineItems.
    */
    public static class OrderLineItemConnection extends AbstractResponse<OrderLineItemConnection> {
        public OrderLineItemConnection() {
        }

        public OrderLineItemConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<OrderLineItemEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new OrderLineItemEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<OrderLineItem> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new OrderLineItem(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "OrderLineItemConnection";
        }

        /**
        * A list of edges.
        */

        public List<OrderLineItemEdge> getEdges() {
            return (List<OrderLineItemEdge>) get("edges");
        }

        public OrderLineItemConnection setEdges(List<OrderLineItemEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in OrderLineItemEdge.
        */

        public List<OrderLineItem> getNodes() {
            return (List<OrderLineItem>) get("nodes");
        }

        public OrderLineItemConnection setNodes(List<OrderLineItem> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public OrderLineItemConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface OrderLineItemEdgeQueryDefinition {
        void define(OrderLineItemEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one OrderLineItem and a cursor during pagination.
    */
    public static class OrderLineItemEdgeQuery extends Query<OrderLineItemEdgeQuery> {
        OrderLineItemEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public OrderLineItemEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of OrderLineItemEdge.
        */
        public OrderLineItemEdgeQuery node(OrderLineItemQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new OrderLineItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one OrderLineItem and a cursor during pagination.
    */
    public static class OrderLineItemEdge extends AbstractResponse<OrderLineItemEdge> {
        public OrderLineItemEdge() {
        }

        public OrderLineItemEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new OrderLineItem(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "OrderLineItemEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public OrderLineItemEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of OrderLineItemEdge.
        */

        public OrderLineItem getNode() {
            return (OrderLineItem) get("node");
        }

        public OrderLineItemEdge setNode(OrderLineItem arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the Order query.
    */
    public enum OrderSortKeys {
        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by the `processed_at` value.
        */
        PROCESSED_AT,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        /**
        * Sort by the `total_price` value.
        */
        TOTAL_PRICE,

        UNKNOWN_VALUE;

        public static OrderSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ID": {
                    return ID;
                }

                case "PROCESSED_AT": {
                    return PROCESSED_AT;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                case "TOTAL_PRICE": {
                    return TOTAL_PRICE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ID: {
                    return "ID";
                }

                case PROCESSED_AT: {
                    return "PROCESSED_AT";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                case TOTAL_PRICE: {
                    return "TOTAL_PRICE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface PageQueryDefinition {
        void define(PageQuery _queryBuilder);
    }

    /**
    * Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom
    * page on the online store.
    */
    public static class PageQuery extends Query<PageQuery> {
        PageQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The description of the page, complete with HTML formatting.
        */
        public PageQuery body() {
            startField("body");

            return this;
        }

        /**
        * Summary of the page body.
        */
        public PageQuery bodySummary() {
            startField("bodySummary");

            return this;
        }

        /**
        * The timestamp of the page creation.
        */
        public PageQuery createdAt() {
            startField("createdAt");

            return this;
        }

        /**
        * A human-friendly unique string for the page automatically generated from its title.
        */
        public PageQuery handle() {
            startField("handle");

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public PageQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public PageQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public PageQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */
        public PageQuery onlineStoreUrl() {
            startField("onlineStoreUrl");

            return this;
        }

        /**
        * The page's SEO information.
        */
        public PageQuery seo(SEOQueryDefinition queryDef) {
            startField("seo");

            _queryBuilder.append('{');
            queryDef.define(new SEOQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The title of the page.
        */
        public PageQuery title() {
            startField("title");

            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */
        public PageQuery trackingParameters() {
            startField("trackingParameters");

            return this;
        }

        /**
        * The timestamp of the latest page update.
        */
        public PageQuery updatedAt() {
            startField("updatedAt");

            return this;
        }
    }

    /**
    * Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom
    * page on the online store.
    */
    public static class Page extends AbstractResponse<Page> implements HasMetafields, MenuItemResource, MetafieldParentResource, MetafieldReference, Node, OnlineStorePublishable, SearchResultItem, Trackable {
        public Page() {
        }

        public Page(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "body": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "bodySummary": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "createdAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "onlineStoreUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "seo": {
                        SEO optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new SEO(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "trackingParameters": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Page(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Page";
        }

        /**
        * The description of the page, complete with HTML formatting.
        */

        public String getBody() {
            return (String) get("body");
        }

        public Page setBody(String arg) {
            optimisticData.put(getKey("body"), arg);
            return this;
        }

        /**
        * Summary of the page body.
        */

        public String getBodySummary() {
            return (String) get("bodySummary");
        }

        public Page setBodySummary(String arg) {
            optimisticData.put(getKey("bodySummary"), arg);
            return this;
        }

        /**
        * The timestamp of the page creation.
        */

        public DateTime getCreatedAt() {
            return (DateTime) get("createdAt");
        }

        public Page setCreatedAt(DateTime arg) {
            optimisticData.put(getKey("createdAt"), arg);
            return this;
        }

        /**
        * A human-friendly unique string for the page automatically generated from its title.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public Page setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Page setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Page setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */

        public String getOnlineStoreUrl() {
            return (String) get("onlineStoreUrl");
        }

        public Page setOnlineStoreUrl(String arg) {
            optimisticData.put(getKey("onlineStoreUrl"), arg);
            return this;
        }

        /**
        * The page's SEO information.
        */

        public SEO getSeo() {
            return (SEO) get("seo");
        }

        public Page setSeo(SEO arg) {
            optimisticData.put(getKey("seo"), arg);
            return this;
        }

        /**
        * The title of the page.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public Page setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */

        public String getTrackingParameters() {
            return (String) get("trackingParameters");
        }

        public Page setTrackingParameters(String arg) {
            optimisticData.put(getKey("trackingParameters"), arg);
            return this;
        }

        /**
        * The timestamp of the latest page update.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public Page setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "body": return false;

                case "bodySummary": return false;

                case "createdAt": return false;

                case "handle": return false;

                case "id": return false;

                case "metafield": return true;

                case "metafields": return true;

                case "onlineStoreUrl": return false;

                case "seo": return true;

                case "title": return false;

                case "trackingParameters": return false;

                case "updatedAt": return false;

                default: return false;
            }
        }
    }

    public interface PageConnectionQueryDefinition {
        void define(PageConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Pages.
    */
    public static class PageConnectionQuery extends Query<PageConnectionQuery> {
        PageConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public PageConnectionQuery edges(PageEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new PageEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in PageEdge.
        */
        public PageConnectionQuery nodes(PageQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public PageConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Pages.
    */
    public static class PageConnection extends AbstractResponse<PageConnection> {
        public PageConnection() {
        }

        public PageConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<PageEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new PageEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Page> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Page(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "PageConnection";
        }

        /**
        * A list of edges.
        */

        public List<PageEdge> getEdges() {
            return (List<PageEdge>) get("edges");
        }

        public PageConnection setEdges(List<PageEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in PageEdge.
        */

        public List<Page> getNodes() {
            return (List<Page>) get("nodes");
        }

        public PageConnection setNodes(List<Page> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public PageConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface PageEdgeQueryDefinition {
        void define(PageEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Page and a cursor during pagination.
    */
    public static class PageEdgeQuery extends Query<PageEdgeQuery> {
        PageEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public PageEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of PageEdge.
        */
        public PageEdgeQuery node(PageQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Page and a cursor during pagination.
    */
    public static class PageEdge extends AbstractResponse<PageEdge> {
        public PageEdge() {
        }

        public PageEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Page(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "PageEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public PageEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of PageEdge.
        */

        public Page getNode() {
            return (Page) get("node");
        }

        public PageEdge setNode(Page arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface PageInfoQueryDefinition {
        void define(PageInfoQuery _queryBuilder);
    }

    /**
    * Returns information about pagination in a connection, in accordance with the
    * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
    * For more information, please read our [GraphQL Pagination Usage
    * Guide](https://shopify.dev/api/usage/pagination-graphql).
    */
    public static class PageInfoQuery extends Query<PageInfoQuery> {
        PageInfoQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The cursor corresponding to the last node in edges.
        */
        public PageInfoQuery endCursor() {
            startField("endCursor");

            return this;
        }

        /**
        * Whether there are more pages to fetch following the current page.
        */
        public PageInfoQuery hasNextPage() {
            startField("hasNextPage");

            return this;
        }

        /**
        * Whether there are any pages prior to the current page.
        */
        public PageInfoQuery hasPreviousPage() {
            startField("hasPreviousPage");

            return this;
        }

        /**
        * The cursor corresponding to the first node in edges.
        */
        public PageInfoQuery startCursor() {
            startField("startCursor");

            return this;
        }
    }

    /**
    * Returns information about pagination in a connection, in accordance with the
    * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
    * For more information, please read our [GraphQL Pagination Usage
    * Guide](https://shopify.dev/api/usage/pagination-graphql).
    */
    public static class PageInfo extends AbstractResponse<PageInfo> {
        public PageInfo() {
        }

        public PageInfo(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "endCursor": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "hasNextPage": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "hasPreviousPage": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "startCursor": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "PageInfo";
        }

        /**
        * The cursor corresponding to the last node in edges.
        */

        public String getEndCursor() {
            return (String) get("endCursor");
        }

        public PageInfo setEndCursor(String arg) {
            optimisticData.put(getKey("endCursor"), arg);
            return this;
        }

        /**
        * Whether there are more pages to fetch following the current page.
        */

        public Boolean getHasNextPage() {
            return (Boolean) get("hasNextPage");
        }

        public PageInfo setHasNextPage(Boolean arg) {
            optimisticData.put(getKey("hasNextPage"), arg);
            return this;
        }

        /**
        * Whether there are any pages prior to the current page.
        */

        public Boolean getHasPreviousPage() {
            return (Boolean) get("hasPreviousPage");
        }

        public PageInfo setHasPreviousPage(Boolean arg) {
            optimisticData.put(getKey("hasPreviousPage"), arg);
            return this;
        }

        /**
        * The cursor corresponding to the first node in edges.
        */

        public String getStartCursor() {
            return (String) get("startCursor");
        }

        public PageInfo setStartCursor(String arg) {
            optimisticData.put(getKey("startCursor"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "endCursor": return false;

                case "hasNextPage": return false;

                case "hasPreviousPage": return false;

                case "startCursor": return false;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the Page query.
    */
    public enum PageSortKeys {
        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        /**
        * Sort by the `title` value.
        */
        TITLE,

        /**
        * Sort by the `updated_at` value.
        */
        UPDATED_AT,

        UNKNOWN_VALUE;

        public static PageSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ID": {
                    return ID;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                case "TITLE": {
                    return TITLE;
                }

                case "UPDATED_AT": {
                    return UPDATED_AT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ID: {
                    return "ID";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                case TITLE: {
                    return "TITLE";
                }

                case UPDATED_AT: {
                    return "UPDATED_AT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface PaymentSettingsQueryDefinition {
        void define(PaymentSettingsQuery _queryBuilder);
    }

    /**
    * Settings related to payments.
    */
    public static class PaymentSettingsQuery extends Query<PaymentSettingsQuery> {
        PaymentSettingsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * List of the card brands which the shop accepts.
        */
        public PaymentSettingsQuery acceptedCardBrands() {
            startField("acceptedCardBrands");

            return this;
        }

        /**
        * The url pointing to the endpoint to vault credit cards.
        */
        public PaymentSettingsQuery cardVaultUrl() {
            startField("cardVaultUrl");

            return this;
        }

        /**
        * The country where the shop is located.
        */
        public PaymentSettingsQuery countryCode() {
            startField("countryCode");

            return this;
        }

        /**
        * The three-letter code for the shop's primary currency.
        */
        public PaymentSettingsQuery currencyCode() {
            startField("currencyCode");

            return this;
        }

        /**
        * A list of enabled currencies (ISO 4217 format) that the shop accepts.
        * Merchants can enable currencies from their Shopify Payments settings in the Shopify admin.
        */
        public PaymentSettingsQuery enabledPresentmentCurrencies() {
            startField("enabledPresentmentCurrencies");

            return this;
        }

        /**
        * The shop’s Shopify Payments account ID.
        */
        public PaymentSettingsQuery shopifyPaymentsAccountId() {
            startField("shopifyPaymentsAccountId");

            return this;
        }

        /**
        * List of the digital wallets which the shop supports.
        */
        public PaymentSettingsQuery supportedDigitalWallets() {
            startField("supportedDigitalWallets");

            return this;
        }
    }

    /**
    * Settings related to payments.
    */
    public static class PaymentSettings extends AbstractResponse<PaymentSettings> {
        public PaymentSettings() {
        }

        public PaymentSettings(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "acceptedCardBrands": {
                        List<CardBrand> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(CardBrand.fromGraphQl(jsonAsString(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "cardVaultUrl": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "countryCode": {
                        responseData.put(key, CountryCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "currencyCode": {
                        responseData.put(key, CurrencyCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "enabledPresentmentCurrencies": {
                        List<CurrencyCode> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(CurrencyCode.fromGraphQl(jsonAsString(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "shopifyPaymentsAccountId": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supportedDigitalWallets": {
                        List<DigitalWallet> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(DigitalWallet.fromGraphQl(jsonAsString(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "PaymentSettings";
        }

        /**
        * List of the card brands which the shop accepts.
        */

        public List<CardBrand> getAcceptedCardBrands() {
            return (List<CardBrand>) get("acceptedCardBrands");
        }

        public PaymentSettings setAcceptedCardBrands(List<CardBrand> arg) {
            optimisticData.put(getKey("acceptedCardBrands"), arg);
            return this;
        }

        /**
        * The url pointing to the endpoint to vault credit cards.
        */

        public String getCardVaultUrl() {
            return (String) get("cardVaultUrl");
        }

        public PaymentSettings setCardVaultUrl(String arg) {
            optimisticData.put(getKey("cardVaultUrl"), arg);
            return this;
        }

        /**
        * The country where the shop is located.
        */

        public CountryCode getCountryCode() {
            return (CountryCode) get("countryCode");
        }

        public PaymentSettings setCountryCode(CountryCode arg) {
            optimisticData.put(getKey("countryCode"), arg);
            return this;
        }

        /**
        * The three-letter code for the shop's primary currency.
        */

        public CurrencyCode getCurrencyCode() {
            return (CurrencyCode) get("currencyCode");
        }

        public PaymentSettings setCurrencyCode(CurrencyCode arg) {
            optimisticData.put(getKey("currencyCode"), arg);
            return this;
        }

        /**
        * A list of enabled currencies (ISO 4217 format) that the shop accepts.
        * Merchants can enable currencies from their Shopify Payments settings in the Shopify admin.
        */

        public List<CurrencyCode> getEnabledPresentmentCurrencies() {
            return (List<CurrencyCode>) get("enabledPresentmentCurrencies");
        }

        public PaymentSettings setEnabledPresentmentCurrencies(List<CurrencyCode> arg) {
            optimisticData.put(getKey("enabledPresentmentCurrencies"), arg);
            return this;
        }

        /**
        * The shop’s Shopify Payments account ID.
        */

        public String getShopifyPaymentsAccountId() {
            return (String) get("shopifyPaymentsAccountId");
        }

        public PaymentSettings setShopifyPaymentsAccountId(String arg) {
            optimisticData.put(getKey("shopifyPaymentsAccountId"), arg);
            return this;
        }

        /**
        * List of the digital wallets which the shop supports.
        */

        public List<DigitalWallet> getSupportedDigitalWallets() {
            return (List<DigitalWallet>) get("supportedDigitalWallets");
        }

        public PaymentSettings setSupportedDigitalWallets(List<DigitalWallet> arg) {
            optimisticData.put(getKey("supportedDigitalWallets"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "acceptedCardBrands": return false;

                case "cardVaultUrl": return false;

                case "countryCode": return false;

                case "currencyCode": return false;

                case "enabledPresentmentCurrencies": return false;

                case "shopifyPaymentsAccountId": return false;

                case "supportedDigitalWallets": return false;

                default: return false;
            }
        }
    }

    /**
    * Decides the distribution of results.
    */
    public enum PredictiveSearchLimitScope {
        /**
        * Return results up to limit across all types.
        */
        ALL,

        /**
        * Return results up to limit per type.
        */
        EACH,

        UNKNOWN_VALUE;

        public static PredictiveSearchLimitScope fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ALL": {
                    return ALL;
                }

                case "EACH": {
                    return EACH;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ALL: {
                    return "ALL";
                }

                case EACH: {
                    return "EACH";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface PredictiveSearchResultQueryDefinition {
        void define(PredictiveSearchResultQuery _queryBuilder);
    }

    /**
    * A predictive search result represents a list of products, collections, pages, articles, and query
    * suggestions
    * that matches the predictive search query.
    */
    public static class PredictiveSearchResultQuery extends Query<PredictiveSearchResultQuery> {
        PredictiveSearchResultQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The articles that match the search query.
        */
        public PredictiveSearchResultQuery articles(ArticleQueryDefinition queryDef) {
            startField("articles");

            _queryBuilder.append('{');
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The articles that match the search query.
        */
        public PredictiveSearchResultQuery collections(CollectionQueryDefinition queryDef) {
            startField("collections");

            _queryBuilder.append('{');
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The pages that match the search query.
        */
        public PredictiveSearchResultQuery pages(PageQueryDefinition queryDef) {
            startField("pages");

            _queryBuilder.append('{');
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The products that match the search query.
        */
        public PredictiveSearchResultQuery products(ProductQueryDefinition queryDef) {
            startField("products");

            _queryBuilder.append('{');
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The query suggestions that are relevant to the search query.
        */
        public PredictiveSearchResultQuery queries(SearchQuerySuggestionQueryDefinition queryDef) {
            startField("queries");

            _queryBuilder.append('{');
            queryDef.define(new SearchQuerySuggestionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * A predictive search result represents a list of products, collections, pages, articles, and query
    * suggestions
    * that matches the predictive search query.
    */
    public static class PredictiveSearchResult extends AbstractResponse<PredictiveSearchResult> {
        public PredictiveSearchResult() {
        }

        public PredictiveSearchResult(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "articles": {
                        List<Article> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Article(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "collections": {
                        List<Collection> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Collection(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pages": {
                        List<Page> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Page(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "products": {
                        List<Product> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Product(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "queries": {
                        List<SearchQuerySuggestion> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SearchQuerySuggestion(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "PredictiveSearchResult";
        }

        /**
        * The articles that match the search query.
        */

        public List<Article> getArticles() {
            return (List<Article>) get("articles");
        }

        public PredictiveSearchResult setArticles(List<Article> arg) {
            optimisticData.put(getKey("articles"), arg);
            return this;
        }

        /**
        * The articles that match the search query.
        */

        public List<Collection> getCollections() {
            return (List<Collection>) get("collections");
        }

        public PredictiveSearchResult setCollections(List<Collection> arg) {
            optimisticData.put(getKey("collections"), arg);
            return this;
        }

        /**
        * The pages that match the search query.
        */

        public List<Page> getPages() {
            return (List<Page>) get("pages");
        }

        public PredictiveSearchResult setPages(List<Page> arg) {
            optimisticData.put(getKey("pages"), arg);
            return this;
        }

        /**
        * The products that match the search query.
        */

        public List<Product> getProducts() {
            return (List<Product>) get("products");
        }

        public PredictiveSearchResult setProducts(List<Product> arg) {
            optimisticData.put(getKey("products"), arg);
            return this;
        }

        /**
        * The query suggestions that are relevant to the search query.
        */

        public List<SearchQuerySuggestion> getQueries() {
            return (List<SearchQuerySuggestion>) get("queries");
        }

        public PredictiveSearchResult setQueries(List<SearchQuerySuggestion> arg) {
            optimisticData.put(getKey("queries"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "articles": return true;

                case "collections": return true;

                case "pages": return true;

                case "products": return true;

                case "queries": return true;

                default: return false;
            }
        }
    }

    /**
    * The types of search items to perform predictive search on.
    */
    public enum PredictiveSearchType {
        /**
        * Returns matching articles.
        */
        ARTICLE,

        /**
        * Returns matching collections.
        */
        COLLECTION,

        /**
        * Returns matching pages.
        */
        PAGE,

        /**
        * Returns matching products.
        */
        PRODUCT,

        /**
        * Returns matching query strings.
        */
        QUERY,

        UNKNOWN_VALUE;

        public static PredictiveSearchType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ARTICLE": {
                    return ARTICLE;
                }

                case "COLLECTION": {
                    return COLLECTION;
                }

                case "PAGE": {
                    return PAGE;
                }

                case "PRODUCT": {
                    return PRODUCT;
                }

                case "QUERY": {
                    return QUERY;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ARTICLE: {
                    return "ARTICLE";
                }

                case COLLECTION: {
                    return "COLLECTION";
                }

                case PAGE: {
                    return "PAGE";
                }

                case PRODUCT: {
                    return "PRODUCT";
                }

                case QUERY: {
                    return "QUERY";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * The preferred delivery methods such as shipping, local pickup or through pickup points.
    */
    public enum PreferenceDeliveryMethodType {
        /**
        * A delivery method used to let buyers collect purchases at designated locations like parcel lockers.
        */
        PICKUP_POINT,

        /**
        * A delivery method used to let buyers receive items directly from a specific location within an area.
        */
        PICK_UP,

        /**
        * A delivery method used to send items directly to a buyer’s specified address.
        */
        SHIPPING,

        UNKNOWN_VALUE;

        public static PreferenceDeliveryMethodType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "PICKUP_POINT": {
                    return PICKUP_POINT;
                }

                case "PICK_UP": {
                    return PICK_UP;
                }

                case "SHIPPING": {
                    return SHIPPING;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PICKUP_POINT: {
                    return "PICKUP_POINT";
                }

                case PICK_UP: {
                    return "PICK_UP";
                }

                case SHIPPING: {
                    return "SHIPPING";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class PriceRangeFilter implements Serializable {
        private Input<Double> min = Input.undefined();

        private Input<Double> max = Input.undefined();

        public Double getMin() {
            return min.getValue();
        }

        public Input<Double> getMinInput() {
            return min;
        }

        public PriceRangeFilter setMin(Double min) {
            this.min = Input.optional(min);
            return this;
        }

        public PriceRangeFilter setMinInput(Input<Double> min) {
            if (min == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.min = min;
            return this;
        }

        public Double getMax() {
            return max.getValue();
        }

        public Input<Double> getMaxInput() {
            return max;
        }

        public PriceRangeFilter setMax(Double max) {
            this.max = Input.optional(max);
            return this;
        }

        public PriceRangeFilter setMaxInput(Input<Double> max) {
            if (max == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.max = max;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.min.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                if (min.getValue() != null) {
                    _queryBuilder.append(min.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.max.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                if (max.getValue() != null) {
                    _queryBuilder.append(max.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface PricingPercentageValueQueryDefinition {
        void define(PricingPercentageValueQuery _queryBuilder);
    }

    /**
    * The value of the percentage pricing object.
    */
    public static class PricingPercentageValueQuery extends Query<PricingPercentageValueQuery> {
        PricingPercentageValueQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The percentage value of the object.
        */
        public PricingPercentageValueQuery percentage() {
            startField("percentage");

            return this;
        }
    }

    /**
    * The value of the percentage pricing object.
    */
    public static class PricingPercentageValue extends AbstractResponse<PricingPercentageValue> implements PricingValue {
        public PricingPercentageValue() {
        }

        public PricingPercentageValue(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "percentage": {
                        responseData.put(key, jsonAsDouble(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "PricingPercentageValue";
        }

        /**
        * The percentage value of the object.
        */

        public Double getPercentage() {
            return (Double) get("percentage");
        }

        public PricingPercentageValue setPercentage(Double arg) {
            optimisticData.put(getKey("percentage"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "percentage": return false;

                default: return false;
            }
        }
    }

    public interface PricingValueQueryDefinition {
        void define(PricingValueQuery _queryBuilder);
    }

    /**
    * The price value (fixed or percentage) for a discount application.
    */
    public static class PricingValueQuery extends Query<PricingValueQuery> {
        PricingValueQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public PricingValueQuery onMoneyV2(MoneyV2QueryDefinition queryDef) {
            startInlineFragment("MoneyV2");
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public PricingValueQuery onPricingPercentageValue(PricingPercentageValueQueryDefinition queryDef) {
            startInlineFragment("PricingPercentageValue");
            queryDef.define(new PricingPercentageValueQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface PricingValue {
        String getGraphQlTypeName();
    }

    /**
    * The price value (fixed or percentage) for a discount application.
    */
    public static class UnknownPricingValue extends AbstractResponse<UnknownPricingValue> implements PricingValue {
        public UnknownPricingValue() {
        }

        public UnknownPricingValue(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static PricingValue create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "MoneyV2": {
                    return new MoneyV2(fields);
                }

                case "PricingPercentageValue": {
                    return new PricingPercentageValue(fields);
                }

                default: {
                    return new UnknownPricingValue(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface ProductQueryDefinition {
        void define(ProductQuery _queryBuilder);
    }

    /**
    * A product represents an individual item for sale in a Shopify store. Products are often physical,
    * but they don't have to be.
    * For example, a digital download (such as a movie, music or ebook file) also
    * qualifies as a product, as do services (such as equipment rental, work for hire,
    * customization of another product or an extended warranty).
    */
    public static class ProductQuery extends Query<ProductQuery> {
        ProductQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * Indicates if at least one product variant is available for sale.
        */
        public ProductQuery availableForSale() {
            startField("availableForSale");

            return this;
        }

        public class CollectionsArguments extends Arguments {
            CollectionsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public CollectionsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public CollectionsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public CollectionsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public CollectionsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public CollectionsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CollectionsArgumentsDefinition {
            void define(CollectionsArguments args);
        }

        /**
        * List of collections a product belongs to.
        */
        public ProductQuery collections(CollectionConnectionQueryDefinition queryDef) {
            return collections(args -> {}, queryDef);
        }

        /**
        * List of collections a product belongs to.
        */
        public ProductQuery collections(CollectionsArgumentsDefinition argsDef, CollectionConnectionQueryDefinition queryDef) {
            startField("collections");

            CollectionsArguments args = new CollectionsArguments(_queryBuilder);
            argsDef.define(args);
            CollectionsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new CollectionConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The compare at price of the product across all variants.
        */
        public ProductQuery compareAtPriceRange(ProductPriceRangeQueryDefinition queryDef) {
            startField("compareAtPriceRange");

            _queryBuilder.append('{');
            queryDef.define(new ProductPriceRangeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The date and time when the product was created.
        */
        public ProductQuery createdAt() {
            startField("createdAt");

            return this;
        }

        public class DescriptionArguments extends Arguments {
            DescriptionArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Truncates string after the given length.
            */
            public DescriptionArguments truncateAt(Integer value) {
                if (value != null) {
                    startArgument("truncateAt");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface DescriptionArgumentsDefinition {
            void define(DescriptionArguments args);
        }

        /**
        * Stripped description of the product, single line with HTML tags removed.
        */
        public ProductQuery description() {
            return description(args -> {});
        }

        /**
        * Stripped description of the product, single line with HTML tags removed.
        */
        public ProductQuery description(DescriptionArgumentsDefinition argsDef) {
            startField("description");

            DescriptionArguments args = new DescriptionArguments(_queryBuilder);
            argsDef.define(args);
            DescriptionArguments.end(args);

            return this;
        }

        /**
        * The description of the product, complete with HTML formatting.
        */
        public ProductQuery descriptionHtml() {
            startField("descriptionHtml");

            return this;
        }

        /**
        * The featured image for the product.
        * This field is functionally equivalent to `images(first: 1)`.
        */
        public ProductQuery featuredImage(ImageQueryDefinition queryDef) {
            startField("featuredImage");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A human-friendly unique string for the Product automatically generated from its title.
        * They are used by the Liquid templating language to refer to objects.
        */
        public ProductQuery handle() {
            startField("handle");

            return this;
        }

        public class ImagesArguments extends Arguments {
            ImagesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public ImagesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public ImagesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public ImagesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public ImagesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public ImagesArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public ImagesArguments sortKey(ProductImageSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }
        }

        public interface ImagesArgumentsDefinition {
            void define(ImagesArguments args);
        }

        /**
        * List of images associated with the product.
        */
        public ProductQuery images(ImageConnectionQueryDefinition queryDef) {
            return images(args -> {}, queryDef);
        }

        /**
        * List of images associated with the product.
        */
        public ProductQuery images(ImagesArgumentsDefinition argsDef, ImageConnectionQueryDefinition queryDef) {
            startField("images");

            ImagesArguments args = new ImagesArguments(_queryBuilder);
            argsDef.define(args);
            ImagesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ImageConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether the product is a gift card.
        */
        public ProductQuery isGiftCard() {
            startField("isGiftCard");

            return this;
        }

        public class MediaArguments extends Arguments {
            MediaArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public MediaArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public MediaArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public MediaArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public MediaArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public MediaArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public MediaArguments sortKey(ProductMediaSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }
        }

        public interface MediaArgumentsDefinition {
            void define(MediaArguments args);
        }

        /**
        * The media associated with the product.
        */
        public ProductQuery media(MediaConnectionQueryDefinition queryDef) {
            return media(args -> {}, queryDef);
        }

        /**
        * The media associated with the product.
        */
        public ProductQuery media(MediaArgumentsDefinition argsDef, MediaConnectionQueryDefinition queryDef) {
            startField("media");

            MediaArguments args = new MediaArguments(_queryBuilder);
            argsDef.define(args);
            MediaArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new MediaConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public ProductQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public ProductQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public ProductQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */
        public ProductQuery onlineStoreUrl() {
            startField("onlineStoreUrl");

            return this;
        }

        public class OptionsArguments extends Arguments {
            OptionsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Truncate the array result to this size.
            */
            public OptionsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface OptionsArgumentsDefinition {
            void define(OptionsArguments args);
        }

        /**
        * List of product options.
        */
        public ProductQuery options(ProductOptionQueryDefinition queryDef) {
            return options(args -> {}, queryDef);
        }

        /**
        * List of product options.
        */
        public ProductQuery options(OptionsArgumentsDefinition argsDef, ProductOptionQueryDefinition queryDef) {
            startField("options");

            OptionsArguments args = new OptionsArguments(_queryBuilder);
            argsDef.define(args);
            OptionsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ProductOptionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The price range.
        */
        public ProductQuery priceRange(ProductPriceRangeQueryDefinition queryDef) {
            startField("priceRange");

            _queryBuilder.append('{');
            queryDef.define(new ProductPriceRangeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A categorization that a product can be tagged with, commonly used for filtering and searching.
        */
        public ProductQuery productType() {
            startField("productType");

            return this;
        }

        /**
        * The date and time when the product was published to the channel.
        */
        public ProductQuery publishedAt() {
            startField("publishedAt");

            return this;
        }

        /**
        * Whether the product can only be purchased with a selling plan.
        */
        public ProductQuery requiresSellingPlan() {
            startField("requiresSellingPlan");

            return this;
        }

        public class SellingPlanGroupsArguments extends Arguments {
            SellingPlanGroupsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public SellingPlanGroupsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public SellingPlanGroupsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public SellingPlanGroupsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public SellingPlanGroupsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public SellingPlanGroupsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface SellingPlanGroupsArgumentsDefinition {
            void define(SellingPlanGroupsArguments args);
        }

        /**
        * A list of a product's available selling plan groups. A selling plan group represents a selling
        * method. For example, 'Subscribe and save' is a selling method where customers pay for goods or
        * services per delivery. A selling plan group contains individual selling plans.
        */
        public ProductQuery sellingPlanGroups(SellingPlanGroupConnectionQueryDefinition queryDef) {
            return sellingPlanGroups(args -> {}, queryDef);
        }

        /**
        * A list of a product's available selling plan groups. A selling plan group represents a selling
        * method. For example, 'Subscribe and save' is a selling method where customers pay for goods or
        * services per delivery. A selling plan group contains individual selling plans.
        */
        public ProductQuery sellingPlanGroups(SellingPlanGroupsArgumentsDefinition argsDef, SellingPlanGroupConnectionQueryDefinition queryDef) {
            startField("sellingPlanGroups");

            SellingPlanGroupsArguments args = new SellingPlanGroupsArguments(_queryBuilder);
            argsDef.define(args);
            SellingPlanGroupsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanGroupConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The product's SEO information.
        */
        public ProductQuery seo(SEOQueryDefinition queryDef) {
            startField("seo");

            _queryBuilder.append('{');
            queryDef.define(new SEOQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A comma separated list of tags that have been added to the product.
        * Additional access scope required for private apps: unauthenticated_read_product_tags.
        */
        public ProductQuery tags() {
            startField("tags");

            return this;
        }

        /**
        * The product’s title.
        */
        public ProductQuery title() {
            startField("title");

            return this;
        }

        /**
        * The total quantity of inventory in stock for this Product.
        */
        public ProductQuery totalInventory() {
            startField("totalInventory");

            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */
        public ProductQuery trackingParameters() {
            startField("trackingParameters");

            return this;
        }

        /**
        * The date and time when the product was last modified.
        * A product's `updatedAt` value can change for different reasons. For example, if an order
        * is placed for a product that has inventory tracking set up, then the inventory adjustment
        * is counted as an update.
        */
        public ProductQuery updatedAt() {
            startField("updatedAt");

            return this;
        }

        public class VariantBySelectedOptionsArguments extends Arguments {
            VariantBySelectedOptionsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * Whether to ignore unknown product options.
            */
            public VariantBySelectedOptionsArguments ignoreUnknownOptions(Boolean value) {
                if (value != null) {
                    startArgument("ignoreUnknownOptions");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Whether to perform case insensitive match on option names and values.
            */
            public VariantBySelectedOptionsArguments caseInsensitiveMatch(Boolean value) {
                if (value != null) {
                    startArgument("caseInsensitiveMatch");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface VariantBySelectedOptionsArgumentsDefinition {
            void define(VariantBySelectedOptionsArguments args);
        }

        /**
        * Find a product’s variant based on its selected options.
        * This is useful for converting a user’s selection of product options into a single matching variant.
        * If there is not a variant for the selected options, `null` will be returned.
        */
        public ProductQuery variantBySelectedOptions(List<SelectedOptionInput> selectedOptions, ProductVariantQueryDefinition queryDef) {
            return variantBySelectedOptions(selectedOptions, args -> {}, queryDef);
        }

        /**
        * Find a product’s variant based on its selected options.
        * This is useful for converting a user’s selection of product options into a single matching variant.
        * If there is not a variant for the selected options, `null` will be returned.
        */
        public ProductQuery variantBySelectedOptions(List<SelectedOptionInput> selectedOptions, VariantBySelectedOptionsArgumentsDefinition argsDef, ProductVariantQueryDefinition queryDef) {
            startField("variantBySelectedOptions");

            _queryBuilder.append("(selectedOptions:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (SelectedOptionInput item1 : selectedOptions) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            argsDef.define(new VariantBySelectedOptionsArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class VariantsArguments extends Arguments {
            VariantsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public VariantsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public VariantsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public VariantsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public VariantsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public VariantsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public VariantsArguments sortKey(ProductVariantSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }
        }

        public interface VariantsArgumentsDefinition {
            void define(VariantsArguments args);
        }

        /**
        * List of the product’s variants.
        */
        public ProductQuery variants(ProductVariantConnectionQueryDefinition queryDef) {
            return variants(args -> {}, queryDef);
        }

        /**
        * List of the product’s variants.
        */
        public ProductQuery variants(VariantsArgumentsDefinition argsDef, ProductVariantConnectionQueryDefinition queryDef) {
            startField("variants");

            VariantsArguments args = new VariantsArguments(_queryBuilder);
            argsDef.define(args);
            VariantsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The product’s vendor name.
        */
        public ProductQuery vendor() {
            startField("vendor");

            return this;
        }
    }

    /**
    * A product represents an individual item for sale in a Shopify store. Products are often physical,
    * but they don't have to be.
    * For example, a digital download (such as a movie, music or ebook file) also
    * qualifies as a product, as do services (such as equipment rental, work for hire,
    * customization of another product or an extended warranty).
    */
    public static class Product extends AbstractResponse<Product> implements HasMetafields, MenuItemResource, MetafieldParentResource, MetafieldReference, Node, OnlineStorePublishable, SearchResultItem, Trackable {
        public Product() {
        }

        public Product(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "availableForSale": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "collections": {
                        responseData.put(key, new CollectionConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "compareAtPriceRange": {
                        responseData.put(key, new ProductPriceRange(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "createdAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "description": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "descriptionHtml": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "featuredImage": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "images": {
                        responseData.put(key, new ImageConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "isGiftCard": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "media": {
                        responseData.put(key, new MediaConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "onlineStoreUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "options": {
                        List<ProductOption> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ProductOption(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "priceRange": {
                        responseData.put(key, new ProductPriceRange(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "productType": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "publishedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "requiresSellingPlan": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "sellingPlanGroups": {
                        responseData.put(key, new SellingPlanGroupConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "seo": {
                        responseData.put(key, new SEO(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "tags": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "totalInventory": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "trackingParameters": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "updatedAt": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "variantBySelectedOptions": {
                        ProductVariant optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ProductVariant(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variants": {
                        responseData.put(key, new ProductVariantConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "vendor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Product(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Product";
        }

        /**
        * Indicates if at least one product variant is available for sale.
        */

        public Boolean getAvailableForSale() {
            return (Boolean) get("availableForSale");
        }

        public Product setAvailableForSale(Boolean arg) {
            optimisticData.put(getKey("availableForSale"), arg);
            return this;
        }

        /**
        * List of collections a product belongs to.
        */

        public CollectionConnection getCollections() {
            return (CollectionConnection) get("collections");
        }

        public Product setCollections(CollectionConnection arg) {
            optimisticData.put(getKey("collections"), arg);
            return this;
        }

        /**
        * The compare at price of the product across all variants.
        */

        public ProductPriceRange getCompareAtPriceRange() {
            return (ProductPriceRange) get("compareAtPriceRange");
        }

        public Product setCompareAtPriceRange(ProductPriceRange arg) {
            optimisticData.put(getKey("compareAtPriceRange"), arg);
            return this;
        }

        /**
        * The date and time when the product was created.
        */

        public DateTime getCreatedAt() {
            return (DateTime) get("createdAt");
        }

        public Product setCreatedAt(DateTime arg) {
            optimisticData.put(getKey("createdAt"), arg);
            return this;
        }

        /**
        * Stripped description of the product, single line with HTML tags removed.
        */

        public String getDescription() {
            return (String) get("description");
        }

        public Product setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * The description of the product, complete with HTML formatting.
        */

        public String getDescriptionHtml() {
            return (String) get("descriptionHtml");
        }

        public Product setDescriptionHtml(String arg) {
            optimisticData.put(getKey("descriptionHtml"), arg);
            return this;
        }

        /**
        * The featured image for the product.
        * This field is functionally equivalent to `images(first: 1)`.
        */

        public Image getFeaturedImage() {
            return (Image) get("featuredImage");
        }

        public Product setFeaturedImage(Image arg) {
            optimisticData.put(getKey("featuredImage"), arg);
            return this;
        }

        /**
        * A human-friendly unique string for the Product automatically generated from its title.
        * They are used by the Liquid templating language to refer to objects.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public Product setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * List of images associated with the product.
        */

        public ImageConnection getImages() {
            return (ImageConnection) get("images");
        }

        public Product setImages(ImageConnection arg) {
            optimisticData.put(getKey("images"), arg);
            return this;
        }

        /**
        * Whether the product is a gift card.
        */

        public Boolean getIsGiftCard() {
            return (Boolean) get("isGiftCard");
        }

        public Product setIsGiftCard(Boolean arg) {
            optimisticData.put(getKey("isGiftCard"), arg);
            return this;
        }

        /**
        * The media associated with the product.
        */

        public MediaConnection getMedia() {
            return (MediaConnection) get("media");
        }

        public Product setMedia(MediaConnection arg) {
            optimisticData.put(getKey("media"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Product setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Product setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is
        * currently not published to the Online Store sales channel.
        */

        public String getOnlineStoreUrl() {
            return (String) get("onlineStoreUrl");
        }

        public Product setOnlineStoreUrl(String arg) {
            optimisticData.put(getKey("onlineStoreUrl"), arg);
            return this;
        }

        /**
        * List of product options.
        */

        public List<ProductOption> getOptions() {
            return (List<ProductOption>) get("options");
        }

        public Product setOptions(List<ProductOption> arg) {
            optimisticData.put(getKey("options"), arg);
            return this;
        }

        /**
        * The price range.
        */

        public ProductPriceRange getPriceRange() {
            return (ProductPriceRange) get("priceRange");
        }

        public Product setPriceRange(ProductPriceRange arg) {
            optimisticData.put(getKey("priceRange"), arg);
            return this;
        }

        /**
        * A categorization that a product can be tagged with, commonly used for filtering and searching.
        */

        public String getProductType() {
            return (String) get("productType");
        }

        public Product setProductType(String arg) {
            optimisticData.put(getKey("productType"), arg);
            return this;
        }

        /**
        * The date and time when the product was published to the channel.
        */

        public DateTime getPublishedAt() {
            return (DateTime) get("publishedAt");
        }

        public Product setPublishedAt(DateTime arg) {
            optimisticData.put(getKey("publishedAt"), arg);
            return this;
        }

        /**
        * Whether the product can only be purchased with a selling plan.
        */

        public Boolean getRequiresSellingPlan() {
            return (Boolean) get("requiresSellingPlan");
        }

        public Product setRequiresSellingPlan(Boolean arg) {
            optimisticData.put(getKey("requiresSellingPlan"), arg);
            return this;
        }

        /**
        * A list of a product's available selling plan groups. A selling plan group represents a selling
        * method. For example, 'Subscribe and save' is a selling method where customers pay for goods or
        * services per delivery. A selling plan group contains individual selling plans.
        */

        public SellingPlanGroupConnection getSellingPlanGroups() {
            return (SellingPlanGroupConnection) get("sellingPlanGroups");
        }

        public Product setSellingPlanGroups(SellingPlanGroupConnection arg) {
            optimisticData.put(getKey("sellingPlanGroups"), arg);
            return this;
        }

        /**
        * The product's SEO information.
        */

        public SEO getSeo() {
            return (SEO) get("seo");
        }

        public Product setSeo(SEO arg) {
            optimisticData.put(getKey("seo"), arg);
            return this;
        }

        /**
        * A comma separated list of tags that have been added to the product.
        * Additional access scope required for private apps: unauthenticated_read_product_tags.
        */

        public List<String> getTags() {
            return (List<String>) get("tags");
        }

        public Product setTags(List<String> arg) {
            optimisticData.put(getKey("tags"), arg);
            return this;
        }

        /**
        * The product’s title.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public Product setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * The total quantity of inventory in stock for this Product.
        */

        public Integer getTotalInventory() {
            return (Integer) get("totalInventory");
        }

        public Product setTotalInventory(Integer arg) {
            optimisticData.put(getKey("totalInventory"), arg);
            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */

        public String getTrackingParameters() {
            return (String) get("trackingParameters");
        }

        public Product setTrackingParameters(String arg) {
            optimisticData.put(getKey("trackingParameters"), arg);
            return this;
        }

        /**
        * The date and time when the product was last modified.
        * A product's `updatedAt` value can change for different reasons. For example, if an order
        * is placed for a product that has inventory tracking set up, then the inventory adjustment
        * is counted as an update.
        */

        public DateTime getUpdatedAt() {
            return (DateTime) get("updatedAt");
        }

        public Product setUpdatedAt(DateTime arg) {
            optimisticData.put(getKey("updatedAt"), arg);
            return this;
        }

        /**
        * Find a product’s variant based on its selected options.
        * This is useful for converting a user’s selection of product options into a single matching variant.
        * If there is not a variant for the selected options, `null` will be returned.
        */

        public ProductVariant getVariantBySelectedOptions() {
            return (ProductVariant) get("variantBySelectedOptions");
        }

        public Product setVariantBySelectedOptions(ProductVariant arg) {
            optimisticData.put(getKey("variantBySelectedOptions"), arg);
            return this;
        }

        /**
        * List of the product’s variants.
        */

        public ProductVariantConnection getVariants() {
            return (ProductVariantConnection) get("variants");
        }

        public Product setVariants(ProductVariantConnection arg) {
            optimisticData.put(getKey("variants"), arg);
            return this;
        }

        /**
        * The product’s vendor name.
        */

        public String getVendor() {
            return (String) get("vendor");
        }

        public Product setVendor(String arg) {
            optimisticData.put(getKey("vendor"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "availableForSale": return false;

                case "collections": return true;

                case "compareAtPriceRange": return true;

                case "createdAt": return false;

                case "description": return false;

                case "descriptionHtml": return false;

                case "featuredImage": return true;

                case "handle": return false;

                case "id": return false;

                case "images": return true;

                case "isGiftCard": return false;

                case "media": return true;

                case "metafield": return true;

                case "metafields": return true;

                case "onlineStoreUrl": return false;

                case "options": return true;

                case "priceRange": return true;

                case "productType": return false;

                case "publishedAt": return false;

                case "requiresSellingPlan": return false;

                case "sellingPlanGroups": return true;

                case "seo": return true;

                case "tags": return false;

                case "title": return false;

                case "totalInventory": return false;

                case "trackingParameters": return false;

                case "updatedAt": return false;

                case "variantBySelectedOptions": return true;

                case "variants": return true;

                case "vendor": return false;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the ProductCollection query.
    */
    public enum ProductCollectionSortKeys {
        /**
        * Sort by the `best-selling` value.
        */
        BEST_SELLING,

        /**
        * Sort by the `collection-default` value.
        */
        COLLECTION_DEFAULT,

        /**
        * Sort by the `created` value.
        */
        CREATED,

        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by the `manual` value.
        */
        MANUAL,

        /**
        * Sort by the `price` value.
        */
        PRICE,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        /**
        * Sort by the `title` value.
        */
        TITLE,

        UNKNOWN_VALUE;

        public static ProductCollectionSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "BEST_SELLING": {
                    return BEST_SELLING;
                }

                case "COLLECTION_DEFAULT": {
                    return COLLECTION_DEFAULT;
                }

                case "CREATED": {
                    return CREATED;
                }

                case "ID": {
                    return ID;
                }

                case "MANUAL": {
                    return MANUAL;
                }

                case "PRICE": {
                    return PRICE;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                case "TITLE": {
                    return TITLE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case BEST_SELLING: {
                    return "BEST_SELLING";
                }

                case COLLECTION_DEFAULT: {
                    return "COLLECTION_DEFAULT";
                }

                case CREATED: {
                    return "CREATED";
                }

                case ID: {
                    return "ID";
                }

                case MANUAL: {
                    return "MANUAL";
                }

                case PRICE: {
                    return "PRICE";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                case TITLE: {
                    return "TITLE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface ProductConnectionQueryDefinition {
        void define(ProductConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple Products.
    */
    public static class ProductConnectionQuery extends Query<ProductConnectionQuery> {
        ProductConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public ProductConnectionQuery edges(ProductEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new ProductEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of available filters.
        */
        public ProductConnectionQuery filters(FilterQueryDefinition queryDef) {
            startField("filters");

            _queryBuilder.append('{');
            queryDef.define(new FilterQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in ProductEdge.
        */
        public ProductConnectionQuery nodes(ProductQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public ProductConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple Products.
    */
    public static class ProductConnection extends AbstractResponse<ProductConnection> {
        public ProductConnection() {
        }

        public ProductConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<ProductEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ProductEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "filters": {
                        List<Filter> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Filter(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<Product> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Product(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductConnection";
        }

        /**
        * A list of edges.
        */

        public List<ProductEdge> getEdges() {
            return (List<ProductEdge>) get("edges");
        }

        public ProductConnection setEdges(List<ProductEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of available filters.
        */

        public List<Filter> getFilters() {
            return (List<Filter>) get("filters");
        }

        public ProductConnection setFilters(List<Filter> arg) {
            optimisticData.put(getKey("filters"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in ProductEdge.
        */

        public List<Product> getNodes() {
            return (List<Product>) get("nodes");
        }

        public ProductConnection setNodes(List<Product> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public ProductConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "filters": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface ProductEdgeQueryDefinition {
        void define(ProductEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one Product and a cursor during pagination.
    */
    public static class ProductEdgeQuery extends Query<ProductEdgeQuery> {
        ProductEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public ProductEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of ProductEdge.
        */
        public ProductEdgeQuery node(ProductQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one Product and a cursor during pagination.
    */
    public static class ProductEdge extends AbstractResponse<ProductEdge> {
        public ProductEdge() {
        }

        public ProductEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new Product(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public ProductEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of ProductEdge.
        */

        public Product getNode() {
            return (Product) get("node");
        }

        public ProductEdge setNode(Product arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public static class ProductFilter implements Serializable {
        private Input<Boolean> available = Input.undefined();

        private Input<VariantOptionFilter> variantOption = Input.undefined();

        private Input<String> productType = Input.undefined();

        private Input<String> productVendor = Input.undefined();

        private Input<PriceRangeFilter> price = Input.undefined();

        private Input<MetafieldFilter> productMetafield = Input.undefined();

        private Input<MetafieldFilter> variantMetafield = Input.undefined();

        private Input<String> tag = Input.undefined();

        public Boolean getAvailable() {
            return available.getValue();
        }

        public Input<Boolean> getAvailableInput() {
            return available;
        }

        public ProductFilter setAvailable(Boolean available) {
            this.available = Input.optional(available);
            return this;
        }

        public ProductFilter setAvailableInput(Input<Boolean> available) {
            if (available == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.available = available;
            return this;
        }

        public VariantOptionFilter getVariantOption() {
            return variantOption.getValue();
        }

        public Input<VariantOptionFilter> getVariantOptionInput() {
            return variantOption;
        }

        public ProductFilter setVariantOption(VariantOptionFilter variantOption) {
            this.variantOption = Input.optional(variantOption);
            return this;
        }

        public ProductFilter setVariantOptionInput(Input<VariantOptionFilter> variantOption) {
            if (variantOption == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.variantOption = variantOption;
            return this;
        }

        public String getProductType() {
            return productType.getValue();
        }

        public Input<String> getProductTypeInput() {
            return productType;
        }

        public ProductFilter setProductType(String productType) {
            this.productType = Input.optional(productType);
            return this;
        }

        public ProductFilter setProductTypeInput(Input<String> productType) {
            if (productType == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.productType = productType;
            return this;
        }

        public String getProductVendor() {
            return productVendor.getValue();
        }

        public Input<String> getProductVendorInput() {
            return productVendor;
        }

        public ProductFilter setProductVendor(String productVendor) {
            this.productVendor = Input.optional(productVendor);
            return this;
        }

        public ProductFilter setProductVendorInput(Input<String> productVendor) {
            if (productVendor == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.productVendor = productVendor;
            return this;
        }

        public PriceRangeFilter getPrice() {
            return price.getValue();
        }

        public Input<PriceRangeFilter> getPriceInput() {
            return price;
        }

        public ProductFilter setPrice(PriceRangeFilter price) {
            this.price = Input.optional(price);
            return this;
        }

        public ProductFilter setPriceInput(Input<PriceRangeFilter> price) {
            if (price == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.price = price;
            return this;
        }

        public MetafieldFilter getProductMetafield() {
            return productMetafield.getValue();
        }

        public Input<MetafieldFilter> getProductMetafieldInput() {
            return productMetafield;
        }

        public ProductFilter setProductMetafield(MetafieldFilter productMetafield) {
            this.productMetafield = Input.optional(productMetafield);
            return this;
        }

        public ProductFilter setProductMetafieldInput(Input<MetafieldFilter> productMetafield) {
            if (productMetafield == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.productMetafield = productMetafield;
            return this;
        }

        public MetafieldFilter getVariantMetafield() {
            return variantMetafield.getValue();
        }

        public Input<MetafieldFilter> getVariantMetafieldInput() {
            return variantMetafield;
        }

        public ProductFilter setVariantMetafield(MetafieldFilter variantMetafield) {
            this.variantMetafield = Input.optional(variantMetafield);
            return this;
        }

        public ProductFilter setVariantMetafieldInput(Input<MetafieldFilter> variantMetafield) {
            if (variantMetafield == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.variantMetafield = variantMetafield;
            return this;
        }

        public String getTag() {
            return tag.getValue();
        }

        public Input<String> getTagInput() {
            return tag;
        }

        public ProductFilter setTag(String tag) {
            this.tag = Input.optional(tag);
            return this;
        }

        public ProductFilter setTagInput(Input<String> tag) {
            if (tag == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.tag = tag;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.available.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("available:");
                if (available.getValue() != null) {
                    _queryBuilder.append(available.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.variantOption.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variantOption:");
                if (variantOption.getValue() != null) {
                    variantOption.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.productType.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("productType:");
                if (productType.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, productType.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.productVendor.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("productVendor:");
                if (productVendor.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, productVendor.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.price.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("price:");
                if (price.getValue() != null) {
                    price.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.productMetafield.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("productMetafield:");
                if (productMetafield.getValue() != null) {
                    productMetafield.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.variantMetafield.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variantMetafield:");
                if (variantMetafield.getValue() != null) {
                    variantMetafield.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.tag.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("tag:");
                if (tag.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, tag.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * The set of valid sort keys for the ProductImage query.
    */
    public enum ProductImageSortKeys {
        /**
        * Sort by the `created_at` value.
        */
        CREATED_AT,

        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by the `position` value.
        */
        POSITION,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        UNKNOWN_VALUE;

        public static ProductImageSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "CREATED_AT": {
                    return CREATED_AT;
                }

                case "ID": {
                    return ID;
                }

                case "POSITION": {
                    return POSITION;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CREATED_AT: {
                    return "CREATED_AT";
                }

                case ID: {
                    return "ID";
                }

                case POSITION: {
                    return "POSITION";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * The set of valid sort keys for the ProductMedia query.
    */
    public enum ProductMediaSortKeys {
        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by the `position` value.
        */
        POSITION,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        UNKNOWN_VALUE;

        public static ProductMediaSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ID": {
                    return ID;
                }

                case "POSITION": {
                    return POSITION;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ID: {
                    return "ID";
                }

                case POSITION: {
                    return "POSITION";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface ProductOptionQueryDefinition {
        void define(ProductOptionQuery _queryBuilder);
    }

    /**
    * Product property names like "Size", "Color", and "Material" that the customers can select.
    * Variants are selected based on permutations of these options.
    * 255 characters limit each.
    */
    public static class ProductOptionQuery extends Query<ProductOptionQuery> {
        ProductOptionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The product option’s name.
        */
        public ProductOptionQuery name() {
            startField("name");

            return this;
        }

        /**
        * The corresponding option value to the product option.
        */
        public ProductOptionQuery optionValues(ProductOptionValueQueryDefinition queryDef) {
            startField("optionValues");

            _queryBuilder.append('{');
            queryDef.define(new ProductOptionValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The corresponding value to the product option name.
        *
        * @deprecated Use `optionValues` instead.
        */
        @Deprecated
        public ProductOptionQuery values() {
            startField("values");

            return this;
        }
    }

    /**
    * Product property names like "Size", "Color", and "Material" that the customers can select.
    * Variants are selected based on permutations of these options.
    * 255 characters limit each.
    */
    public static class ProductOption extends AbstractResponse<ProductOption> implements Node {
        public ProductOption() {
        }

        public ProductOption(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "optionValues": {
                        List<ProductOptionValue> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ProductOptionValue(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "values": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public ProductOption(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "ProductOption";
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The product option’s name.
        */

        public String getName() {
            return (String) get("name");
        }

        public ProductOption setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The corresponding option value to the product option.
        */

        public List<ProductOptionValue> getOptionValues() {
            return (List<ProductOptionValue>) get("optionValues");
        }

        public ProductOption setOptionValues(List<ProductOptionValue> arg) {
            optimisticData.put(getKey("optionValues"), arg);
            return this;
        }

        /**
        * The corresponding value to the product option name.
        *
        * @deprecated Use `optionValues` instead.
        */

        public List<String> getValues() {
            return (List<String>) get("values");
        }

        public ProductOption setValues(List<String> arg) {
            optimisticData.put(getKey("values"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "id": return false;

                case "name": return false;

                case "optionValues": return true;

                case "values": return false;

                default: return false;
            }
        }
    }

    public interface ProductOptionValueQueryDefinition {
        void define(ProductOptionValueQuery _queryBuilder);
    }

    /**
    * The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option.
    */
    public static class ProductOptionValueQuery extends Query<ProductOptionValueQuery> {
        ProductOptionValueQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The name of the product option value.
        */
        public ProductOptionValueQuery name() {
            startField("name");

            return this;
        }

        /**
        * The swatch of the product option value.
        */
        public ProductOptionValueQuery swatch(ProductOptionValueSwatchQueryDefinition queryDef) {
            startField("swatch");

            _queryBuilder.append('{');
            queryDef.define(new ProductOptionValueSwatchQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option.
    */
    public static class ProductOptionValue extends AbstractResponse<ProductOptionValue> implements Node {
        public ProductOptionValue() {
        }

        public ProductOptionValue(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "swatch": {
                        ProductOptionValueSwatch optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ProductOptionValueSwatch(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public ProductOptionValue(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "ProductOptionValue";
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The name of the product option value.
        */

        public String getName() {
            return (String) get("name");
        }

        public ProductOptionValue setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The swatch of the product option value.
        */

        public ProductOptionValueSwatch getSwatch() {
            return (ProductOptionValueSwatch) get("swatch");
        }

        public ProductOptionValue setSwatch(ProductOptionValueSwatch arg) {
            optimisticData.put(getKey("swatch"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "id": return false;

                case "name": return false;

                case "swatch": return true;

                default: return false;
            }
        }
    }

    public interface ProductOptionValueSwatchQueryDefinition {
        void define(ProductOptionValueSwatchQuery _queryBuilder);
    }

    /**
    * The product option value swatch.
    */
    public static class ProductOptionValueSwatchQuery extends Query<ProductOptionValueSwatchQuery> {
        ProductOptionValueSwatchQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The swatch color.
        */
        public ProductOptionValueSwatchQuery color() {
            startField("color");

            return this;
        }

        /**
        * The swatch image.
        */
        public ProductOptionValueSwatchQuery image(MediaQueryDefinition queryDef) {
            startField("image");

            _queryBuilder.append('{');
            queryDef.define(new MediaQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The product option value swatch.
    */
    public static class ProductOptionValueSwatch extends AbstractResponse<ProductOptionValueSwatch> {
        public ProductOptionValueSwatch() {
        }

        public ProductOptionValueSwatch(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "color": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "image": {
                        Media optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownMedia.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductOptionValueSwatch";
        }

        /**
        * The swatch color.
        */

        public String getColor() {
            return (String) get("color");
        }

        public ProductOptionValueSwatch setColor(String arg) {
            optimisticData.put(getKey("color"), arg);
            return this;
        }

        /**
        * The swatch image.
        */

        public Media getImage() {
            return (Media) get("image");
        }

        public ProductOptionValueSwatch setImage(Media arg) {
            optimisticData.put(getKey("image"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "color": return false;

                case "image": return false;

                default: return false;
            }
        }
    }

    public interface ProductPriceRangeQueryDefinition {
        void define(ProductPriceRangeQuery _queryBuilder);
    }

    /**
    * The price range of the product.
    */
    public static class ProductPriceRangeQuery extends Query<ProductPriceRangeQuery> {
        ProductPriceRangeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The highest variant's price.
        */
        public ProductPriceRangeQuery maxVariantPrice(MoneyV2QueryDefinition queryDef) {
            startField("maxVariantPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The lowest variant's price.
        */
        public ProductPriceRangeQuery minVariantPrice(MoneyV2QueryDefinition queryDef) {
            startField("minVariantPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The price range of the product.
    */
    public static class ProductPriceRange extends AbstractResponse<ProductPriceRange> {
        public ProductPriceRange() {
        }

        public ProductPriceRange(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "maxVariantPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "minVariantPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductPriceRange";
        }

        /**
        * The highest variant's price.
        */

        public MoneyV2 getMaxVariantPrice() {
            return (MoneyV2) get("maxVariantPrice");
        }

        public ProductPriceRange setMaxVariantPrice(MoneyV2 arg) {
            optimisticData.put(getKey("maxVariantPrice"), arg);
            return this;
        }

        /**
        * The lowest variant's price.
        */

        public MoneyV2 getMinVariantPrice() {
            return (MoneyV2) get("minVariantPrice");
        }

        public ProductPriceRange setMinVariantPrice(MoneyV2 arg) {
            optimisticData.put(getKey("minVariantPrice"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "maxVariantPrice": return true;

                case "minVariantPrice": return true;

                default: return false;
            }
        }
    }

    /**
    * The recommendation intent that is used to generate product recommendations.
    * You can use intent to generate product recommendations according to different strategies.
    */
    public enum ProductRecommendationIntent {
        /**
        * Offer customers products that are complementary to a product for which recommendations are to be
        * fetched. An example is add-on products that display in a Pair it with section.
        */
        COMPLEMENTARY,

        /**
        * Offer customers a mix of products that are similar or complementary to a product for which
        * recommendations are to be fetched. An example is substitutable products that display in a You may
        * also like section.
        */
        RELATED,

        UNKNOWN_VALUE;

        public static ProductRecommendationIntent fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "COMPLEMENTARY": {
                    return COMPLEMENTARY;
                }

                case "RELATED": {
                    return RELATED;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case COMPLEMENTARY: {
                    return "COMPLEMENTARY";
                }

                case RELATED: {
                    return "RELATED";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * The set of valid sort keys for the Product query.
    */
    public enum ProductSortKeys {
        /**
        * Sort by the `best_selling` value.
        */
        BEST_SELLING,

        /**
        * Sort by the `created_at` value.
        */
        CREATED_AT,

        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by the `price` value.
        */
        PRICE,

        /**
        * Sort by the `product_type` value.
        */
        PRODUCT_TYPE,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        /**
        * Sort by the `title` value.
        */
        TITLE,

        /**
        * Sort by the `updated_at` value.
        */
        UPDATED_AT,

        /**
        * Sort by the `vendor` value.
        */
        VENDOR,

        UNKNOWN_VALUE;

        public static ProductSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "BEST_SELLING": {
                    return BEST_SELLING;
                }

                case "CREATED_AT": {
                    return CREATED_AT;
                }

                case "ID": {
                    return ID;
                }

                case "PRICE": {
                    return PRICE;
                }

                case "PRODUCT_TYPE": {
                    return PRODUCT_TYPE;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                case "TITLE": {
                    return TITLE;
                }

                case "UPDATED_AT": {
                    return UPDATED_AT;
                }

                case "VENDOR": {
                    return VENDOR;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case BEST_SELLING: {
                    return "BEST_SELLING";
                }

                case CREATED_AT: {
                    return "CREATED_AT";
                }

                case ID: {
                    return "ID";
                }

                case PRICE: {
                    return "PRICE";
                }

                case PRODUCT_TYPE: {
                    return "PRODUCT_TYPE";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                case TITLE: {
                    return "TITLE";
                }

                case UPDATED_AT: {
                    return "UPDATED_AT";
                }

                case VENDOR: {
                    return "VENDOR";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface ProductVariantQueryDefinition {
        void define(ProductVariantQuery _queryBuilder);
    }

    /**
    * A product variant represents a different version of a product, such as differing sizes or differing
    * colors.
    */
    public static class ProductVariantQuery extends Query<ProductVariantQuery> {
        ProductVariantQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * Indicates if the product variant is available for sale.
        */
        public ProductVariantQuery availableForSale() {
            startField("availableForSale");

            return this;
        }

        /**
        * The barcode (for example, ISBN, UPC, or GTIN) associated with the variant.
        */
        public ProductVariantQuery barcode() {
            startField("barcode");

            return this;
        }

        /**
        * The compare at price of the variant. This can be used to mark a variant as on sale, when
        * `compareAtPrice` is higher than `price`.
        */
        public ProductVariantQuery compareAtPrice(MoneyV2QueryDefinition queryDef) {
            startField("compareAtPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The compare at price of the variant. This can be used to mark a variant as on sale, when
        * `compareAtPriceV2` is higher than `priceV2`.
        *
        * @deprecated Use `compareAtPrice` instead.
        */
        @Deprecated
        public ProductVariantQuery compareAtPriceV2(MoneyV2QueryDefinition queryDef) {
            startField("compareAtPriceV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ComponentsArguments extends Arguments {
            ComponentsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public ComponentsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public ComponentsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public ComponentsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public ComponentsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface ComponentsArgumentsDefinition {
            void define(ComponentsArguments args);
        }

        /**
        * List of bundles components included in the variant considering only fixed bundles.
        */
        public ProductVariantQuery components(ProductVariantComponentConnectionQueryDefinition queryDef) {
            return components(args -> {}, queryDef);
        }

        /**
        * List of bundles components included in the variant considering only fixed bundles.
        */
        public ProductVariantQuery components(ComponentsArgumentsDefinition argsDef, ProductVariantComponentConnectionQueryDefinition queryDef) {
            startField("components");

            ComponentsArguments args = new ComponentsArguments(_queryBuilder);
            argsDef.define(args);
            ComponentsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantComponentConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether a product is out of stock but still available for purchase (used for backorders).
        */
        public ProductVariantQuery currentlyNotInStock() {
            startField("currentlyNotInStock");

            return this;
        }

        public class GroupedByArguments extends Arguments {
            GroupedByArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public GroupedByArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public GroupedByArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public GroupedByArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public GroupedByArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface GroupedByArgumentsDefinition {
            void define(GroupedByArguments args);
        }

        /**
        * List of bundles that include this variant considering only fixed bundles.
        */
        public ProductVariantQuery groupedBy(ProductVariantConnectionQueryDefinition queryDef) {
            return groupedBy(args -> {}, queryDef);
        }

        /**
        * List of bundles that include this variant considering only fixed bundles.
        */
        public ProductVariantQuery groupedBy(GroupedByArgumentsDefinition argsDef, ProductVariantConnectionQueryDefinition queryDef) {
            startField("groupedBy");

            GroupedByArguments args = new GroupedByArguments(_queryBuilder);
            argsDef.define(args);
            GroupedByArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Image associated with the product variant. This field falls back to the product image if no image is
        * available.
        */
        public ProductVariantQuery image(ImageQueryDefinition queryDef) {
            startField("image");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public ProductVariantQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public ProductVariantQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public ProductVariantQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The product variant’s price.
        */
        public ProductVariantQuery price(MoneyV2QueryDefinition queryDef) {
            startField("price");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The product variant’s price.
        *
        * @deprecated Use `price` instead.
        */
        @Deprecated
        public ProductVariantQuery priceV2(MoneyV2QueryDefinition queryDef) {
            startField("priceV2");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The product object that the product variant belongs to.
        */
        public ProductVariantQuery product(ProductQueryDefinition queryDef) {
            startField("product");

            _queryBuilder.append('{');
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total sellable quantity of the variant for online sales channels.
        */
        public ProductVariantQuery quantityAvailable() {
            startField("quantityAvailable");

            return this;
        }

        public class QuantityPriceBreaksArguments extends Arguments {
            QuantityPriceBreaksArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public QuantityPriceBreaksArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public QuantityPriceBreaksArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public QuantityPriceBreaksArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public QuantityPriceBreaksArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface QuantityPriceBreaksArgumentsDefinition {
            void define(QuantityPriceBreaksArguments args);
        }

        /**
        * A list of quantity breaks for the product variant.
        */
        public ProductVariantQuery quantityPriceBreaks(QuantityPriceBreakConnectionQueryDefinition queryDef) {
            return quantityPriceBreaks(args -> {}, queryDef);
        }

        /**
        * A list of quantity breaks for the product variant.
        */
        public ProductVariantQuery quantityPriceBreaks(QuantityPriceBreaksArgumentsDefinition argsDef, QuantityPriceBreakConnectionQueryDefinition queryDef) {
            startField("quantityPriceBreaks");

            QuantityPriceBreaksArguments args = new QuantityPriceBreaksArguments(_queryBuilder);
            argsDef.define(args);
            QuantityPriceBreaksArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new QuantityPriceBreakConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The quantity rule for the product variant in a given context.
        */
        public ProductVariantQuery quantityRule(QuantityRuleQueryDefinition queryDef) {
            startField("quantityRule");

            _queryBuilder.append('{');
            queryDef.define(new QuantityRuleQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether a product variant requires components. The default value is `false`.
        * If `true`, then the product variant can only be purchased as a parent bundle with components.
        */
        public ProductVariantQuery requiresComponents() {
            startField("requiresComponents");

            return this;
        }

        /**
        * Whether a customer needs to provide a shipping address when placing an order for the product
        * variant.
        */
        public ProductVariantQuery requiresShipping() {
            startField("requiresShipping");

            return this;
        }

        /**
        * List of product options applied to the variant.
        */
        public ProductVariantQuery selectedOptions(SelectedOptionQueryDefinition queryDef) {
            startField("selectedOptions");

            _queryBuilder.append('{');
            queryDef.define(new SelectedOptionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class SellingPlanAllocationsArguments extends Arguments {
            SellingPlanAllocationsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public SellingPlanAllocationsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public SellingPlanAllocationsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public SellingPlanAllocationsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public SellingPlanAllocationsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public SellingPlanAllocationsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface SellingPlanAllocationsArgumentsDefinition {
            void define(SellingPlanAllocationsArguments args);
        }

        /**
        * Represents an association between a variant and a selling plan. Selling plan allocations describe
        * which selling plans are available for each variant, and what their impact is on pricing.
        */
        public ProductVariantQuery sellingPlanAllocations(SellingPlanAllocationConnectionQueryDefinition queryDef) {
            return sellingPlanAllocations(args -> {}, queryDef);
        }

        /**
        * Represents an association between a variant and a selling plan. Selling plan allocations describe
        * which selling plans are available for each variant, and what their impact is on pricing.
        */
        public ProductVariantQuery sellingPlanAllocations(SellingPlanAllocationsArgumentsDefinition argsDef, SellingPlanAllocationConnectionQueryDefinition queryDef) {
            startField("sellingPlanAllocations");

            SellingPlanAllocationsArguments args = new SellingPlanAllocationsArguments(_queryBuilder);
            argsDef.define(args);
            SellingPlanAllocationsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanAllocationConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The SKU (stock keeping unit) associated with the variant.
        */
        public ProductVariantQuery sku() {
            startField("sku");

            return this;
        }

        public class StoreAvailabilityArguments extends Arguments {
            StoreAvailabilityArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Used to sort results based on proximity to the provided location.
            */
            public StoreAvailabilityArguments near(GeoCoordinateInput value) {
                if (value != null) {
                    startArgument("near");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public StoreAvailabilityArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public StoreAvailabilityArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public StoreAvailabilityArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public StoreAvailabilityArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public StoreAvailabilityArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface StoreAvailabilityArgumentsDefinition {
            void define(StoreAvailabilityArguments args);
        }

        /**
        * The in-store pickup availability of this variant by location.
        */
        public ProductVariantQuery storeAvailability(StoreAvailabilityConnectionQueryDefinition queryDef) {
            return storeAvailability(args -> {}, queryDef);
        }

        /**
        * The in-store pickup availability of this variant by location.
        */
        public ProductVariantQuery storeAvailability(StoreAvailabilityArgumentsDefinition argsDef, StoreAvailabilityConnectionQueryDefinition queryDef) {
            startField("storeAvailability");

            StoreAvailabilityArguments args = new StoreAvailabilityArguments(_queryBuilder);
            argsDef.define(args);
            StoreAvailabilityArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new StoreAvailabilityConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether tax is charged when the product variant is sold.
        */
        public ProductVariantQuery taxable() {
            startField("taxable");

            return this;
        }

        /**
        * The product variant’s title.
        */
        public ProductVariantQuery title() {
            startField("title");

            return this;
        }

        /**
        * The unit price value for the variant based on the variant's measurement.
        */
        public ProductVariantQuery unitPrice(MoneyV2QueryDefinition queryDef) {
            startField("unitPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The unit price measurement for the variant.
        */
        public ProductVariantQuery unitPriceMeasurement(UnitPriceMeasurementQueryDefinition queryDef) {
            startField("unitPriceMeasurement");

            _queryBuilder.append('{');
            queryDef.define(new UnitPriceMeasurementQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The weight of the product variant in the unit system specified with `weight_unit`.
        */
        public ProductVariantQuery weight() {
            startField("weight");

            return this;
        }

        /**
        * Unit of measurement for weight.
        */
        public ProductVariantQuery weightUnit() {
            startField("weightUnit");

            return this;
        }
    }

    /**
    * A product variant represents a different version of a product, such as differing sizes or differing
    * colors.
    */
    public static class ProductVariant extends AbstractResponse<ProductVariant> implements HasMetafields, Merchandise, MetafieldParentResource, MetafieldReference, Node {
        public ProductVariant() {
        }

        public ProductVariant(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "availableForSale": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "barcode": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "compareAtPrice": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "compareAtPriceV2": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "components": {
                        responseData.put(key, new ProductVariantComponentConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "currentlyNotInStock": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "groupedBy": {
                        responseData.put(key, new ProductVariantConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "image": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "price": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "priceV2": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "product": {
                        responseData.put(key, new Product(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "quantityAvailable": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantityPriceBreaks": {
                        responseData.put(key, new QuantityPriceBreakConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "quantityRule": {
                        responseData.put(key, new QuantityRule(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "requiresComponents": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "requiresShipping": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "selectedOptions": {
                        List<SelectedOption> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SelectedOption(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "sellingPlanAllocations": {
                        responseData.put(key, new SellingPlanAllocationConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "sku": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "storeAvailability": {
                        responseData.put(key, new StoreAvailabilityConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "taxable": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "unitPrice": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unitPriceMeasurement": {
                        UnitPriceMeasurement optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new UnitPriceMeasurement(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "weight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "weightUnit": {
                        responseData.put(key, WeightUnit.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public ProductVariant(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "ProductVariant";
        }

        /**
        * Indicates if the product variant is available for sale.
        */

        public Boolean getAvailableForSale() {
            return (Boolean) get("availableForSale");
        }

        public ProductVariant setAvailableForSale(Boolean arg) {
            optimisticData.put(getKey("availableForSale"), arg);
            return this;
        }

        /**
        * The barcode (for example, ISBN, UPC, or GTIN) associated with the variant.
        */

        public String getBarcode() {
            return (String) get("barcode");
        }

        public ProductVariant setBarcode(String arg) {
            optimisticData.put(getKey("barcode"), arg);
            return this;
        }

        /**
        * The compare at price of the variant. This can be used to mark a variant as on sale, when
        * `compareAtPrice` is higher than `price`.
        */

        public MoneyV2 getCompareAtPrice() {
            return (MoneyV2) get("compareAtPrice");
        }

        public ProductVariant setCompareAtPrice(MoneyV2 arg) {
            optimisticData.put(getKey("compareAtPrice"), arg);
            return this;
        }

        /**
        * The compare at price of the variant. This can be used to mark a variant as on sale, when
        * `compareAtPriceV2` is higher than `priceV2`.
        *
        * @deprecated Use `compareAtPrice` instead.
        */

        public MoneyV2 getCompareAtPriceV2() {
            return (MoneyV2) get("compareAtPriceV2");
        }

        public ProductVariant setCompareAtPriceV2(MoneyV2 arg) {
            optimisticData.put(getKey("compareAtPriceV2"), arg);
            return this;
        }

        /**
        * List of bundles components included in the variant considering only fixed bundles.
        */

        public ProductVariantComponentConnection getComponents() {
            return (ProductVariantComponentConnection) get("components");
        }

        public ProductVariant setComponents(ProductVariantComponentConnection arg) {
            optimisticData.put(getKey("components"), arg);
            return this;
        }

        /**
        * Whether a product is out of stock but still available for purchase (used for backorders).
        */

        public Boolean getCurrentlyNotInStock() {
            return (Boolean) get("currentlyNotInStock");
        }

        public ProductVariant setCurrentlyNotInStock(Boolean arg) {
            optimisticData.put(getKey("currentlyNotInStock"), arg);
            return this;
        }

        /**
        * List of bundles that include this variant considering only fixed bundles.
        */

        public ProductVariantConnection getGroupedBy() {
            return (ProductVariantConnection) get("groupedBy");
        }

        public ProductVariant setGroupedBy(ProductVariantConnection arg) {
            optimisticData.put(getKey("groupedBy"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Image associated with the product variant. This field falls back to the product image if no image is
        * available.
        */

        public Image getImage() {
            return (Image) get("image");
        }

        public ProductVariant setImage(Image arg) {
            optimisticData.put(getKey("image"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public ProductVariant setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public ProductVariant setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The product variant’s price.
        */

        public MoneyV2 getPrice() {
            return (MoneyV2) get("price");
        }

        public ProductVariant setPrice(MoneyV2 arg) {
            optimisticData.put(getKey("price"), arg);
            return this;
        }

        /**
        * The product variant’s price.
        *
        * @deprecated Use `price` instead.
        */

        public MoneyV2 getPriceV2() {
            return (MoneyV2) get("priceV2");
        }

        public ProductVariant setPriceV2(MoneyV2 arg) {
            optimisticData.put(getKey("priceV2"), arg);
            return this;
        }

        /**
        * The product object that the product variant belongs to.
        */

        public Product getProduct() {
            return (Product) get("product");
        }

        public ProductVariant setProduct(Product arg) {
            optimisticData.put(getKey("product"), arg);
            return this;
        }

        /**
        * The total sellable quantity of the variant for online sales channels.
        */

        public Integer getQuantityAvailable() {
            return (Integer) get("quantityAvailable");
        }

        public ProductVariant setQuantityAvailable(Integer arg) {
            optimisticData.put(getKey("quantityAvailable"), arg);
            return this;
        }

        /**
        * A list of quantity breaks for the product variant.
        */

        public QuantityPriceBreakConnection getQuantityPriceBreaks() {
            return (QuantityPriceBreakConnection) get("quantityPriceBreaks");
        }

        public ProductVariant setQuantityPriceBreaks(QuantityPriceBreakConnection arg) {
            optimisticData.put(getKey("quantityPriceBreaks"), arg);
            return this;
        }

        /**
        * The quantity rule for the product variant in a given context.
        */

        public QuantityRule getQuantityRule() {
            return (QuantityRule) get("quantityRule");
        }

        public ProductVariant setQuantityRule(QuantityRule arg) {
            optimisticData.put(getKey("quantityRule"), arg);
            return this;
        }

        /**
        * Whether a product variant requires components. The default value is `false`.
        * If `true`, then the product variant can only be purchased as a parent bundle with components.
        */

        public Boolean getRequiresComponents() {
            return (Boolean) get("requiresComponents");
        }

        public ProductVariant setRequiresComponents(Boolean arg) {
            optimisticData.put(getKey("requiresComponents"), arg);
            return this;
        }

        /**
        * Whether a customer needs to provide a shipping address when placing an order for the product
        * variant.
        */

        public Boolean getRequiresShipping() {
            return (Boolean) get("requiresShipping");
        }

        public ProductVariant setRequiresShipping(Boolean arg) {
            optimisticData.put(getKey("requiresShipping"), arg);
            return this;
        }

        /**
        * List of product options applied to the variant.
        */

        public List<SelectedOption> getSelectedOptions() {
            return (List<SelectedOption>) get("selectedOptions");
        }

        public ProductVariant setSelectedOptions(List<SelectedOption> arg) {
            optimisticData.put(getKey("selectedOptions"), arg);
            return this;
        }

        /**
        * Represents an association between a variant and a selling plan. Selling plan allocations describe
        * which selling plans are available for each variant, and what their impact is on pricing.
        */

        public SellingPlanAllocationConnection getSellingPlanAllocations() {
            return (SellingPlanAllocationConnection) get("sellingPlanAllocations");
        }

        public ProductVariant setSellingPlanAllocations(SellingPlanAllocationConnection arg) {
            optimisticData.put(getKey("sellingPlanAllocations"), arg);
            return this;
        }

        /**
        * The SKU (stock keeping unit) associated with the variant.
        */

        public String getSku() {
            return (String) get("sku");
        }

        public ProductVariant setSku(String arg) {
            optimisticData.put(getKey("sku"), arg);
            return this;
        }

        /**
        * The in-store pickup availability of this variant by location.
        */

        public StoreAvailabilityConnection getStoreAvailability() {
            return (StoreAvailabilityConnection) get("storeAvailability");
        }

        public ProductVariant setStoreAvailability(StoreAvailabilityConnection arg) {
            optimisticData.put(getKey("storeAvailability"), arg);
            return this;
        }

        /**
        * Whether tax is charged when the product variant is sold.
        */

        public Boolean getTaxable() {
            return (Boolean) get("taxable");
        }

        public ProductVariant setTaxable(Boolean arg) {
            optimisticData.put(getKey("taxable"), arg);
            return this;
        }

        /**
        * The product variant’s title.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public ProductVariant setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * The unit price value for the variant based on the variant's measurement.
        */

        public MoneyV2 getUnitPrice() {
            return (MoneyV2) get("unitPrice");
        }

        public ProductVariant setUnitPrice(MoneyV2 arg) {
            optimisticData.put(getKey("unitPrice"), arg);
            return this;
        }

        /**
        * The unit price measurement for the variant.
        */

        public UnitPriceMeasurement getUnitPriceMeasurement() {
            return (UnitPriceMeasurement) get("unitPriceMeasurement");
        }

        public ProductVariant setUnitPriceMeasurement(UnitPriceMeasurement arg) {
            optimisticData.put(getKey("unitPriceMeasurement"), arg);
            return this;
        }

        /**
        * The weight of the product variant in the unit system specified with `weight_unit`.
        */

        public Double getWeight() {
            return (Double) get("weight");
        }

        public ProductVariant setWeight(Double arg) {
            optimisticData.put(getKey("weight"), arg);
            return this;
        }

        /**
        * Unit of measurement for weight.
        */

        public WeightUnit getWeightUnit() {
            return (WeightUnit) get("weightUnit");
        }

        public ProductVariant setWeightUnit(WeightUnit arg) {
            optimisticData.put(getKey("weightUnit"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "availableForSale": return false;

                case "barcode": return false;

                case "compareAtPrice": return true;

                case "compareAtPriceV2": return true;

                case "components": return true;

                case "currentlyNotInStock": return false;

                case "groupedBy": return true;

                case "id": return false;

                case "image": return true;

                case "metafield": return true;

                case "metafields": return true;

                case "price": return true;

                case "priceV2": return true;

                case "product": return true;

                case "quantityAvailable": return false;

                case "quantityPriceBreaks": return true;

                case "quantityRule": return true;

                case "requiresComponents": return false;

                case "requiresShipping": return false;

                case "selectedOptions": return true;

                case "sellingPlanAllocations": return true;

                case "sku": return false;

                case "storeAvailability": return true;

                case "taxable": return false;

                case "title": return false;

                case "unitPrice": return true;

                case "unitPriceMeasurement": return true;

                case "weight": return false;

                case "weightUnit": return false;

                default: return false;
            }
        }
    }

    public interface ProductVariantComponentQueryDefinition {
        void define(ProductVariantComponentQuery _queryBuilder);
    }

    /**
    * Represents a component of a bundle variant.
    */
    public static class ProductVariantComponentQuery extends Query<ProductVariantComponentQuery> {
        ProductVariantComponentQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The product variant object that the component belongs to.
        */
        public ProductVariantComponentQuery productVariant(ProductVariantQueryDefinition queryDef) {
            startField("productVariant");

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The quantity of component present in the bundle.
        */
        public ProductVariantComponentQuery quantity() {
            startField("quantity");

            return this;
        }
    }

    /**
    * Represents a component of a bundle variant.
    */
    public static class ProductVariantComponent extends AbstractResponse<ProductVariantComponent> {
        public ProductVariantComponent() {
        }

        public ProductVariantComponent(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "productVariant": {
                        responseData.put(key, new ProductVariant(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "quantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductVariantComponent";
        }

        /**
        * The product variant object that the component belongs to.
        */

        public ProductVariant getProductVariant() {
            return (ProductVariant) get("productVariant");
        }

        public ProductVariantComponent setProductVariant(ProductVariant arg) {
            optimisticData.put(getKey("productVariant"), arg);
            return this;
        }

        /**
        * The quantity of component present in the bundle.
        */

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public ProductVariantComponent setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "productVariant": return true;

                case "quantity": return false;

                default: return false;
            }
        }
    }

    public interface ProductVariantComponentConnectionQueryDefinition {
        void define(ProductVariantComponentConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple ProductVariantComponents.
    */
    public static class ProductVariantComponentConnectionQuery extends Query<ProductVariantComponentConnectionQuery> {
        ProductVariantComponentConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public ProductVariantComponentConnectionQuery edges(ProductVariantComponentEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantComponentEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in ProductVariantComponentEdge.
        */
        public ProductVariantComponentConnectionQuery nodes(ProductVariantComponentQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantComponentQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public ProductVariantComponentConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple ProductVariantComponents.
    */
    public static class ProductVariantComponentConnection extends AbstractResponse<ProductVariantComponentConnection> {
        public ProductVariantComponentConnection() {
        }

        public ProductVariantComponentConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<ProductVariantComponentEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ProductVariantComponentEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<ProductVariantComponent> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ProductVariantComponent(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductVariantComponentConnection";
        }

        /**
        * A list of edges.
        */

        public List<ProductVariantComponentEdge> getEdges() {
            return (List<ProductVariantComponentEdge>) get("edges");
        }

        public ProductVariantComponentConnection setEdges(List<ProductVariantComponentEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in ProductVariantComponentEdge.
        */

        public List<ProductVariantComponent> getNodes() {
            return (List<ProductVariantComponent>) get("nodes");
        }

        public ProductVariantComponentConnection setNodes(List<ProductVariantComponent> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public ProductVariantComponentConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface ProductVariantComponentEdgeQueryDefinition {
        void define(ProductVariantComponentEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.
    */
    public static class ProductVariantComponentEdgeQuery extends Query<ProductVariantComponentEdgeQuery> {
        ProductVariantComponentEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public ProductVariantComponentEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of ProductVariantComponentEdge.
        */
        public ProductVariantComponentEdgeQuery node(ProductVariantComponentQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantComponentQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.
    */
    public static class ProductVariantComponentEdge extends AbstractResponse<ProductVariantComponentEdge> {
        public ProductVariantComponentEdge() {
        }

        public ProductVariantComponentEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new ProductVariantComponent(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductVariantComponentEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public ProductVariantComponentEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of ProductVariantComponentEdge.
        */

        public ProductVariantComponent getNode() {
            return (ProductVariantComponent) get("node");
        }

        public ProductVariantComponentEdge setNode(ProductVariantComponent arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface ProductVariantConnectionQueryDefinition {
        void define(ProductVariantConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple ProductVariants.
    */
    public static class ProductVariantConnectionQuery extends Query<ProductVariantConnectionQuery> {
        ProductVariantConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public ProductVariantConnectionQuery edges(ProductVariantEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in ProductVariantEdge.
        */
        public ProductVariantConnectionQuery nodes(ProductVariantQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public ProductVariantConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple ProductVariants.
    */
    public static class ProductVariantConnection extends AbstractResponse<ProductVariantConnection> {
        public ProductVariantConnection() {
        }

        public ProductVariantConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<ProductVariantEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ProductVariantEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<ProductVariant> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ProductVariant(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductVariantConnection";
        }

        /**
        * A list of edges.
        */

        public List<ProductVariantEdge> getEdges() {
            return (List<ProductVariantEdge>) get("edges");
        }

        public ProductVariantConnection setEdges(List<ProductVariantEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in ProductVariantEdge.
        */

        public List<ProductVariant> getNodes() {
            return (List<ProductVariant>) get("nodes");
        }

        public ProductVariantConnection setNodes(List<ProductVariant> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public ProductVariantConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface ProductVariantEdgeQueryDefinition {
        void define(ProductVariantEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one ProductVariant and a cursor during pagination.
    */
    public static class ProductVariantEdgeQuery extends Query<ProductVariantEdgeQuery> {
        ProductVariantEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public ProductVariantEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of ProductVariantEdge.
        */
        public ProductVariantEdgeQuery node(ProductVariantQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new ProductVariantQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one ProductVariant and a cursor during pagination.
    */
    public static class ProductVariantEdge extends AbstractResponse<ProductVariantEdge> {
        public ProductVariantEdge() {
        }

        public ProductVariantEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new ProductVariant(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ProductVariantEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public ProductVariantEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of ProductVariantEdge.
        */

        public ProductVariant getNode() {
            return (ProductVariant) get("node");
        }

        public ProductVariantEdge setNode(ProductVariant arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the ProductVariant query.
    */
    public enum ProductVariantSortKeys {
        /**
        * Sort by the `id` value.
        */
        ID,

        /**
        * Sort by the `position` value.
        */
        POSITION,

        /**
        * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        * Don't use this sort key when no search query is specified.
        */
        RELEVANCE,

        /**
        * Sort by the `sku` value.
        */
        SKU,

        /**
        * Sort by the `title` value.
        */
        TITLE,

        UNKNOWN_VALUE;

        public static ProductVariantSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ID": {
                    return ID;
                }

                case "POSITION": {
                    return POSITION;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                case "SKU": {
                    return SKU;
                }

                case "TITLE": {
                    return TITLE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ID: {
                    return "ID";
                }

                case POSITION: {
                    return "POSITION";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                case SKU: {
                    return "SKU";
                }

                case TITLE: {
                    return "TITLE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface PurchasingCompanyQueryDefinition {
        void define(PurchasingCompanyQuery _queryBuilder);
    }

    /**
    * Represents information about the buyer that is interacting with the cart.
    */
    public static class PurchasingCompanyQuery extends Query<PurchasingCompanyQuery> {
        PurchasingCompanyQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The company associated to the order or draft order.
        */
        public PurchasingCompanyQuery company(CompanyQueryDefinition queryDef) {
            startField("company");

            _queryBuilder.append('{');
            queryDef.define(new CompanyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The company contact associated to the order or draft order.
        */
        public PurchasingCompanyQuery contact(CompanyContactQueryDefinition queryDef) {
            startField("contact");

            _queryBuilder.append('{');
            queryDef.define(new CompanyContactQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The company location associated to the order or draft order.
        */
        public PurchasingCompanyQuery location(CompanyLocationQueryDefinition queryDef) {
            startField("location");

            _queryBuilder.append('{');
            queryDef.define(new CompanyLocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents information about the buyer that is interacting with the cart.
    */
    public static class PurchasingCompany extends AbstractResponse<PurchasingCompany> {
        public PurchasingCompany() {
        }

        public PurchasingCompany(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "company": {
                        responseData.put(key, new Company(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "contact": {
                        CompanyContact optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new CompanyContact(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "location": {
                        responseData.put(key, new CompanyLocation(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "PurchasingCompany";
        }

        /**
        * The company associated to the order or draft order.
        */

        public Company getCompany() {
            return (Company) get("company");
        }

        public PurchasingCompany setCompany(Company arg) {
            optimisticData.put(getKey("company"), arg);
            return this;
        }

        /**
        * The company contact associated to the order or draft order.
        */

        public CompanyContact getContact() {
            return (CompanyContact) get("contact");
        }

        public PurchasingCompany setContact(CompanyContact arg) {
            optimisticData.put(getKey("contact"), arg);
            return this;
        }

        /**
        * The company location associated to the order or draft order.
        */

        public CompanyLocation getLocation() {
            return (CompanyLocation) get("location");
        }

        public PurchasingCompany setLocation(CompanyLocation arg) {
            optimisticData.put(getKey("location"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "company": return true;

                case "contact": return true;

                case "location": return true;

                default: return false;
            }
        }
    }

    public interface QuantityPriceBreakQueryDefinition {
        void define(QuantityPriceBreakQuery _queryBuilder);
    }

    /**
    * Quantity price breaks lets you offer different rates that are based on the
    * amount of a specific variant being ordered.
    */
    public static class QuantityPriceBreakQuery extends Query<QuantityPriceBreakQuery> {
        QuantityPriceBreakQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Minimum quantity required to reach new quantity break price.
        */
        public QuantityPriceBreakQuery minimumQuantity() {
            startField("minimumQuantity");

            return this;
        }

        /**
        * The price of variant after reaching the minimum quanity.
        */
        public QuantityPriceBreakQuery price(MoneyV2QueryDefinition queryDef) {
            startField("price");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Quantity price breaks lets you offer different rates that are based on the
    * amount of a specific variant being ordered.
    */
    public static class QuantityPriceBreak extends AbstractResponse<QuantityPriceBreak> {
        public QuantityPriceBreak() {
        }

        public QuantityPriceBreak(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "minimumQuantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "price": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "QuantityPriceBreak";
        }

        /**
        * Minimum quantity required to reach new quantity break price.
        */

        public Integer getMinimumQuantity() {
            return (Integer) get("minimumQuantity");
        }

        public QuantityPriceBreak setMinimumQuantity(Integer arg) {
            optimisticData.put(getKey("minimumQuantity"), arg);
            return this;
        }

        /**
        * The price of variant after reaching the minimum quanity.
        */

        public MoneyV2 getPrice() {
            return (MoneyV2) get("price");
        }

        public QuantityPriceBreak setPrice(MoneyV2 arg) {
            optimisticData.put(getKey("price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "minimumQuantity": return false;

                case "price": return true;

                default: return false;
            }
        }
    }

    public interface QuantityPriceBreakConnectionQueryDefinition {
        void define(QuantityPriceBreakConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple QuantityPriceBreaks.
    */
    public static class QuantityPriceBreakConnectionQuery extends Query<QuantityPriceBreakConnectionQuery> {
        QuantityPriceBreakConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public QuantityPriceBreakConnectionQuery edges(QuantityPriceBreakEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new QuantityPriceBreakEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in QuantityPriceBreakEdge.
        */
        public QuantityPriceBreakConnectionQuery nodes(QuantityPriceBreakQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new QuantityPriceBreakQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public QuantityPriceBreakConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple QuantityPriceBreaks.
    */
    public static class QuantityPriceBreakConnection extends AbstractResponse<QuantityPriceBreakConnection> {
        public QuantityPriceBreakConnection() {
        }

        public QuantityPriceBreakConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<QuantityPriceBreakEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new QuantityPriceBreakEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<QuantityPriceBreak> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new QuantityPriceBreak(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "QuantityPriceBreakConnection";
        }

        /**
        * A list of edges.
        */

        public List<QuantityPriceBreakEdge> getEdges() {
            return (List<QuantityPriceBreakEdge>) get("edges");
        }

        public QuantityPriceBreakConnection setEdges(List<QuantityPriceBreakEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in QuantityPriceBreakEdge.
        */

        public List<QuantityPriceBreak> getNodes() {
            return (List<QuantityPriceBreak>) get("nodes");
        }

        public QuantityPriceBreakConnection setNodes(List<QuantityPriceBreak> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public QuantityPriceBreakConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface QuantityPriceBreakEdgeQueryDefinition {
        void define(QuantityPriceBreakEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination.
    */
    public static class QuantityPriceBreakEdgeQuery extends Query<QuantityPriceBreakEdgeQuery> {
        QuantityPriceBreakEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public QuantityPriceBreakEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of QuantityPriceBreakEdge.
        */
        public QuantityPriceBreakEdgeQuery node(QuantityPriceBreakQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new QuantityPriceBreakQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination.
    */
    public static class QuantityPriceBreakEdge extends AbstractResponse<QuantityPriceBreakEdge> {
        public QuantityPriceBreakEdge() {
        }

        public QuantityPriceBreakEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new QuantityPriceBreak(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "QuantityPriceBreakEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public QuantityPriceBreakEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of QuantityPriceBreakEdge.
        */

        public QuantityPriceBreak getNode() {
            return (QuantityPriceBreak) get("node");
        }

        public QuantityPriceBreakEdge setNode(QuantityPriceBreak arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface QuantityRuleQueryDefinition {
        void define(QuantityRuleQuery _queryBuilder);
    }

    /**
    * The quantity rule for the product variant in a given context.
    */
    public static class QuantityRuleQuery extends Query<QuantityRuleQuery> {
        QuantityRuleQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The value that specifies the quantity increment between minimum and maximum of the rule.
        * Only quantities divisible by this value will be considered valid.
        * The increment must be lower than or equal to the minimum and the maximum, and both minimum and
        * maximum
        * must be divisible by this value.
        */
        public QuantityRuleQuery increment() {
            startField("increment");

            return this;
        }

        /**
        * An optional value that defines the highest allowed quantity purchased by the customer.
        * If defined, maximum must be lower than or equal to the minimum and must be a multiple of the
        * increment.
        */
        public QuantityRuleQuery maximum() {
            startField("maximum");

            return this;
        }

        /**
        * The value that defines the lowest allowed quantity purchased by the customer.
        * The minimum must be a multiple of the quantity rule's increment.
        */
        public QuantityRuleQuery minimum() {
            startField("minimum");

            return this;
        }
    }

    /**
    * The quantity rule for the product variant in a given context.
    */
    public static class QuantityRule extends AbstractResponse<QuantityRule> {
        public QuantityRule() {
        }

        public QuantityRule(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "increment": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "maximum": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "minimum": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "QuantityRule";
        }

        /**
        * The value that specifies the quantity increment between minimum and maximum of the rule.
        * Only quantities divisible by this value will be considered valid.
        * The increment must be lower than or equal to the minimum and the maximum, and both minimum and
        * maximum
        * must be divisible by this value.
        */

        public Integer getIncrement() {
            return (Integer) get("increment");
        }

        public QuantityRule setIncrement(Integer arg) {
            optimisticData.put(getKey("increment"), arg);
            return this;
        }

        /**
        * An optional value that defines the highest allowed quantity purchased by the customer.
        * If defined, maximum must be lower than or equal to the minimum and must be a multiple of the
        * increment.
        */

        public Integer getMaximum() {
            return (Integer) get("maximum");
        }

        public QuantityRule setMaximum(Integer arg) {
            optimisticData.put(getKey("maximum"), arg);
            return this;
        }

        /**
        * The value that defines the lowest allowed quantity purchased by the customer.
        * The minimum must be a multiple of the quantity rule's increment.
        */

        public Integer getMinimum() {
            return (Integer) get("minimum");
        }

        public QuantityRule setMinimum(Integer arg) {
            optimisticData.put(getKey("minimum"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "increment": return false;

                case "maximum": return false;

                case "minimum": return false;

                default: return false;
            }
        }
    }

    public interface QueryRootQueryDefinition {
        void define(QueryRootQuery _queryBuilder);
    }

    /**
    * The schema’s entry-point for queries. This acts as the public, top-level API from which all queries
    * must start.
    */
    public static class QueryRootQuery extends Query<QueryRootQuery> {
        QueryRootQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Fetch a specific Article by its ID.
        */
        public QueryRootQuery article(ID id, ArticleQueryDefinition queryDef) {
            startField("article");

            _queryBuilder.append("(id:");
            Query.appendQuotedString(_queryBuilder, id.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ArticlesArguments extends Arguments {
            ArticlesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public ArticlesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public ArticlesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public ArticlesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public ArticlesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public ArticlesArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public ArticlesArguments sortKey(ArticleSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Apply one or multiple filters to the query.
            * | name | description | acceptable_values | default_value | example_use |
            * | ---- | ---- | ---- | ---- | ---- |
            * | author |
            * | blog_title |
            * | created_at |
            * | tag |
            * | tag_not |
            * | updated_at |
            * Refer to the detailed [search syntax](https://shopify.dev/api/usage/search-syntax) for more
            * information about using filters.
            */
            public ArticlesArguments query(String value) {
                if (value != null) {
                    startArgument("query");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface ArticlesArgumentsDefinition {
            void define(ArticlesArguments args);
        }

        /**
        * List of the shop's articles.
        */
        public QueryRootQuery articles(ArticleConnectionQueryDefinition queryDef) {
            return articles(args -> {}, queryDef);
        }

        /**
        * List of the shop's articles.
        */
        public QueryRootQuery articles(ArticlesArgumentsDefinition argsDef, ArticleConnectionQueryDefinition queryDef) {
            startField("articles");

            ArticlesArguments args = new ArticlesArguments(_queryBuilder);
            argsDef.define(args);
            ArticlesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ArticleConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class BlogArguments extends Arguments {
            BlogArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * The handle of the `Blog`.
            */
            public BlogArguments handle(String value) {
                if (value != null) {
                    startArgument("handle");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * The ID of the `Blog`.
            */
            public BlogArguments id(ID value) {
                if (value != null) {
                    startArgument("id");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface BlogArgumentsDefinition {
            void define(BlogArguments args);
        }

        /**
        * Fetch a specific `Blog` by one of its unique attributes.
        */
        public QueryRootQuery blog(BlogQueryDefinition queryDef) {
            return blog(args -> {}, queryDef);
        }

        /**
        * Fetch a specific `Blog` by one of its unique attributes.
        */
        public QueryRootQuery blog(BlogArgumentsDefinition argsDef, BlogQueryDefinition queryDef) {
            startField("blog");

            BlogArguments args = new BlogArguments(_queryBuilder);
            argsDef.define(args);
            BlogArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Find a blog by its handle.
        *
        * @deprecated Use `blog` instead.
        */
        @Deprecated
        public QueryRootQuery blogByHandle(String handle, BlogQueryDefinition queryDef) {
            startField("blogByHandle");

            _queryBuilder.append("(handle:");
            Query.appendQuotedString(_queryBuilder, handle.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new BlogQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class BlogsArguments extends Arguments {
            BlogsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public BlogsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public BlogsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public BlogsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public BlogsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public BlogsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public BlogsArguments sortKey(BlogSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Apply one or multiple filters to the query.
            * | name | description | acceptable_values | default_value | example_use |
            * | ---- | ---- | ---- | ---- | ---- |
            * | created_at |
            * | handle |
            * | title |
            * | updated_at |
            * Refer to the detailed [search syntax](https://shopify.dev/api/usage/search-syntax) for more
            * information about using filters.
            */
            public BlogsArguments query(String value) {
                if (value != null) {
                    startArgument("query");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface BlogsArgumentsDefinition {
            void define(BlogsArguments args);
        }

        /**
        * List of the shop's blogs.
        */
        public QueryRootQuery blogs(BlogConnectionQueryDefinition queryDef) {
            return blogs(args -> {}, queryDef);
        }

        /**
        * List of the shop's blogs.
        */
        public QueryRootQuery blogs(BlogsArgumentsDefinition argsDef, BlogConnectionQueryDefinition queryDef) {
            startField("blogs");

            BlogsArguments args = new BlogsArguments(_queryBuilder);
            argsDef.define(args);
            BlogsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new BlogConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Retrieve a cart by its ID. For more information, refer to
        * [Manage a cart with the Storefront API](https://shopify.dev/custom-storefronts/cart/manage).
        */
        public QueryRootQuery cart(ID id, CartQueryDefinition queryDef) {
            startField("cart");

            _queryBuilder.append("(id:");
            Query.appendQuotedString(_queryBuilder, id.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A poll for the status of the cart checkout completion and order creation.
        */
        public QueryRootQuery cartCompletionAttempt(String attemptId, CartCompletionAttemptResultQueryDefinition queryDef) {
            startField("cartCompletionAttempt");

            _queryBuilder.append("(attemptId:");
            Query.appendQuotedString(_queryBuilder, attemptId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CartCompletionAttemptResultQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CollectionArguments extends Arguments {
            CollectionArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * The ID of the `Collection`.
            */
            public CollectionArguments id(ID value) {
                if (value != null) {
                    startArgument("id");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * The handle of the `Collection`.
            */
            public CollectionArguments handle(String value) {
                if (value != null) {
                    startArgument("handle");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface CollectionArgumentsDefinition {
            void define(CollectionArguments args);
        }

        /**
        * Fetch a specific `Collection` by one of its unique attributes.
        */
        public QueryRootQuery collection(CollectionQueryDefinition queryDef) {
            return collection(args -> {}, queryDef);
        }

        /**
        * Fetch a specific `Collection` by one of its unique attributes.
        */
        public QueryRootQuery collection(CollectionArgumentsDefinition argsDef, CollectionQueryDefinition queryDef) {
            startField("collection");

            CollectionArguments args = new CollectionArguments(_queryBuilder);
            argsDef.define(args);
            CollectionArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Find a collection by its handle.
        *
        * @deprecated Use `collection` instead.
        */
        @Deprecated
        public QueryRootQuery collectionByHandle(String handle, CollectionQueryDefinition queryDef) {
            startField("collectionByHandle");

            _queryBuilder.append("(handle:");
            Query.appendQuotedString(_queryBuilder, handle.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CollectionsArguments extends Arguments {
            CollectionsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public CollectionsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public CollectionsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public CollectionsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public CollectionsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public CollectionsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public CollectionsArguments sortKey(CollectionSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Apply one or multiple filters to the query.
            * | name | description | acceptable_values | default_value | example_use |
            * | ---- | ---- | ---- | ---- | ---- |
            * | collection_type |
            * | title |
            * | updated_at |
            * Refer to the detailed [search syntax](https://shopify.dev/api/usage/search-syntax) for more
            * information about using filters.
            */
            public CollectionsArguments query(String value) {
                if (value != null) {
                    startArgument("query");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface CollectionsArgumentsDefinition {
            void define(CollectionsArguments args);
        }

        /**
        * List of the shop’s collections.
        */
        public QueryRootQuery collections(CollectionConnectionQueryDefinition queryDef) {
            return collections(args -> {}, queryDef);
        }

        /**
        * List of the shop’s collections.
        */
        public QueryRootQuery collections(CollectionsArgumentsDefinition argsDef, CollectionConnectionQueryDefinition queryDef) {
            startField("collections");

            CollectionsArguments args = new CollectionsArguments(_queryBuilder);
            argsDef.define(args);
            CollectionsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new CollectionConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The customer associated with the given access token. Tokens are obtained by using the
        * [`customerAccessTokenCreate`
        * mutation](https://shopify.dev/docs/api/storefront/latest/mutations/customerAccessTokenCreate).
        */
        public QueryRootQuery customer(String customerAccessToken, CustomerQueryDefinition queryDef) {
            startField("customer");

            _queryBuilder.append("(customerAccessToken:");
            Query.appendQuotedString(_queryBuilder, customerAccessToken.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new CustomerQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Returns the localized experiences configured for the shop.
        */
        public QueryRootQuery localization(LocalizationQueryDefinition queryDef) {
            startField("localization");

            _queryBuilder.append('{');
            queryDef.define(new LocalizationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class LocationsArguments extends Arguments {
            LocationsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public LocationsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public LocationsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public LocationsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public LocationsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public LocationsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public LocationsArguments sortKey(LocationSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Used to sort results based on proximity to the provided location.
            */
            public LocationsArguments near(GeoCoordinateInput value) {
                if (value != null) {
                    startArgument("near");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface LocationsArgumentsDefinition {
            void define(LocationsArguments args);
        }

        /**
        * List of the shop's locations that support in-store pickup.
        * When sorting by distance, you must specify a location via the `near` argument.
        */
        public QueryRootQuery locations(LocationConnectionQueryDefinition queryDef) {
            return locations(args -> {}, queryDef);
        }

        /**
        * List of the shop's locations that support in-store pickup.
        * When sorting by distance, you must specify a location via the `near` argument.
        */
        public QueryRootQuery locations(LocationsArgumentsDefinition argsDef, LocationConnectionQueryDefinition queryDef) {
            startField("locations");

            LocationsArguments args = new LocationsArguments(_queryBuilder);
            argsDef.define(args);
            LocationsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new LocationConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Retrieve a [navigation menu](https://help.shopify.com/manual/online-store/menus-and-links) by its
        * handle.
        */
        public QueryRootQuery menu(String handle, MenuQueryDefinition queryDef) {
            startField("menu");

            _queryBuilder.append("(handle:");
            Query.appendQuotedString(_queryBuilder, handle.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MenuQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetaobjectArguments extends Arguments {
            MetaobjectArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * The ID of the metaobject.
            */
            public MetaobjectArguments id(ID value) {
                if (value != null) {
                    startArgument("id");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * The handle and type of the metaobject.
            */
            public MetaobjectArguments handle(MetaobjectHandleInput value) {
                if (value != null) {
                    startArgument("handle");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface MetaobjectArgumentsDefinition {
            void define(MetaobjectArguments args);
        }

        /**
        * Fetch a specific Metaobject by one of its unique identifiers.
        */
        public QueryRootQuery metaobject(MetaobjectQueryDefinition queryDef) {
            return metaobject(args -> {}, queryDef);
        }

        /**
        * Fetch a specific Metaobject by one of its unique identifiers.
        */
        public QueryRootQuery metaobject(MetaobjectArgumentsDefinition argsDef, MetaobjectQueryDefinition queryDef) {
            startField("metaobject");

            MetaobjectArguments args = new MetaobjectArguments(_queryBuilder);
            argsDef.define(args);
            MetaobjectArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class MetaobjectsArguments extends Arguments {
            MetaobjectsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The key of a field to sort with. Supports "id" and "updated_at".
            */
            public MetaobjectsArguments sortKey(String value) {
                if (value != null) {
                    startArgument("sortKey");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public MetaobjectsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public MetaobjectsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public MetaobjectsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public MetaobjectsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public MetaobjectsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface MetaobjectsArgumentsDefinition {
            void define(MetaobjectsArguments args);
        }

        /**
        * All active metaobjects for the shop.
        */
        public QueryRootQuery metaobjects(String type, MetaobjectConnectionQueryDefinition queryDef) {
            return metaobjects(type, args -> {}, queryDef);
        }

        /**
        * All active metaobjects for the shop.
        */
        public QueryRootQuery metaobjects(String type, MetaobjectsArgumentsDefinition argsDef, MetaobjectConnectionQueryDefinition queryDef) {
            startField("metaobjects");

            _queryBuilder.append("(type:");
            Query.appendQuotedString(_queryBuilder, type.toString());

            argsDef.define(new MetaobjectsArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetaobjectConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Returns a specific node by ID.
        */
        public QueryRootQuery node(ID id, NodeQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append("(id:");
            Query.appendQuotedString(_queryBuilder, id.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new NodeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Returns the list of nodes with the given IDs.
        */
        public QueryRootQuery nodes(List<ID> ids, NodeQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append("(ids:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (ID item1 : ids) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new NodeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class PageArguments extends Arguments {
            PageArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * The handle of the `Page`.
            */
            public PageArguments handle(String value) {
                if (value != null) {
                    startArgument("handle");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * The ID of the `Page`.
            */
            public PageArguments id(ID value) {
                if (value != null) {
                    startArgument("id");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface PageArgumentsDefinition {
            void define(PageArguments args);
        }

        /**
        * Fetch a specific `Page` by one of its unique attributes.
        */
        public QueryRootQuery page(PageQueryDefinition queryDef) {
            return page(args -> {}, queryDef);
        }

        /**
        * Fetch a specific `Page` by one of its unique attributes.
        */
        public QueryRootQuery page(PageArgumentsDefinition argsDef, PageQueryDefinition queryDef) {
            startField("page");

            PageArguments args = new PageArguments(_queryBuilder);
            argsDef.define(args);
            PageArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Find a page by its handle.
        *
        * @deprecated Use `page` instead.
        */
        @Deprecated
        public QueryRootQuery pageByHandle(String handle, PageQueryDefinition queryDef) {
            startField("pageByHandle");

            _queryBuilder.append("(handle:");
            Query.appendQuotedString(_queryBuilder, handle.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class PagesArguments extends Arguments {
            PagesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public PagesArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public PagesArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public PagesArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public PagesArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public PagesArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public PagesArguments sortKey(PageSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Apply one or multiple filters to the query.
            * | name | description | acceptable_values | default_value | example_use |
            * | ---- | ---- | ---- | ---- | ---- |
            * | created_at |
            * | handle |
            * | title |
            * | updated_at |
            * Refer to the detailed [search syntax](https://shopify.dev/api/usage/search-syntax) for more
            * information about using filters.
            */
            public PagesArguments query(String value) {
                if (value != null) {
                    startArgument("query");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface PagesArgumentsDefinition {
            void define(PagesArguments args);
        }

        /**
        * List of the shop's pages.
        */
        public QueryRootQuery pages(PageConnectionQueryDefinition queryDef) {
            return pages(args -> {}, queryDef);
        }

        /**
        * List of the shop's pages.
        */
        public QueryRootQuery pages(PagesArgumentsDefinition argsDef, PageConnectionQueryDefinition queryDef) {
            startField("pages");

            PagesArguments args = new PagesArguments(_queryBuilder);
            argsDef.define(args);
            PagesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new PageConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class PredictiveSearchArguments extends Arguments {
            PredictiveSearchArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * Limits the number of results based on `limit_scope`. The value can range from 1 to 10, and the
            * default is 10.
            */
            public PredictiveSearchArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Decides the distribution of results.
            */
            public PredictiveSearchArguments limitScope(PredictiveSearchLimitScope value) {
                if (value != null) {
                    startArgument("limitScope");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Specifies the list of resource fields to use for search. The default fields searched on are TITLE,
            * PRODUCT_TYPE, VARIANT_TITLE, and VENDOR. For the best search experience, you should search on the
            * default field set.
            * The input must not contain more than `250` values.
            */
            public PredictiveSearchArguments searchableFields(List<SearchableField> value) {
                if (value != null) {
                    startArgument("searchableFields");
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (SearchableField item1 : value) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            _queryBuilder.append(item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * The types of resources to search for.
            * The input must not contain more than `250` values.
            */
            public PredictiveSearchArguments types(List<PredictiveSearchType> value) {
                if (value != null) {
                    startArgument("types");
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (PredictiveSearchType item1 : value) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            _queryBuilder.append(item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * Specifies how unavailable products are displayed in the search results.
            */
            public PredictiveSearchArguments unavailableProducts(SearchUnavailableProductsType value) {
                if (value != null) {
                    startArgument("unavailableProducts");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }
        }

        public interface PredictiveSearchArgumentsDefinition {
            void define(PredictiveSearchArguments args);
        }

        /**
        * List of the predictive search results.
        */
        public QueryRootQuery predictiveSearch(String query, PredictiveSearchResultQueryDefinition queryDef) {
            return predictiveSearch(query, args -> {}, queryDef);
        }

        /**
        * List of the predictive search results.
        */
        public QueryRootQuery predictiveSearch(String query, PredictiveSearchArgumentsDefinition argsDef, PredictiveSearchResultQueryDefinition queryDef) {
            startField("predictiveSearch");

            _queryBuilder.append("(query:");
            Query.appendQuotedString(_queryBuilder, query.toString());

            argsDef.define(new PredictiveSearchArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new PredictiveSearchResultQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ProductArguments extends Arguments {
            ProductArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * The ID of the `Product`.
            */
            public ProductArguments id(ID value) {
                if (value != null) {
                    startArgument("id");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * The handle of the `Product`.
            */
            public ProductArguments handle(String value) {
                if (value != null) {
                    startArgument("handle");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface ProductArgumentsDefinition {
            void define(ProductArguments args);
        }

        /**
        * Fetch a specific `Product` by one of its unique attributes.
        */
        public QueryRootQuery product(ProductQueryDefinition queryDef) {
            return product(args -> {}, queryDef);
        }

        /**
        * Fetch a specific `Product` by one of its unique attributes.
        */
        public QueryRootQuery product(ProductArgumentsDefinition argsDef, ProductQueryDefinition queryDef) {
            startField("product");

            ProductArguments args = new ProductArguments(_queryBuilder);
            argsDef.define(args);
            ProductArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Find a product by its handle.
        *
        * @deprecated Use `product` instead.
        */
        @Deprecated
        public QueryRootQuery productByHandle(String handle, ProductQueryDefinition queryDef) {
            startField("productByHandle");

            _queryBuilder.append("(handle:");
            Query.appendQuotedString(_queryBuilder, handle.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ProductRecommendationsArguments extends Arguments {
            ProductRecommendationsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * The id of the product.
            */
            public ProductRecommendationsArguments productId(ID value) {
                if (value != null) {
                    startArgument("productId");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * The handle of the product.
            */
            public ProductRecommendationsArguments productHandle(String value) {
                if (value != null) {
                    startArgument("productHandle");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * The recommendation intent that is used to generate product recommendations. You can use intent to
            * generate product recommendations on various pages across the channels, according to different
            * strategies.
            */
            public ProductRecommendationsArguments intent(ProductRecommendationIntent value) {
                if (value != null) {
                    startArgument("intent");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }
        }

        public interface ProductRecommendationsArgumentsDefinition {
            void define(ProductRecommendationsArguments args);
        }

        /**
        * Find recommended products related to a given `product_id`.
        * To learn more about how recommendations are generated, see
        * [*Showing product recommendations on product
        * pages*](https://help.shopify.com/themes/development/recommended-products).
        */
        public QueryRootQuery productRecommendations(ProductQueryDefinition queryDef) {
            return productRecommendations(args -> {}, queryDef);
        }

        /**
        * Find recommended products related to a given `product_id`.
        * To learn more about how recommendations are generated, see
        * [*Showing product recommendations on product
        * pages*](https://help.shopify.com/themes/development/recommended-products).
        */
        public QueryRootQuery productRecommendations(ProductRecommendationsArgumentsDefinition argsDef, ProductQueryDefinition queryDef) {
            startField("productRecommendations");

            ProductRecommendationsArguments args = new ProductRecommendationsArguments(_queryBuilder);
            argsDef.define(args);
            ProductRecommendationsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Tags added to products.
        * Additional access scope required: unauthenticated_read_product_tags.
        */
        public QueryRootQuery productTags(int first, StringConnectionQueryDefinition queryDef) {
            startField("productTags");

            _queryBuilder.append("(first:");
            _queryBuilder.append(first);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new StringConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * List of product types for the shop's products that are published to your app.
        */
        public QueryRootQuery productTypes(int first, StringConnectionQueryDefinition queryDef) {
            startField("productTypes");

            _queryBuilder.append("(first:");
            _queryBuilder.append(first);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new StringConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ProductsArguments extends Arguments {
            ProductsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public ProductsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public ProductsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public ProductsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public ProductsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public ProductsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public ProductsArguments sortKey(ProductSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Apply one or multiple filters to the query.
            * | name | description | acceptable_values | default_value | example_use |
            * | ---- | ---- | ---- | ---- | ---- |
            * | available_for_sale |
            * | created_at |
            * | product_type |
            * | tag |
            * | tag_not |
            * | title |
            * | updated_at |
            * | variants.price |
            * | vendor |
            * Refer to the detailed [search syntax](https://shopify.dev/api/usage/search-syntax) for more
            * information about using filters.
            */
            public ProductsArguments query(String value) {
                if (value != null) {
                    startArgument("query");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface ProductsArgumentsDefinition {
            void define(ProductsArguments args);
        }

        /**
        * List of the shop’s products. For storefront search, use [`search`
        * query](https://shopify.dev/docs/api/storefront/latest/queries/search).
        */
        public QueryRootQuery products(ProductConnectionQueryDefinition queryDef) {
            return products(args -> {}, queryDef);
        }

        /**
        * List of the shop’s products. For storefront search, use [`search`
        * query](https://shopify.dev/docs/api/storefront/latest/queries/search).
        */
        public QueryRootQuery products(ProductsArgumentsDefinition argsDef, ProductConnectionQueryDefinition queryDef) {
            startField("products");

            ProductsArguments args = new ProductsArguments(_queryBuilder);
            argsDef.define(args);
            ProductsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ProductConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The list of public Storefront API versions, including supported, release candidate and unstable
        * versions.
        */
        public QueryRootQuery publicApiVersions(ApiVersionQueryDefinition queryDef) {
            startField("publicApiVersions");

            _queryBuilder.append('{');
            queryDef.define(new ApiVersionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class SearchArguments extends Arguments {
            SearchArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public SearchArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public SearchArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public SearchArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public SearchArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public SearchArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Sort the underlying list by the given key.
            */
            public SearchArguments sortKey(SearchSortKeys value) {
                if (value != null) {
                    startArgument("sortKey");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Specifies whether to perform a partial word match on the last search term.
            */
            public SearchArguments prefix(SearchPrefixQueryType value) {
                if (value != null) {
                    startArgument("prefix");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }

            /**
            * Returns a subset of products matching all product filters.
            * The input must not contain more than `250` values.
            */
            public SearchArguments productFilters(List<ProductFilter> value) {
                if (value != null) {
                    startArgument("productFilters");
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ProductFilter item1 : value) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * The types of resources to search for.
            * The input must not contain more than `250` values.
            */
            public SearchArguments types(List<SearchType> value) {
                if (value != null) {
                    startArgument("types");
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (SearchType item1 : value) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            _queryBuilder.append(item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * Specifies how unavailable products or variants are displayed in the search results.
            */
            public SearchArguments unavailableProducts(SearchUnavailableProductsType value) {
                if (value != null) {
                    startArgument("unavailableProducts");
                    _queryBuilder.append(value.toString());
                }
                return this;
            }
        }

        public interface SearchArgumentsDefinition {
            void define(SearchArguments args);
        }

        /**
        * List of the search results.
        */
        public QueryRootQuery search(String query, SearchResultItemConnectionQueryDefinition queryDef) {
            return search(query, args -> {}, queryDef);
        }

        /**
        * List of the search results.
        */
        public QueryRootQuery search(String query, SearchArgumentsDefinition argsDef, SearchResultItemConnectionQueryDefinition queryDef) {
            startField("search");

            _queryBuilder.append("(query:");
            Query.appendQuotedString(_queryBuilder, query.toString());

            argsDef.define(new SearchArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new SearchResultItemConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The shop associated with the storefront access token.
        */
        public QueryRootQuery shop(ShopQueryDefinition queryDef) {
            startField("shop");

            _queryBuilder.append('{');
            queryDef.define(new ShopQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UrlRedirectsArguments extends Arguments {
            UrlRedirectsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public UrlRedirectsArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public UrlRedirectsArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public UrlRedirectsArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public UrlRedirectsArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public UrlRedirectsArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Apply one or multiple filters to the query.
            * | name | description | acceptable_values | default_value | example_use |
            * | ---- | ---- | ---- | ---- | ---- |
            * | created_at |
            * | path |
            * | target |
            * Refer to the detailed [search syntax](https://shopify.dev/api/usage/search-syntax) for more
            * information about using filters.
            */
            public UrlRedirectsArguments query(String value) {
                if (value != null) {
                    startArgument("query");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface UrlRedirectsArgumentsDefinition {
            void define(UrlRedirectsArguments args);
        }

        /**
        * A list of redirects for a shop.
        */
        public QueryRootQuery urlRedirects(UrlRedirectConnectionQueryDefinition queryDef) {
            return urlRedirects(args -> {}, queryDef);
        }

        /**
        * A list of redirects for a shop.
        */
        public QueryRootQuery urlRedirects(UrlRedirectsArgumentsDefinition argsDef, UrlRedirectConnectionQueryDefinition queryDef) {
            startField("urlRedirects");

            UrlRedirectsArguments args = new UrlRedirectsArguments(_queryBuilder);
            argsDef.define(args);
            UrlRedirectsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new UrlRedirectConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public String toString() {
            return _queryBuilder.toString();
        }
    }

    /**
    * The schema’s entry-point for queries. This acts as the public, top-level API from which all queries
    * must start.
    */
    public static class QueryRoot extends AbstractResponse<QueryRoot> {
        public QueryRoot() {
        }

        public QueryRoot(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "article": {
                        Article optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Article(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "articles": {
                        responseData.put(key, new ArticleConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "blog": {
                        Blog optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Blog(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "blogByHandle": {
                        Blog optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Blog(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "blogs": {
                        responseData.put(key, new BlogConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "cart": {
                        Cart optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Cart(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "cartCompletionAttempt": {
                        CartCompletionAttemptResult optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownCartCompletionAttemptResult.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "collection": {
                        Collection optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Collection(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "collectionByHandle": {
                        Collection optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Collection(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "collections": {
                        responseData.put(key, new CollectionConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "customer": {
                        Customer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Customer(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "localization": {
                        responseData.put(key, new Localization(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "locations": {
                        responseData.put(key, new LocationConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "menu": {
                        Menu optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Menu(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metaobject": {
                        Metaobject optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metaobject(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metaobjects": {
                        responseData.put(key, new MetaobjectConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "node": {
                        Node optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownNode.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<Node> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Node optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = UnknownNode.create(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "page": {
                        Page optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Page(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "pageByHandle": {
                        Page optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Page(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "pages": {
                        responseData.put(key, new PageConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "predictiveSearch": {
                        PredictiveSearchResult optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new PredictiveSearchResult(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product": {
                        Product optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Product(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "productByHandle": {
                        Product optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Product(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "productRecommendations": {
                        List<Product> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<Product> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(new Product(jsonAsObject(element1, key)));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "productTags": {
                        responseData.put(key, new StringConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "productTypes": {
                        responseData.put(key, new StringConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "products": {
                        responseData.put(key, new ProductConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "publicApiVersions": {
                        List<ApiVersion> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ApiVersion(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "search": {
                        responseData.put(key, new SearchResultItemConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "shop": {
                        responseData.put(key, new Shop(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "urlRedirects": {
                        responseData.put(key, new UrlRedirectConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "QueryRoot";
        }

        /**
        * Fetch a specific Article by its ID.
        */

        public Article getArticle() {
            return (Article) get("article");
        }

        public QueryRoot setArticle(Article arg) {
            optimisticData.put(getKey("article"), arg);
            return this;
        }

        /**
        * List of the shop's articles.
        */

        public ArticleConnection getArticles() {
            return (ArticleConnection) get("articles");
        }

        public QueryRoot setArticles(ArticleConnection arg) {
            optimisticData.put(getKey("articles"), arg);
            return this;
        }

        /**
        * Fetch a specific `Blog` by one of its unique attributes.
        */

        public Blog getBlog() {
            return (Blog) get("blog");
        }

        public QueryRoot setBlog(Blog arg) {
            optimisticData.put(getKey("blog"), arg);
            return this;
        }

        /**
        * Find a blog by its handle.
        *
        * @deprecated Use `blog` instead.
        */

        public Blog getBlogByHandle() {
            return (Blog) get("blogByHandle");
        }

        public QueryRoot setBlogByHandle(Blog arg) {
            optimisticData.put(getKey("blogByHandle"), arg);
            return this;
        }

        /**
        * List of the shop's blogs.
        */

        public BlogConnection getBlogs() {
            return (BlogConnection) get("blogs");
        }

        public QueryRoot setBlogs(BlogConnection arg) {
            optimisticData.put(getKey("blogs"), arg);
            return this;
        }

        /**
        * Retrieve a cart by its ID. For more information, refer to
        * [Manage a cart with the Storefront API](https://shopify.dev/custom-storefronts/cart/manage).
        */

        public Cart getCart() {
            return (Cart) get("cart");
        }

        public QueryRoot setCart(Cart arg) {
            optimisticData.put(getKey("cart"), arg);
            return this;
        }

        /**
        * A poll for the status of the cart checkout completion and order creation.
        */

        public CartCompletionAttemptResult getCartCompletionAttempt() {
            return (CartCompletionAttemptResult) get("cartCompletionAttempt");
        }

        public QueryRoot setCartCompletionAttempt(CartCompletionAttemptResult arg) {
            optimisticData.put(getKey("cartCompletionAttempt"), arg);
            return this;
        }

        /**
        * Fetch a specific `Collection` by one of its unique attributes.
        */

        public Collection getCollection() {
            return (Collection) get("collection");
        }

        public QueryRoot setCollection(Collection arg) {
            optimisticData.put(getKey("collection"), arg);
            return this;
        }

        /**
        * Find a collection by its handle.
        *
        * @deprecated Use `collection` instead.
        */

        public Collection getCollectionByHandle() {
            return (Collection) get("collectionByHandle");
        }

        public QueryRoot setCollectionByHandle(Collection arg) {
            optimisticData.put(getKey("collectionByHandle"), arg);
            return this;
        }

        /**
        * List of the shop’s collections.
        */

        public CollectionConnection getCollections() {
            return (CollectionConnection) get("collections");
        }

        public QueryRoot setCollections(CollectionConnection arg) {
            optimisticData.put(getKey("collections"), arg);
            return this;
        }

        /**
        * The customer associated with the given access token. Tokens are obtained by using the
        * [`customerAccessTokenCreate`
        * mutation](https://shopify.dev/docs/api/storefront/latest/mutations/customerAccessTokenCreate).
        */

        public Customer getCustomer() {
            return (Customer) get("customer");
        }

        public QueryRoot setCustomer(Customer arg) {
            optimisticData.put(getKey("customer"), arg);
            return this;
        }

        /**
        * Returns the localized experiences configured for the shop.
        */

        public Localization getLocalization() {
            return (Localization) get("localization");
        }

        public QueryRoot setLocalization(Localization arg) {
            optimisticData.put(getKey("localization"), arg);
            return this;
        }

        /**
        * List of the shop's locations that support in-store pickup.
        * When sorting by distance, you must specify a location via the `near` argument.
        */

        public LocationConnection getLocations() {
            return (LocationConnection) get("locations");
        }

        public QueryRoot setLocations(LocationConnection arg) {
            optimisticData.put(getKey("locations"), arg);
            return this;
        }

        /**
        * Retrieve a [navigation menu](https://help.shopify.com/manual/online-store/menus-and-links) by its
        * handle.
        */

        public Menu getMenu() {
            return (Menu) get("menu");
        }

        public QueryRoot setMenu(Menu arg) {
            optimisticData.put(getKey("menu"), arg);
            return this;
        }

        /**
        * Fetch a specific Metaobject by one of its unique identifiers.
        */

        public Metaobject getMetaobject() {
            return (Metaobject) get("metaobject");
        }

        public QueryRoot setMetaobject(Metaobject arg) {
            optimisticData.put(getKey("metaobject"), arg);
            return this;
        }

        /**
        * All active metaobjects for the shop.
        */

        public MetaobjectConnection getMetaobjects() {
            return (MetaobjectConnection) get("metaobjects");
        }

        public QueryRoot setMetaobjects(MetaobjectConnection arg) {
            optimisticData.put(getKey("metaobjects"), arg);
            return this;
        }

        /**
        * Returns a specific node by ID.
        */

        public Node getNode() {
            return (Node) get("node");
        }

        public QueryRoot setNode(Node arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        /**
        * Returns the list of nodes with the given IDs.
        */

        public List<Node> getNodes() {
            return (List<Node>) get("nodes");
        }

        public QueryRoot setNodes(List<Node> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Fetch a specific `Page` by one of its unique attributes.
        */

        public Page getPage() {
            return (Page) get("page");
        }

        public QueryRoot setPage(Page arg) {
            optimisticData.put(getKey("page"), arg);
            return this;
        }

        /**
        * Find a page by its handle.
        *
        * @deprecated Use `page` instead.
        */

        public Page getPageByHandle() {
            return (Page) get("pageByHandle");
        }

        public QueryRoot setPageByHandle(Page arg) {
            optimisticData.put(getKey("pageByHandle"), arg);
            return this;
        }

        /**
        * List of the shop's pages.
        */

        public PageConnection getPages() {
            return (PageConnection) get("pages");
        }

        public QueryRoot setPages(PageConnection arg) {
            optimisticData.put(getKey("pages"), arg);
            return this;
        }

        /**
        * List of the predictive search results.
        */

        public PredictiveSearchResult getPredictiveSearch() {
            return (PredictiveSearchResult) get("predictiveSearch");
        }

        public QueryRoot setPredictiveSearch(PredictiveSearchResult arg) {
            optimisticData.put(getKey("predictiveSearch"), arg);
            return this;
        }

        /**
        * Fetch a specific `Product` by one of its unique attributes.
        */

        public Product getProduct() {
            return (Product) get("product");
        }

        public QueryRoot setProduct(Product arg) {
            optimisticData.put(getKey("product"), arg);
            return this;
        }

        /**
        * Find a product by its handle.
        *
        * @deprecated Use `product` instead.
        */

        public Product getProductByHandle() {
            return (Product) get("productByHandle");
        }

        public QueryRoot setProductByHandle(Product arg) {
            optimisticData.put(getKey("productByHandle"), arg);
            return this;
        }

        /**
        * Find recommended products related to a given `product_id`.
        * To learn more about how recommendations are generated, see
        * [*Showing product recommendations on product
        * pages*](https://help.shopify.com/themes/development/recommended-products).
        */

        public List<Product> getProductRecommendations() {
            return (List<Product>) get("productRecommendations");
        }

        public QueryRoot setProductRecommendations(List<Product> arg) {
            optimisticData.put(getKey("productRecommendations"), arg);
            return this;
        }

        /**
        * Tags added to products.
        * Additional access scope required: unauthenticated_read_product_tags.
        */

        public StringConnection getProductTags() {
            return (StringConnection) get("productTags");
        }

        public QueryRoot setProductTags(StringConnection arg) {
            optimisticData.put(getKey("productTags"), arg);
            return this;
        }

        /**
        * List of product types for the shop's products that are published to your app.
        */

        public StringConnection getProductTypes() {
            return (StringConnection) get("productTypes");
        }

        public QueryRoot setProductTypes(StringConnection arg) {
            optimisticData.put(getKey("productTypes"), arg);
            return this;
        }

        /**
        * List of the shop’s products. For storefront search, use [`search`
        * query](https://shopify.dev/docs/api/storefront/latest/queries/search).
        */

        public ProductConnection getProducts() {
            return (ProductConnection) get("products");
        }

        public QueryRoot setProducts(ProductConnection arg) {
            optimisticData.put(getKey("products"), arg);
            return this;
        }

        /**
        * The list of public Storefront API versions, including supported, release candidate and unstable
        * versions.
        */

        public List<ApiVersion> getPublicApiVersions() {
            return (List<ApiVersion>) get("publicApiVersions");
        }

        public QueryRoot setPublicApiVersions(List<ApiVersion> arg) {
            optimisticData.put(getKey("publicApiVersions"), arg);
            return this;
        }

        /**
        * List of the search results.
        */

        public SearchResultItemConnection getSearch() {
            return (SearchResultItemConnection) get("search");
        }

        public QueryRoot setSearch(SearchResultItemConnection arg) {
            optimisticData.put(getKey("search"), arg);
            return this;
        }

        /**
        * The shop associated with the storefront access token.
        */

        public Shop getShop() {
            return (Shop) get("shop");
        }

        public QueryRoot setShop(Shop arg) {
            optimisticData.put(getKey("shop"), arg);
            return this;
        }

        /**
        * A list of redirects for a shop.
        */

        public UrlRedirectConnection getUrlRedirects() {
            return (UrlRedirectConnection) get("urlRedirects");
        }

        public QueryRoot setUrlRedirects(UrlRedirectConnection arg) {
            optimisticData.put(getKey("urlRedirects"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "article": return true;

                case "articles": return true;

                case "blog": return true;

                case "blogByHandle": return true;

                case "blogs": return true;

                case "cart": return true;

                case "cartCompletionAttempt": return false;

                case "collection": return true;

                case "collectionByHandle": return true;

                case "collections": return true;

                case "customer": return true;

                case "localization": return true;

                case "locations": return true;

                case "menu": return true;

                case "metaobject": return true;

                case "metaobjects": return true;

                case "node": return false;

                case "nodes": return false;

                case "page": return true;

                case "pageByHandle": return true;

                case "pages": return true;

                case "predictiveSearch": return true;

                case "product": return true;

                case "productByHandle": return true;

                case "productRecommendations": return true;

                case "productTags": return true;

                case "productTypes": return true;

                case "products": return true;

                case "publicApiVersions": return true;

                case "search": return true;

                case "shop": return true;

                case "urlRedirects": return true;

                default: return false;
            }
        }
    }

    public interface SEOQueryDefinition {
        void define(SEOQuery _queryBuilder);
    }

    /**
    * SEO information.
    */
    public static class SEOQuery extends Query<SEOQuery> {
        SEOQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The meta description.
        */
        public SEOQuery description() {
            startField("description");

            return this;
        }

        /**
        * The SEO title.
        */
        public SEOQuery title() {
            startField("title");

            return this;
        }
    }

    /**
    * SEO information.
    */
    public static class SEO extends AbstractResponse<SEO> {
        public SEO() {
        }

        public SEO(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SEO";
        }

        /**
        * The meta description.
        */

        public String getDescription() {
            return (String) get("description");
        }

        public SEO setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * The SEO title.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public SEO setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "description": return false;

                case "title": return false;

                default: return false;
            }
        }
    }

    public interface ScriptDiscountApplicationQueryDefinition {
        void define(ScriptDiscountApplicationQuery _queryBuilder);
    }

    /**
    * Script discount applications capture the intentions of a discount that
    * was created by a Shopify Script.
    */
    public static class ScriptDiscountApplicationQuery extends Query<ScriptDiscountApplicationQuery> {
        ScriptDiscountApplicationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */
        public ScriptDiscountApplicationQuery allocationMethod() {
            startField("allocationMethod");

            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */
        public ScriptDiscountApplicationQuery targetSelection() {
            startField("targetSelection");

            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */
        public ScriptDiscountApplicationQuery targetType() {
            startField("targetType");

            return this;
        }

        /**
        * The title of the application as defined by the Script.
        */
        public ScriptDiscountApplicationQuery title() {
            startField("title");

            return this;
        }

        /**
        * The value of the discount application.
        */
        public ScriptDiscountApplicationQuery value(PricingValueQueryDefinition queryDef) {
            startField("value");

            _queryBuilder.append('{');
            queryDef.define(new PricingValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Script discount applications capture the intentions of a discount that
    * was created by a Shopify Script.
    */
    public static class ScriptDiscountApplication extends AbstractResponse<ScriptDiscountApplication> implements DiscountApplication {
        public ScriptDiscountApplication() {
        }

        public ScriptDiscountApplication(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "allocationMethod": {
                        responseData.put(key, DiscountApplicationAllocationMethod.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "targetSelection": {
                        responseData.put(key, DiscountApplicationTargetSelection.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "targetType": {
                        responseData.put(key, DiscountApplicationTargetType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "value": {
                        responseData.put(key, UnknownPricingValue.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ScriptDiscountApplication";
        }

        /**
        * The method by which the discount's value is allocated to its entitled items.
        */

        public DiscountApplicationAllocationMethod getAllocationMethod() {
            return (DiscountApplicationAllocationMethod) get("allocationMethod");
        }

        public ScriptDiscountApplication setAllocationMethod(DiscountApplicationAllocationMethod arg) {
            optimisticData.put(getKey("allocationMethod"), arg);
            return this;
        }

        /**
        * Which lines of targetType that the discount is allocated over.
        */

        public DiscountApplicationTargetSelection getTargetSelection() {
            return (DiscountApplicationTargetSelection) get("targetSelection");
        }

        public ScriptDiscountApplication setTargetSelection(DiscountApplicationTargetSelection arg) {
            optimisticData.put(getKey("targetSelection"), arg);
            return this;
        }

        /**
        * The type of line that the discount is applicable towards.
        */

        public DiscountApplicationTargetType getTargetType() {
            return (DiscountApplicationTargetType) get("targetType");
        }

        public ScriptDiscountApplication setTargetType(DiscountApplicationTargetType arg) {
            optimisticData.put(getKey("targetType"), arg);
            return this;
        }

        /**
        * The title of the application as defined by the Script.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public ScriptDiscountApplication setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * The value of the discount application.
        */

        public PricingValue getValue() {
            return (PricingValue) get("value");
        }

        public ScriptDiscountApplication setValue(PricingValue arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "allocationMethod": return false;

                case "targetSelection": return false;

                case "targetType": return false;

                case "title": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    /**
    * Specifies whether to perform a partial word match on the last search term.
    */
    public enum SearchPrefixQueryType {
        /**
        * Perform a partial word match on the last search term.
        */
        LAST,

        /**
        * Don't perform a partial word match on the last search term.
        */
        NONE,

        UNKNOWN_VALUE;

        public static SearchPrefixQueryType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "LAST": {
                    return LAST;
                }

                case "NONE": {
                    return NONE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case LAST: {
                    return "LAST";
                }

                case NONE: {
                    return "NONE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface SearchQuerySuggestionQueryDefinition {
        void define(SearchQuerySuggestionQuery _queryBuilder);
    }

    /**
    * A search query suggestion.
    */
    public static class SearchQuerySuggestionQuery extends Query<SearchQuerySuggestionQuery> {
        SearchQuerySuggestionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The text of the search query suggestion with highlighted HTML tags.
        */
        public SearchQuerySuggestionQuery styledText() {
            startField("styledText");

            return this;
        }

        /**
        * The text of the search query suggestion.
        */
        public SearchQuerySuggestionQuery text() {
            startField("text");

            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */
        public SearchQuerySuggestionQuery trackingParameters() {
            startField("trackingParameters");

            return this;
        }
    }

    /**
    * A search query suggestion.
    */
    public static class SearchQuerySuggestion extends AbstractResponse<SearchQuerySuggestion> implements Trackable {
        public SearchQuerySuggestion() {
        }

        public SearchQuerySuggestion(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "styledText": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "text": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "trackingParameters": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SearchQuerySuggestion";
        }

        /**
        * The text of the search query suggestion with highlighted HTML tags.
        */

        public String getStyledText() {
            return (String) get("styledText");
        }

        public SearchQuerySuggestion setStyledText(String arg) {
            optimisticData.put(getKey("styledText"), arg);
            return this;
        }

        /**
        * The text of the search query suggestion.
        */

        public String getText() {
            return (String) get("text");
        }

        public SearchQuerySuggestion setText(String arg) {
            optimisticData.put(getKey("text"), arg);
            return this;
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */

        public String getTrackingParameters() {
            return (String) get("trackingParameters");
        }

        public SearchQuerySuggestion setTrackingParameters(String arg) {
            optimisticData.put(getKey("trackingParameters"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "styledText": return false;

                case "text": return false;

                case "trackingParameters": return false;

                default: return false;
            }
        }
    }

    public interface SearchResultItemQueryDefinition {
        void define(SearchResultItemQuery _queryBuilder);
    }

    /**
    * A search result that matches the search query.
    */
    public static class SearchResultItemQuery extends Query<SearchResultItemQuery> {
        SearchResultItemQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public SearchResultItemQuery onArticle(ArticleQueryDefinition queryDef) {
            startInlineFragment("Article");
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public SearchResultItemQuery onPage(PageQueryDefinition queryDef) {
            startInlineFragment("Page");
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public SearchResultItemQuery onProduct(ProductQueryDefinition queryDef) {
            startInlineFragment("Product");
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface SearchResultItem {
        String getGraphQlTypeName();
    }

    /**
    * A search result that matches the search query.
    */
    public static class UnknownSearchResultItem extends AbstractResponse<UnknownSearchResultItem> implements SearchResultItem {
        public UnknownSearchResultItem() {
        }

        public UnknownSearchResultItem(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static SearchResultItem create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "Article": {
                    return new Article(fields);
                }

                case "Page": {
                    return new Page(fields);
                }

                case "Product": {
                    return new Product(fields);
                }

                default: {
                    return new UnknownSearchResultItem(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface SearchResultItemConnectionQueryDefinition {
        void define(SearchResultItemConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple SearchResultItems.
    */
    public static class SearchResultItemConnectionQuery extends Query<SearchResultItemConnectionQuery> {
        SearchResultItemConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public SearchResultItemConnectionQuery edges(SearchResultItemEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new SearchResultItemEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in SearchResultItemEdge.
        */
        public SearchResultItemConnectionQuery nodes(SearchResultItemQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new SearchResultItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public SearchResultItemConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of available filters.
        */
        public SearchResultItemConnectionQuery productFilters(FilterQueryDefinition queryDef) {
            startField("productFilters");

            _queryBuilder.append('{');
            queryDef.define(new FilterQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total number of results.
        */
        public SearchResultItemConnectionQuery totalCount() {
            startField("totalCount");

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple SearchResultItems.
    */
    public static class SearchResultItemConnection extends AbstractResponse<SearchResultItemConnection> {
        public SearchResultItemConnection() {
        }

        public SearchResultItemConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<SearchResultItemEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SearchResultItemEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<SearchResultItem> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(UnknownSearchResultItem.create(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "productFilters": {
                        List<Filter> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new Filter(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "totalCount": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SearchResultItemConnection";
        }

        /**
        * A list of edges.
        */

        public List<SearchResultItemEdge> getEdges() {
            return (List<SearchResultItemEdge>) get("edges");
        }

        public SearchResultItemConnection setEdges(List<SearchResultItemEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in SearchResultItemEdge.
        */

        public List<SearchResultItem> getNodes() {
            return (List<SearchResultItem>) get("nodes");
        }

        public SearchResultItemConnection setNodes(List<SearchResultItem> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public SearchResultItemConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        /**
        * A list of available filters.
        */

        public List<Filter> getProductFilters() {
            return (List<Filter>) get("productFilters");
        }

        public SearchResultItemConnection setProductFilters(List<Filter> arg) {
            optimisticData.put(getKey("productFilters"), arg);
            return this;
        }

        /**
        * The total number of results.
        */

        public Integer getTotalCount() {
            return (Integer) get("totalCount");
        }

        public SearchResultItemConnection setTotalCount(Integer arg) {
            optimisticData.put(getKey("totalCount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return false;

                case "pageInfo": return true;

                case "productFilters": return true;

                case "totalCount": return false;

                default: return false;
            }
        }
    }

    public interface SearchResultItemEdgeQueryDefinition {
        void define(SearchResultItemEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one SearchResultItem and a cursor during pagination.
    */
    public static class SearchResultItemEdgeQuery extends Query<SearchResultItemEdgeQuery> {
        SearchResultItemEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public SearchResultItemEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of SearchResultItemEdge.
        */
        public SearchResultItemEdgeQuery node(SearchResultItemQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new SearchResultItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one SearchResultItem and a cursor during pagination.
    */
    public static class SearchResultItemEdge extends AbstractResponse<SearchResultItemEdge> {
        public SearchResultItemEdge() {
        }

        public SearchResultItemEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, UnknownSearchResultItem.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SearchResultItemEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public SearchResultItemEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of SearchResultItemEdge.
        */

        public SearchResultItem getNode() {
            return (SearchResultItem) get("node");
        }

        public SearchResultItemEdge setNode(SearchResultItem arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return false;

                default: return false;
            }
        }
    }

    /**
    * The set of valid sort keys for the search query.
    */
    public enum SearchSortKeys {
        /**
        * Sort by the `price` value.
        */
        PRICE,

        /**
        * Sort by relevance to the search terms.
        */
        RELEVANCE,

        UNKNOWN_VALUE;

        public static SearchSortKeys fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "PRICE": {
                    return PRICE;
                }

                case "RELEVANCE": {
                    return RELEVANCE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PRICE: {
                    return "PRICE";
                }

                case RELEVANCE: {
                    return "RELEVANCE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * The types of search items to perform search within.
    */
    public enum SearchType {
        /**
        * Returns matching articles.
        */
        ARTICLE,

        /**
        * Returns matching pages.
        */
        PAGE,

        /**
        * Returns matching products.
        */
        PRODUCT,

        UNKNOWN_VALUE;

        public static SearchType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ARTICLE": {
                    return ARTICLE;
                }

                case "PAGE": {
                    return PAGE;
                }

                case "PRODUCT": {
                    return PRODUCT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ARTICLE: {
                    return "ARTICLE";
                }

                case PAGE: {
                    return "PAGE";
                }

                case PRODUCT: {
                    return "PRODUCT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * Specifies whether to display results for unavailable products.
    */
    public enum SearchUnavailableProductsType {
        /**
        * Exclude unavailable products.
        */
        HIDE,

        /**
        * Show unavailable products after all other matching results. This is the default.
        */
        LAST,

        /**
        * Show unavailable products in the order that they're found.
        */
        SHOW,

        UNKNOWN_VALUE;

        public static SearchUnavailableProductsType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "HIDE": {
                    return HIDE;
                }

                case "LAST": {
                    return LAST;
                }

                case "SHOW": {
                    return SHOW;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case HIDE: {
                    return "HIDE";
                }

                case LAST: {
                    return "LAST";
                }

                case SHOW: {
                    return "SHOW";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * Specifies the list of resource fields to search.
    */
    public enum SearchableField {
        /**
        * Author of the page or article.
        */
        AUTHOR,

        /**
        * Body of the page or article or product description or collection description.
        */
        BODY,

        /**
        * Product type.
        */
        PRODUCT_TYPE,

        /**
        * Tag associated with the product or article.
        */
        TAG,

        /**
        * Title of the page or article or product title or collection title.
        */
        TITLE,

        /**
        * Variant barcode.
        */
        VARIANTS_BARCODE,

        /**
        * Variant SKU.
        */
        VARIANTS_SKU,

        /**
        * Variant title.
        */
        VARIANTS_TITLE,

        /**
        * Product vendor.
        */
        VENDOR,

        UNKNOWN_VALUE;

        public static SearchableField fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "AUTHOR": {
                    return AUTHOR;
                }

                case "BODY": {
                    return BODY;
                }

                case "PRODUCT_TYPE": {
                    return PRODUCT_TYPE;
                }

                case "TAG": {
                    return TAG;
                }

                case "TITLE": {
                    return TITLE;
                }

                case "VARIANTS_BARCODE": {
                    return VARIANTS_BARCODE;
                }

                case "VARIANTS_SKU": {
                    return VARIANTS_SKU;
                }

                case "VARIANTS_TITLE": {
                    return VARIANTS_TITLE;
                }

                case "VENDOR": {
                    return VENDOR;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case AUTHOR: {
                    return "AUTHOR";
                }

                case BODY: {
                    return "BODY";
                }

                case PRODUCT_TYPE: {
                    return "PRODUCT_TYPE";
                }

                case TAG: {
                    return "TAG";
                }

                case TITLE: {
                    return "TITLE";
                }

                case VARIANTS_BARCODE: {
                    return "VARIANTS_BARCODE";
                }

                case VARIANTS_SKU: {
                    return "VARIANTS_SKU";
                }

                case VARIANTS_TITLE: {
                    return "VARIANTS_TITLE";
                }

                case VENDOR: {
                    return "VENDOR";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface SelectedOptionQueryDefinition {
        void define(SelectedOptionQuery _queryBuilder);
    }

    /**
    * Properties used by customers to select a product variant.
    * Products can have multiple options, like different sizes or colors.
    */
    public static class SelectedOptionQuery extends Query<SelectedOptionQuery> {
        SelectedOptionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The product option’s name.
        */
        public SelectedOptionQuery name() {
            startField("name");

            return this;
        }

        /**
        * The product option’s value.
        */
        public SelectedOptionQuery value() {
            startField("value");

            return this;
        }
    }

    /**
    * Properties used by customers to select a product variant.
    * Products can have multiple options, like different sizes or colors.
    */
    public static class SelectedOption extends AbstractResponse<SelectedOption> {
        public SelectedOption() {
        }

        public SelectedOption(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "value": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SelectedOption";
        }

        /**
        * The product option’s name.
        */

        public String getName() {
            return (String) get("name");
        }

        public SelectedOption setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The product option’s value.
        */

        public String getValue() {
            return (String) get("value");
        }

        public SelectedOption setValue(String arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "name": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    public static class SelectedOptionInput implements Serializable {
        private String name;

        private String value;

        public SelectedOptionInput(String name, String value) {
            this.name = name;

            this.value = value;
        }

        public String getName() {
            return name;
        }

        public SelectedOptionInput setName(String name) {
            this.name = name;
            return this;
        }

        public String getValue() {
            return value;
        }

        public SelectedOptionInput setValue(String value) {
            this.value = value;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("name:");
            Query.appendQuotedString(_queryBuilder, name.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("value:");
            Query.appendQuotedString(_queryBuilder, value.toString());

            _queryBuilder.append('}');
        }
    }

    public interface SellingPlanQueryDefinition {
        void define(SellingPlanQuery _queryBuilder);
    }

    /**
    * Represents how products and variants can be sold and purchased.
    */
    public static class SellingPlanQuery extends Query<SellingPlanQuery> {
        SellingPlanQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The billing policy for the selling plan.
        */
        public SellingPlanQuery billingPolicy(SellingPlanBillingPolicyQueryDefinition queryDef) {
            startField("billingPolicy");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanBillingPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The initial payment due for the purchase.
        */
        public SellingPlanQuery checkoutCharge(SellingPlanCheckoutChargeQueryDefinition queryDef) {
            startField("checkoutCharge");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanCheckoutChargeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The delivery policy for the selling plan.
        */
        public SellingPlanQuery deliveryPolicy(SellingPlanDeliveryPolicyQueryDefinition queryDef) {
            startField("deliveryPolicy");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanDeliveryPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The description of the selling plan.
        */
        public SellingPlanQuery description() {
            startField("description");

            return this;
        }

        /**
        * A globally-unique ID.
        */
        public SellingPlanQuery id() {
            startField("id");

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public SellingPlanQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public SellingPlanQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public SellingPlanQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The name of the selling plan. For example, '6 weeks of prepaid granola, delivered weekly'.
        */
        public SellingPlanQuery name() {
            startField("name");

            return this;
        }

        /**
        * The selling plan options available in the drop-down list in the storefront. For example, 'Delivery
        * every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product.
        * Individual selling plans contribute their options to the associated selling plan group. For example,
        * a selling plan group might have an option called `option1: Delivery every`. One selling plan in that
        * group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan
        * could contribute `option1: 4 weeks`, with different pricing.
        */
        public SellingPlanQuery options(SellingPlanOptionQueryDefinition queryDef) {
            startField("options");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanOptionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The price adjustments that a selling plan makes when a variant is purchased with a selling plan.
        */
        public SellingPlanQuery priceAdjustments(SellingPlanPriceAdjustmentQueryDefinition queryDef) {
            startField("priceAdjustments");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanPriceAdjustmentQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Whether purchasing the selling plan will result in multiple deliveries.
        */
        public SellingPlanQuery recurringDeliveries() {
            startField("recurringDeliveries");

            return this;
        }
    }

    /**
    * Represents how products and variants can be sold and purchased.
    */
    public static class SellingPlan extends AbstractResponse<SellingPlan> implements HasMetafields, MetafieldParentResource {
        public SellingPlan() {
        }

        public SellingPlan(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "billingPolicy": {
                        SellingPlanBillingPolicy optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownSellingPlanBillingPolicy.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "checkoutCharge": {
                        responseData.put(key, new SellingPlanCheckoutCharge(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "deliveryPolicy": {
                        SellingPlanDeliveryPolicy optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnknownSellingPlanDeliveryPolicy.create(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "options": {
                        List<SellingPlanOption> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanOption(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "priceAdjustments": {
                        List<SellingPlanPriceAdjustment> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanPriceAdjustment(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "recurringDeliveries": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlan";
        }

        /**
        * The billing policy for the selling plan.
        */

        public SellingPlanBillingPolicy getBillingPolicy() {
            return (SellingPlanBillingPolicy) get("billingPolicy");
        }

        public SellingPlan setBillingPolicy(SellingPlanBillingPolicy arg) {
            optimisticData.put(getKey("billingPolicy"), arg);
            return this;
        }

        /**
        * The initial payment due for the purchase.
        */

        public SellingPlanCheckoutCharge getCheckoutCharge() {
            return (SellingPlanCheckoutCharge) get("checkoutCharge");
        }

        public SellingPlan setCheckoutCharge(SellingPlanCheckoutCharge arg) {
            optimisticData.put(getKey("checkoutCharge"), arg);
            return this;
        }

        /**
        * The delivery policy for the selling plan.
        */

        public SellingPlanDeliveryPolicy getDeliveryPolicy() {
            return (SellingPlanDeliveryPolicy) get("deliveryPolicy");
        }

        public SellingPlan setDeliveryPolicy(SellingPlanDeliveryPolicy arg) {
            optimisticData.put(getKey("deliveryPolicy"), arg);
            return this;
        }

        /**
        * The description of the selling plan.
        */

        public String getDescription() {
            return (String) get("description");
        }

        public SellingPlan setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public SellingPlan setId(ID arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public SellingPlan setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public SellingPlan setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * The name of the selling plan. For example, '6 weeks of prepaid granola, delivered weekly'.
        */

        public String getName() {
            return (String) get("name");
        }

        public SellingPlan setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The selling plan options available in the drop-down list in the storefront. For example, 'Delivery
        * every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product.
        * Individual selling plans contribute their options to the associated selling plan group. For example,
        * a selling plan group might have an option called `option1: Delivery every`. One selling plan in that
        * group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan
        * could contribute `option1: 4 weeks`, with different pricing.
        */

        public List<SellingPlanOption> getOptions() {
            return (List<SellingPlanOption>) get("options");
        }

        public SellingPlan setOptions(List<SellingPlanOption> arg) {
            optimisticData.put(getKey("options"), arg);
            return this;
        }

        /**
        * The price adjustments that a selling plan makes when a variant is purchased with a selling plan.
        */

        public List<SellingPlanPriceAdjustment> getPriceAdjustments() {
            return (List<SellingPlanPriceAdjustment>) get("priceAdjustments");
        }

        public SellingPlan setPriceAdjustments(List<SellingPlanPriceAdjustment> arg) {
            optimisticData.put(getKey("priceAdjustments"), arg);
            return this;
        }

        /**
        * Whether purchasing the selling plan will result in multiple deliveries.
        */

        public Boolean getRecurringDeliveries() {
            return (Boolean) get("recurringDeliveries");
        }

        public SellingPlan setRecurringDeliveries(Boolean arg) {
            optimisticData.put(getKey("recurringDeliveries"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "billingPolicy": return false;

                case "checkoutCharge": return true;

                case "deliveryPolicy": return false;

                case "description": return false;

                case "id": return false;

                case "metafield": return true;

                case "metafields": return true;

                case "name": return false;

                case "options": return true;

                case "priceAdjustments": return true;

                case "recurringDeliveries": return false;

                default: return false;
            }
        }
    }

    public interface SellingPlanAllocationQueryDefinition {
        void define(SellingPlanAllocationQuery _queryBuilder);
    }

    /**
    * Represents an association between a variant and a selling plan. Selling plan allocations describe
    * the options offered for each variant, and the price of the variant when purchased with a selling
    * plan.
    */
    public static class SellingPlanAllocationQuery extends Query<SellingPlanAllocationQuery> {
        SellingPlanAllocationQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The checkout charge amount due for the purchase.
        */
        public SellingPlanAllocationQuery checkoutChargeAmount(MoneyV2QueryDefinition queryDef) {
            startField("checkoutChargeAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of price adjustments, with a maximum of two. When there are two, the first price adjustment
        * goes into effect at the time of purchase, while the second one starts after a certain number of
        * orders. A price adjustment represents how a selling plan affects pricing when a variant is purchased
        * with a selling plan. Prices display in the customer's currency if the shop is configured for it.
        */
        public SellingPlanAllocationQuery priceAdjustments(SellingPlanAllocationPriceAdjustmentQueryDefinition queryDef) {
            startField("priceAdjustments");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanAllocationPriceAdjustmentQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The remaining balance charge amount due for the purchase.
        */
        public SellingPlanAllocationQuery remainingBalanceChargeAmount(MoneyV2QueryDefinition queryDef) {
            startField("remainingBalanceChargeAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A representation of how products and variants can be sold and purchased. For example, an individual
        * selling plan could be '6 weeks of prepaid granola, delivered weekly'.
        */
        public SellingPlanAllocationQuery sellingPlan(SellingPlanQueryDefinition queryDef) {
            startField("sellingPlan");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents an association between a variant and a selling plan. Selling plan allocations describe
    * the options offered for each variant, and the price of the variant when purchased with a selling
    * plan.
    */
    public static class SellingPlanAllocation extends AbstractResponse<SellingPlanAllocation> {
        public SellingPlanAllocation() {
        }

        public SellingPlanAllocation(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "checkoutChargeAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "priceAdjustments": {
                        List<SellingPlanAllocationPriceAdjustment> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanAllocationPriceAdjustment(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "remainingBalanceChargeAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "sellingPlan": {
                        responseData.put(key, new SellingPlan(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanAllocation";
        }

        /**
        * The checkout charge amount due for the purchase.
        */

        public MoneyV2 getCheckoutChargeAmount() {
            return (MoneyV2) get("checkoutChargeAmount");
        }

        public SellingPlanAllocation setCheckoutChargeAmount(MoneyV2 arg) {
            optimisticData.put(getKey("checkoutChargeAmount"), arg);
            return this;
        }

        /**
        * A list of price adjustments, with a maximum of two. When there are two, the first price adjustment
        * goes into effect at the time of purchase, while the second one starts after a certain number of
        * orders. A price adjustment represents how a selling plan affects pricing when a variant is purchased
        * with a selling plan. Prices display in the customer's currency if the shop is configured for it.
        */

        public List<SellingPlanAllocationPriceAdjustment> getPriceAdjustments() {
            return (List<SellingPlanAllocationPriceAdjustment>) get("priceAdjustments");
        }

        public SellingPlanAllocation setPriceAdjustments(List<SellingPlanAllocationPriceAdjustment> arg) {
            optimisticData.put(getKey("priceAdjustments"), arg);
            return this;
        }

        /**
        * The remaining balance charge amount due for the purchase.
        */

        public MoneyV2 getRemainingBalanceChargeAmount() {
            return (MoneyV2) get("remainingBalanceChargeAmount");
        }

        public SellingPlanAllocation setRemainingBalanceChargeAmount(MoneyV2 arg) {
            optimisticData.put(getKey("remainingBalanceChargeAmount"), arg);
            return this;
        }

        /**
        * A representation of how products and variants can be sold and purchased. For example, an individual
        * selling plan could be '6 weeks of prepaid granola, delivered weekly'.
        */

        public SellingPlan getSellingPlan() {
            return (SellingPlan) get("sellingPlan");
        }

        public SellingPlanAllocation setSellingPlan(SellingPlan arg) {
            optimisticData.put(getKey("sellingPlan"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "checkoutChargeAmount": return true;

                case "priceAdjustments": return true;

                case "remainingBalanceChargeAmount": return true;

                case "sellingPlan": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanAllocationConnectionQueryDefinition {
        void define(SellingPlanAllocationConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple SellingPlanAllocations.
    */
    public static class SellingPlanAllocationConnectionQuery extends Query<SellingPlanAllocationConnectionQuery> {
        SellingPlanAllocationConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public SellingPlanAllocationConnectionQuery edges(SellingPlanAllocationEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanAllocationEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in SellingPlanAllocationEdge.
        */
        public SellingPlanAllocationConnectionQuery nodes(SellingPlanAllocationQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public SellingPlanAllocationConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple SellingPlanAllocations.
    */
    public static class SellingPlanAllocationConnection extends AbstractResponse<SellingPlanAllocationConnection> {
        public SellingPlanAllocationConnection() {
        }

        public SellingPlanAllocationConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<SellingPlanAllocationEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanAllocationEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<SellingPlanAllocation> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanAllocation(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanAllocationConnection";
        }

        /**
        * A list of edges.
        */

        public List<SellingPlanAllocationEdge> getEdges() {
            return (List<SellingPlanAllocationEdge>) get("edges");
        }

        public SellingPlanAllocationConnection setEdges(List<SellingPlanAllocationEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in SellingPlanAllocationEdge.
        */

        public List<SellingPlanAllocation> getNodes() {
            return (List<SellingPlanAllocation>) get("nodes");
        }

        public SellingPlanAllocationConnection setNodes(List<SellingPlanAllocation> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public SellingPlanAllocationConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanAllocationEdgeQueryDefinition {
        void define(SellingPlanAllocationEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one SellingPlanAllocation and a cursor during pagination.
    */
    public static class SellingPlanAllocationEdgeQuery extends Query<SellingPlanAllocationEdgeQuery> {
        SellingPlanAllocationEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public SellingPlanAllocationEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of SellingPlanAllocationEdge.
        */
        public SellingPlanAllocationEdgeQuery node(SellingPlanAllocationQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanAllocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one SellingPlanAllocation and a cursor during pagination.
    */
    public static class SellingPlanAllocationEdge extends AbstractResponse<SellingPlanAllocationEdge> {
        public SellingPlanAllocationEdge() {
        }

        public SellingPlanAllocationEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new SellingPlanAllocation(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanAllocationEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public SellingPlanAllocationEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of SellingPlanAllocationEdge.
        */

        public SellingPlanAllocation getNode() {
            return (SellingPlanAllocation) get("node");
        }

        public SellingPlanAllocationEdge setNode(SellingPlanAllocation arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanAllocationPriceAdjustmentQueryDefinition {
        void define(SellingPlanAllocationPriceAdjustmentQuery _queryBuilder);
    }

    /**
    * The resulting prices for variants when they're purchased with a specific selling plan.
    */
    public static class SellingPlanAllocationPriceAdjustmentQuery extends Query<SellingPlanAllocationPriceAdjustmentQuery> {
        SellingPlanAllocationPriceAdjustmentQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The price of the variant when it's purchased without a selling plan for the same number of
        * deliveries. For example, if a customer purchases 6 deliveries of $10.00 granola separately, then the
        * price is 6 x $10.00 = $60.00.
        */
        public SellingPlanAllocationPriceAdjustmentQuery compareAtPrice(MoneyV2QueryDefinition queryDef) {
            startField("compareAtPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The effective price for a single delivery. For example, for a prepaid subscription plan that
        * includes 6 deliveries at the price of $48.00, the per delivery price is $8.00.
        */
        public SellingPlanAllocationPriceAdjustmentQuery perDeliveryPrice(MoneyV2QueryDefinition queryDef) {
            startField("perDeliveryPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The price of the variant when it's purchased with a selling plan For example, for a prepaid
        * subscription plan that includes 6 deliveries of $10.00 granola, where the customer gets 20% off, the
        * price is 6 x $10.00 x 0.80 = $48.00.
        */
        public SellingPlanAllocationPriceAdjustmentQuery price(MoneyV2QueryDefinition queryDef) {
            startField("price");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The resulting price per unit for the variant associated with the selling plan. If the variant isn't
        * sold by quantity or measurement, then this field returns `null`.
        */
        public SellingPlanAllocationPriceAdjustmentQuery unitPrice(MoneyV2QueryDefinition queryDef) {
            startField("unitPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The resulting prices for variants when they're purchased with a specific selling plan.
    */
    public static class SellingPlanAllocationPriceAdjustment extends AbstractResponse<SellingPlanAllocationPriceAdjustment> {
        public SellingPlanAllocationPriceAdjustment() {
        }

        public SellingPlanAllocationPriceAdjustment(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "compareAtPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "perDeliveryPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "price": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "unitPrice": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanAllocationPriceAdjustment";
        }

        /**
        * The price of the variant when it's purchased without a selling plan for the same number of
        * deliveries. For example, if a customer purchases 6 deliveries of $10.00 granola separately, then the
        * price is 6 x $10.00 = $60.00.
        */

        public MoneyV2 getCompareAtPrice() {
            return (MoneyV2) get("compareAtPrice");
        }

        public SellingPlanAllocationPriceAdjustment setCompareAtPrice(MoneyV2 arg) {
            optimisticData.put(getKey("compareAtPrice"), arg);
            return this;
        }

        /**
        * The effective price for a single delivery. For example, for a prepaid subscription plan that
        * includes 6 deliveries at the price of $48.00, the per delivery price is $8.00.
        */

        public MoneyV2 getPerDeliveryPrice() {
            return (MoneyV2) get("perDeliveryPrice");
        }

        public SellingPlanAllocationPriceAdjustment setPerDeliveryPrice(MoneyV2 arg) {
            optimisticData.put(getKey("perDeliveryPrice"), arg);
            return this;
        }

        /**
        * The price of the variant when it's purchased with a selling plan For example, for a prepaid
        * subscription plan that includes 6 deliveries of $10.00 granola, where the customer gets 20% off, the
        * price is 6 x $10.00 x 0.80 = $48.00.
        */

        public MoneyV2 getPrice() {
            return (MoneyV2) get("price");
        }

        public SellingPlanAllocationPriceAdjustment setPrice(MoneyV2 arg) {
            optimisticData.put(getKey("price"), arg);
            return this;
        }

        /**
        * The resulting price per unit for the variant associated with the selling plan. If the variant isn't
        * sold by quantity or measurement, then this field returns `null`.
        */

        public MoneyV2 getUnitPrice() {
            return (MoneyV2) get("unitPrice");
        }

        public SellingPlanAllocationPriceAdjustment setUnitPrice(MoneyV2 arg) {
            optimisticData.put(getKey("unitPrice"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "compareAtPrice": return true;

                case "perDeliveryPrice": return true;

                case "price": return true;

                case "unitPrice": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanBillingPolicyQueryDefinition {
        void define(SellingPlanBillingPolicyQuery _queryBuilder);
    }

    /**
    * The selling plan billing policy.
    */
    public static class SellingPlanBillingPolicyQuery extends Query<SellingPlanBillingPolicyQuery> {
        SellingPlanBillingPolicyQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public SellingPlanBillingPolicyQuery onSellingPlanRecurringBillingPolicy(SellingPlanRecurringBillingPolicyQueryDefinition queryDef) {
            startInlineFragment("SellingPlanRecurringBillingPolicy");
            queryDef.define(new SellingPlanRecurringBillingPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface SellingPlanBillingPolicy {
        String getGraphQlTypeName();
    }

    /**
    * The selling plan billing policy.
    */
    public static class UnknownSellingPlanBillingPolicy extends AbstractResponse<UnknownSellingPlanBillingPolicy> implements SellingPlanBillingPolicy {
        public UnknownSellingPlanBillingPolicy() {
        }

        public UnknownSellingPlanBillingPolicy(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static SellingPlanBillingPolicy create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "SellingPlanRecurringBillingPolicy": {
                    return new SellingPlanRecurringBillingPolicy(fields);
                }

                default: {
                    return new UnknownSellingPlanBillingPolicy(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface SellingPlanCheckoutChargeQueryDefinition {
        void define(SellingPlanCheckoutChargeQuery _queryBuilder);
    }

    /**
    * The initial payment due for the purchase.
    */
    public static class SellingPlanCheckoutChargeQuery extends Query<SellingPlanCheckoutChargeQuery> {
        SellingPlanCheckoutChargeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The charge type for the checkout charge.
        */
        public SellingPlanCheckoutChargeQuery type() {
            startField("type");

            return this;
        }

        /**
        * The charge value for the checkout charge.
        */
        public SellingPlanCheckoutChargeQuery value(SellingPlanCheckoutChargeValueQueryDefinition queryDef) {
            startField("value");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanCheckoutChargeValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * The initial payment due for the purchase.
    */
    public static class SellingPlanCheckoutCharge extends AbstractResponse<SellingPlanCheckoutCharge> {
        public SellingPlanCheckoutCharge() {
        }

        public SellingPlanCheckoutCharge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "type": {
                        responseData.put(key, SellingPlanCheckoutChargeType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "value": {
                        responseData.put(key, UnknownSellingPlanCheckoutChargeValue.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanCheckoutCharge";
        }

        /**
        * The charge type for the checkout charge.
        */

        public SellingPlanCheckoutChargeType getType() {
            return (SellingPlanCheckoutChargeType) get("type");
        }

        public SellingPlanCheckoutCharge setType(SellingPlanCheckoutChargeType arg) {
            optimisticData.put(getKey("type"), arg);
            return this;
        }

        /**
        * The charge value for the checkout charge.
        */

        public SellingPlanCheckoutChargeValue getValue() {
            return (SellingPlanCheckoutChargeValue) get("value");
        }

        public SellingPlanCheckoutCharge setValue(SellingPlanCheckoutChargeValue arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "type": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    public interface SellingPlanCheckoutChargePercentageValueQueryDefinition {
        void define(SellingPlanCheckoutChargePercentageValueQuery _queryBuilder);
    }

    /**
    * The percentage value of the price used for checkout charge.
    */
    public static class SellingPlanCheckoutChargePercentageValueQuery extends Query<SellingPlanCheckoutChargePercentageValueQuery> {
        SellingPlanCheckoutChargePercentageValueQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The percentage value of the price used for checkout charge.
        */
        public SellingPlanCheckoutChargePercentageValueQuery percentage() {
            startField("percentage");

            return this;
        }
    }

    /**
    * The percentage value of the price used for checkout charge.
    */
    public static class SellingPlanCheckoutChargePercentageValue extends AbstractResponse<SellingPlanCheckoutChargePercentageValue> implements SellingPlanCheckoutChargeValue {
        public SellingPlanCheckoutChargePercentageValue() {
        }

        public SellingPlanCheckoutChargePercentageValue(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "percentage": {
                        responseData.put(key, jsonAsDouble(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanCheckoutChargePercentageValue";
        }

        /**
        * The percentage value of the price used for checkout charge.
        */

        public Double getPercentage() {
            return (Double) get("percentage");
        }

        public SellingPlanCheckoutChargePercentageValue setPercentage(Double arg) {
            optimisticData.put(getKey("percentage"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "percentage": return false;

                default: return false;
            }
        }
    }

    /**
    * The checkout charge when the full amount isn't charged at checkout.
    */
    public enum SellingPlanCheckoutChargeType {
        /**
        * The checkout charge is a percentage of the product or variant price.
        */
        PERCENTAGE,

        /**
        * The checkout charge is a fixed price amount.
        */
        PRICE,

        UNKNOWN_VALUE;

        public static SellingPlanCheckoutChargeType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "PERCENTAGE": {
                    return PERCENTAGE;
                }

                case "PRICE": {
                    return PRICE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PERCENTAGE: {
                    return "PERCENTAGE";
                }

                case PRICE: {
                    return "PRICE";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface SellingPlanCheckoutChargeValueQueryDefinition {
        void define(SellingPlanCheckoutChargeValueQuery _queryBuilder);
    }

    /**
    * The portion of the price to be charged at checkout.
    */
    public static class SellingPlanCheckoutChargeValueQuery extends Query<SellingPlanCheckoutChargeValueQuery> {
        SellingPlanCheckoutChargeValueQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public SellingPlanCheckoutChargeValueQuery onMoneyV2(MoneyV2QueryDefinition queryDef) {
            startInlineFragment("MoneyV2");
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public SellingPlanCheckoutChargeValueQuery onSellingPlanCheckoutChargePercentageValue(SellingPlanCheckoutChargePercentageValueQueryDefinition queryDef) {
            startInlineFragment("SellingPlanCheckoutChargePercentageValue");
            queryDef.define(new SellingPlanCheckoutChargePercentageValueQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface SellingPlanCheckoutChargeValue {
        String getGraphQlTypeName();
    }

    /**
    * The portion of the price to be charged at checkout.
    */
    public static class UnknownSellingPlanCheckoutChargeValue extends AbstractResponse<UnknownSellingPlanCheckoutChargeValue> implements SellingPlanCheckoutChargeValue {
        public UnknownSellingPlanCheckoutChargeValue() {
        }

        public UnknownSellingPlanCheckoutChargeValue(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static SellingPlanCheckoutChargeValue create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "MoneyV2": {
                    return new MoneyV2(fields);
                }

                case "SellingPlanCheckoutChargePercentageValue": {
                    return new SellingPlanCheckoutChargePercentageValue(fields);
                }

                default: {
                    return new UnknownSellingPlanCheckoutChargeValue(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface SellingPlanConnectionQueryDefinition {
        void define(SellingPlanConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple SellingPlans.
    */
    public static class SellingPlanConnectionQuery extends Query<SellingPlanConnectionQuery> {
        SellingPlanConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public SellingPlanConnectionQuery edges(SellingPlanEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in SellingPlanEdge.
        */
        public SellingPlanConnectionQuery nodes(SellingPlanQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public SellingPlanConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple SellingPlans.
    */
    public static class SellingPlanConnection extends AbstractResponse<SellingPlanConnection> {
        public SellingPlanConnection() {
        }

        public SellingPlanConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<SellingPlanEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<SellingPlan> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlan(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanConnection";
        }

        /**
        * A list of edges.
        */

        public List<SellingPlanEdge> getEdges() {
            return (List<SellingPlanEdge>) get("edges");
        }

        public SellingPlanConnection setEdges(List<SellingPlanEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in SellingPlanEdge.
        */

        public List<SellingPlan> getNodes() {
            return (List<SellingPlan>) get("nodes");
        }

        public SellingPlanConnection setNodes(List<SellingPlan> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public SellingPlanConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanDeliveryPolicyQueryDefinition {
        void define(SellingPlanDeliveryPolicyQuery _queryBuilder);
    }

    /**
    * The selling plan delivery policy.
    */
    public static class SellingPlanDeliveryPolicyQuery extends Query<SellingPlanDeliveryPolicyQuery> {
        SellingPlanDeliveryPolicyQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public SellingPlanDeliveryPolicyQuery onSellingPlanRecurringDeliveryPolicy(SellingPlanRecurringDeliveryPolicyQueryDefinition queryDef) {
            startInlineFragment("SellingPlanRecurringDeliveryPolicy");
            queryDef.define(new SellingPlanRecurringDeliveryPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface SellingPlanDeliveryPolicy {
        String getGraphQlTypeName();
    }

    /**
    * The selling plan delivery policy.
    */
    public static class UnknownSellingPlanDeliveryPolicy extends AbstractResponse<UnknownSellingPlanDeliveryPolicy> implements SellingPlanDeliveryPolicy {
        public UnknownSellingPlanDeliveryPolicy() {
        }

        public UnknownSellingPlanDeliveryPolicy(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static SellingPlanDeliveryPolicy create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "SellingPlanRecurringDeliveryPolicy": {
                    return new SellingPlanRecurringDeliveryPolicy(fields);
                }

                default: {
                    return new UnknownSellingPlanDeliveryPolicy(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface SellingPlanEdgeQueryDefinition {
        void define(SellingPlanEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one SellingPlan and a cursor during pagination.
    */
    public static class SellingPlanEdgeQuery extends Query<SellingPlanEdgeQuery> {
        SellingPlanEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public SellingPlanEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of SellingPlanEdge.
        */
        public SellingPlanEdgeQuery node(SellingPlanQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one SellingPlan and a cursor during pagination.
    */
    public static class SellingPlanEdge extends AbstractResponse<SellingPlanEdge> {
        public SellingPlanEdge() {
        }

        public SellingPlanEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new SellingPlan(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public SellingPlanEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of SellingPlanEdge.
        */

        public SellingPlan getNode() {
            return (SellingPlan) get("node");
        }

        public SellingPlanEdge setNode(SellingPlan arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanFixedAmountPriceAdjustmentQueryDefinition {
        void define(SellingPlanFixedAmountPriceAdjustmentQuery _queryBuilder);
    }

    /**
    * A fixed amount that's deducted from the original variant price. For example, $10.00 off.
    */
    public static class SellingPlanFixedAmountPriceAdjustmentQuery extends Query<SellingPlanFixedAmountPriceAdjustmentQuery> {
        SellingPlanFixedAmountPriceAdjustmentQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The money value of the price adjustment.
        */
        public SellingPlanFixedAmountPriceAdjustmentQuery adjustmentAmount(MoneyV2QueryDefinition queryDef) {
            startField("adjustmentAmount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * A fixed amount that's deducted from the original variant price. For example, $10.00 off.
    */
    public static class SellingPlanFixedAmountPriceAdjustment extends AbstractResponse<SellingPlanFixedAmountPriceAdjustment> implements SellingPlanPriceAdjustmentValue {
        public SellingPlanFixedAmountPriceAdjustment() {
        }

        public SellingPlanFixedAmountPriceAdjustment(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "adjustmentAmount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanFixedAmountPriceAdjustment";
        }

        /**
        * The money value of the price adjustment.
        */

        public MoneyV2 getAdjustmentAmount() {
            return (MoneyV2) get("adjustmentAmount");
        }

        public SellingPlanFixedAmountPriceAdjustment setAdjustmentAmount(MoneyV2 arg) {
            optimisticData.put(getKey("adjustmentAmount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "adjustmentAmount": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanFixedPriceAdjustmentQueryDefinition {
        void define(SellingPlanFixedPriceAdjustmentQuery _queryBuilder);
    }

    /**
    * A fixed price adjustment for a variant that's purchased with a selling plan.
    */
    public static class SellingPlanFixedPriceAdjustmentQuery extends Query<SellingPlanFixedPriceAdjustmentQuery> {
        SellingPlanFixedPriceAdjustmentQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A new price of the variant when it's purchased with the selling plan.
        */
        public SellingPlanFixedPriceAdjustmentQuery price(MoneyV2QueryDefinition queryDef) {
            startField("price");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * A fixed price adjustment for a variant that's purchased with a selling plan.
    */
    public static class SellingPlanFixedPriceAdjustment extends AbstractResponse<SellingPlanFixedPriceAdjustment> implements SellingPlanPriceAdjustmentValue {
        public SellingPlanFixedPriceAdjustment() {
        }

        public SellingPlanFixedPriceAdjustment(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "price": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanFixedPriceAdjustment";
        }

        /**
        * A new price of the variant when it's purchased with the selling plan.
        */

        public MoneyV2 getPrice() {
            return (MoneyV2) get("price");
        }

        public SellingPlanFixedPriceAdjustment setPrice(MoneyV2 arg) {
            optimisticData.put(getKey("price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "price": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanGroupQueryDefinition {
        void define(SellingPlanGroupQuery _queryBuilder);
    }

    /**
    * Represents a selling method. For example, 'Subscribe and save' is a selling method where customers
    * pay for goods or services per delivery. A selling plan group contains individual selling plans.
    */
    public static class SellingPlanGroupQuery extends Query<SellingPlanGroupQuery> {
        SellingPlanGroupQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A display friendly name for the app that created the selling plan group.
        */
        public SellingPlanGroupQuery appName() {
            startField("appName");

            return this;
        }

        /**
        * The name of the selling plan group.
        */
        public SellingPlanGroupQuery name() {
            startField("name");

            return this;
        }

        /**
        * Represents the selling plan options available in the drop-down list in the storefront. For example,
        * 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the
        * product.
        */
        public SellingPlanGroupQuery options(SellingPlanGroupOptionQueryDefinition queryDef) {
            startField("options");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanGroupOptionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class SellingPlansArguments extends Arguments {
            SellingPlansArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * Returns up to the first `n` elements from the list.
            */
            public SellingPlansArguments first(Integer value) {
                if (value != null) {
                    startArgument("first");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come after the specified cursor.
            */
            public SellingPlansArguments after(String value) {
                if (value != null) {
                    startArgument("after");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Returns up to the last `n` elements from the list.
            */
            public SellingPlansArguments last(Integer value) {
                if (value != null) {
                    startArgument("last");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * Returns the elements that come before the specified cursor.
            */
            public SellingPlansArguments before(String value) {
                if (value != null) {
                    startArgument("before");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }

            /**
            * Reverse the order of the underlying list.
            */
            public SellingPlansArguments reverse(Boolean value) {
                if (value != null) {
                    startArgument("reverse");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface SellingPlansArgumentsDefinition {
            void define(SellingPlansArguments args);
        }

        /**
        * A list of selling plans in a selling plan group. A selling plan is a representation of how products
        * and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of
        * prepaid granola, delivered weekly'.
        */
        public SellingPlanGroupQuery sellingPlans(SellingPlanConnectionQueryDefinition queryDef) {
            return sellingPlans(args -> {}, queryDef);
        }

        /**
        * A list of selling plans in a selling plan group. A selling plan is a representation of how products
        * and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of
        * prepaid granola, delivered weekly'.
        */
        public SellingPlanGroupQuery sellingPlans(SellingPlansArgumentsDefinition argsDef, SellingPlanConnectionQueryDefinition queryDef) {
            startField("sellingPlans");

            SellingPlansArguments args = new SellingPlansArguments(_queryBuilder);
            argsDef.define(args);
            SellingPlansArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanConnectionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a selling method. For example, 'Subscribe and save' is a selling method where customers
    * pay for goods or services per delivery. A selling plan group contains individual selling plans.
    */
    public static class SellingPlanGroup extends AbstractResponse<SellingPlanGroup> {
        public SellingPlanGroup() {
        }

        public SellingPlanGroup(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "appName": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "options": {
                        List<SellingPlanGroupOption> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanGroupOption(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "sellingPlans": {
                        responseData.put(key, new SellingPlanConnection(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanGroup";
        }

        /**
        * A display friendly name for the app that created the selling plan group.
        */

        public String getAppName() {
            return (String) get("appName");
        }

        public SellingPlanGroup setAppName(String arg) {
            optimisticData.put(getKey("appName"), arg);
            return this;
        }

        /**
        * The name of the selling plan group.
        */

        public String getName() {
            return (String) get("name");
        }

        public SellingPlanGroup setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * Represents the selling plan options available in the drop-down list in the storefront. For example,
        * 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the
        * product.
        */

        public List<SellingPlanGroupOption> getOptions() {
            return (List<SellingPlanGroupOption>) get("options");
        }

        public SellingPlanGroup setOptions(List<SellingPlanGroupOption> arg) {
            optimisticData.put(getKey("options"), arg);
            return this;
        }

        /**
        * A list of selling plans in a selling plan group. A selling plan is a representation of how products
        * and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of
        * prepaid granola, delivered weekly'.
        */

        public SellingPlanConnection getSellingPlans() {
            return (SellingPlanConnection) get("sellingPlans");
        }

        public SellingPlanGroup setSellingPlans(SellingPlanConnection arg) {
            optimisticData.put(getKey("sellingPlans"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "appName": return false;

                case "name": return false;

                case "options": return true;

                case "sellingPlans": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanGroupConnectionQueryDefinition {
        void define(SellingPlanGroupConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple SellingPlanGroups.
    */
    public static class SellingPlanGroupConnectionQuery extends Query<SellingPlanGroupConnectionQuery> {
        SellingPlanGroupConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public SellingPlanGroupConnectionQuery edges(SellingPlanGroupEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanGroupEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in SellingPlanGroupEdge.
        */
        public SellingPlanGroupConnectionQuery nodes(SellingPlanGroupQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanGroupQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public SellingPlanGroupConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple SellingPlanGroups.
    */
    public static class SellingPlanGroupConnection extends AbstractResponse<SellingPlanGroupConnection> {
        public SellingPlanGroupConnection() {
        }

        public SellingPlanGroupConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<SellingPlanGroupEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanGroupEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<SellingPlanGroup> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SellingPlanGroup(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanGroupConnection";
        }

        /**
        * A list of edges.
        */

        public List<SellingPlanGroupEdge> getEdges() {
            return (List<SellingPlanGroupEdge>) get("edges");
        }

        public SellingPlanGroupConnection setEdges(List<SellingPlanGroupEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in SellingPlanGroupEdge.
        */

        public List<SellingPlanGroup> getNodes() {
            return (List<SellingPlanGroup>) get("nodes");
        }

        public SellingPlanGroupConnection setNodes(List<SellingPlanGroup> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public SellingPlanGroupConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanGroupEdgeQueryDefinition {
        void define(SellingPlanGroupEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
    */
    public static class SellingPlanGroupEdgeQuery extends Query<SellingPlanGroupEdgeQuery> {
        SellingPlanGroupEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public SellingPlanGroupEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of SellingPlanGroupEdge.
        */
        public SellingPlanGroupEdgeQuery node(SellingPlanGroupQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanGroupQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
    */
    public static class SellingPlanGroupEdge extends AbstractResponse<SellingPlanGroupEdge> {
        public SellingPlanGroupEdge() {
        }

        public SellingPlanGroupEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new SellingPlanGroup(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanGroupEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public SellingPlanGroupEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of SellingPlanGroupEdge.
        */

        public SellingPlanGroup getNode() {
            return (SellingPlanGroup) get("node");
        }

        public SellingPlanGroupEdge setNode(SellingPlanGroup arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface SellingPlanGroupOptionQueryDefinition {
        void define(SellingPlanGroupOptionQuery _queryBuilder);
    }

    /**
    * Represents an option on a selling plan group that's available in the drop-down list in the
    * storefront.
    * Individual selling plans contribute their options to the associated selling plan group. For example,
    * a selling plan group might have an option called `option1: Delivery every`. One selling plan in that
    * group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan
    * could contribute `option1: 4 weeks`, with different pricing.
    */
    public static class SellingPlanGroupOptionQuery extends Query<SellingPlanGroupOptionQuery> {
        SellingPlanGroupOptionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The name of the option. For example, 'Delivery every'.
        */
        public SellingPlanGroupOptionQuery name() {
            startField("name");

            return this;
        }

        /**
        * The values for the options specified by the selling plans in the selling plan group. For example, '1
        * week', '2 weeks', '3 weeks'.
        */
        public SellingPlanGroupOptionQuery values() {
            startField("values");

            return this;
        }
    }

    /**
    * Represents an option on a selling plan group that's available in the drop-down list in the
    * storefront.
    * Individual selling plans contribute their options to the associated selling plan group. For example,
    * a selling plan group might have an option called `option1: Delivery every`. One selling plan in that
    * group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan
    * could contribute `option1: 4 weeks`, with different pricing.
    */
    public static class SellingPlanGroupOption extends AbstractResponse<SellingPlanGroupOption> {
        public SellingPlanGroupOption() {
        }

        public SellingPlanGroupOption(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "values": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanGroupOption";
        }

        /**
        * The name of the option. For example, 'Delivery every'.
        */

        public String getName() {
            return (String) get("name");
        }

        public SellingPlanGroupOption setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The values for the options specified by the selling plans in the selling plan group. For example, '1
        * week', '2 weeks', '3 weeks'.
        */

        public List<String> getValues() {
            return (List<String>) get("values");
        }

        public SellingPlanGroupOption setValues(List<String> arg) {
            optimisticData.put(getKey("values"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "name": return false;

                case "values": return false;

                default: return false;
            }
        }
    }

    /**
    * Represents a valid selling plan interval.
    */
    public enum SellingPlanInterval {
        /**
        * Day interval.
        */
        DAY,

        /**
        * Month interval.
        */
        MONTH,

        /**
        * Week interval.
        */
        WEEK,

        /**
        * Year interval.
        */
        YEAR,

        UNKNOWN_VALUE;

        public static SellingPlanInterval fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "DAY": {
                    return DAY;
                }

                case "MONTH": {
                    return MONTH;
                }

                case "WEEK": {
                    return WEEK;
                }

                case "YEAR": {
                    return YEAR;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case DAY: {
                    return "DAY";
                }

                case MONTH: {
                    return "MONTH";
                }

                case WEEK: {
                    return "WEEK";
                }

                case YEAR: {
                    return "YEAR";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface SellingPlanOptionQueryDefinition {
        void define(SellingPlanOptionQuery _queryBuilder);
    }

    /**
    * An option provided by a Selling Plan.
    */
    public static class SellingPlanOptionQuery extends Query<SellingPlanOptionQuery> {
        SellingPlanOptionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The name of the option (ie "Delivery every").
        */
        public SellingPlanOptionQuery name() {
            startField("name");

            return this;
        }

        /**
        * The value of the option (ie "Month").
        */
        public SellingPlanOptionQuery value() {
            startField("value");

            return this;
        }
    }

    /**
    * An option provided by a Selling Plan.
    */
    public static class SellingPlanOption extends AbstractResponse<SellingPlanOption> {
        public SellingPlanOption() {
        }

        public SellingPlanOption(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "value": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanOption";
        }

        /**
        * The name of the option (ie "Delivery every").
        */

        public String getName() {
            return (String) get("name");
        }

        public SellingPlanOption setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * The value of the option (ie "Month").
        */

        public String getValue() {
            return (String) get("value");
        }

        public SellingPlanOption setValue(String arg) {
            optimisticData.put(getKey("value"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "name": return false;

                case "value": return false;

                default: return false;
            }
        }
    }

    public interface SellingPlanPercentagePriceAdjustmentQueryDefinition {
        void define(SellingPlanPercentagePriceAdjustmentQuery _queryBuilder);
    }

    /**
    * A percentage amount that's deducted from the original variant price. For example, 10% off.
    */
    public static class SellingPlanPercentagePriceAdjustmentQuery extends Query<SellingPlanPercentagePriceAdjustmentQuery> {
        SellingPlanPercentagePriceAdjustmentQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The percentage value of the price adjustment.
        */
        public SellingPlanPercentagePriceAdjustmentQuery adjustmentPercentage() {
            startField("adjustmentPercentage");

            return this;
        }
    }

    /**
    * A percentage amount that's deducted from the original variant price. For example, 10% off.
    */
    public static class SellingPlanPercentagePriceAdjustment extends AbstractResponse<SellingPlanPercentagePriceAdjustment> implements SellingPlanPriceAdjustmentValue {
        public SellingPlanPercentagePriceAdjustment() {
        }

        public SellingPlanPercentagePriceAdjustment(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "adjustmentPercentage": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanPercentagePriceAdjustment";
        }

        /**
        * The percentage value of the price adjustment.
        */

        public Integer getAdjustmentPercentage() {
            return (Integer) get("adjustmentPercentage");
        }

        public SellingPlanPercentagePriceAdjustment setAdjustmentPercentage(Integer arg) {
            optimisticData.put(getKey("adjustmentPercentage"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "adjustmentPercentage": return false;

                default: return false;
            }
        }
    }

    public interface SellingPlanPriceAdjustmentQueryDefinition {
        void define(SellingPlanPriceAdjustmentQuery _queryBuilder);
    }

    /**
    * Represents by how much the price of a variant associated with a selling plan is adjusted. Each
    * variant can have up to two price adjustments. If a variant has multiple price adjustments, then the
    * first price adjustment applies when the variant is initially purchased. The second price adjustment
    * applies after a certain number of orders (specified by the `orderCount` field) are made. If a
    * selling plan doesn't have any price adjustments, then the unadjusted price of the variant is the
    * effective price.
    */
    public static class SellingPlanPriceAdjustmentQuery extends Query<SellingPlanPriceAdjustmentQuery> {
        SellingPlanPriceAdjustmentQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The type of price adjustment. An adjustment value can have one of three types: percentage, amount
        * off, or a new price.
        */
        public SellingPlanPriceAdjustmentQuery adjustmentValue(SellingPlanPriceAdjustmentValueQueryDefinition queryDef) {
            startField("adjustmentValue");

            _queryBuilder.append('{');
            queryDef.define(new SellingPlanPriceAdjustmentValueQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The number of orders that the price adjustment applies to. If the price adjustment always applies,
        * then this field is `null`.
        */
        public SellingPlanPriceAdjustmentQuery orderCount() {
            startField("orderCount");

            return this;
        }
    }

    /**
    * Represents by how much the price of a variant associated with a selling plan is adjusted. Each
    * variant can have up to two price adjustments. If a variant has multiple price adjustments, then the
    * first price adjustment applies when the variant is initially purchased. The second price adjustment
    * applies after a certain number of orders (specified by the `orderCount` field) are made. If a
    * selling plan doesn't have any price adjustments, then the unadjusted price of the variant is the
    * effective price.
    */
    public static class SellingPlanPriceAdjustment extends AbstractResponse<SellingPlanPriceAdjustment> {
        public SellingPlanPriceAdjustment() {
        }

        public SellingPlanPriceAdjustment(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "adjustmentValue": {
                        responseData.put(key, UnknownSellingPlanPriceAdjustmentValue.create(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "orderCount": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanPriceAdjustment";
        }

        /**
        * The type of price adjustment. An adjustment value can have one of three types: percentage, amount
        * off, or a new price.
        */

        public SellingPlanPriceAdjustmentValue getAdjustmentValue() {
            return (SellingPlanPriceAdjustmentValue) get("adjustmentValue");
        }

        public SellingPlanPriceAdjustment setAdjustmentValue(SellingPlanPriceAdjustmentValue arg) {
            optimisticData.put(getKey("adjustmentValue"), arg);
            return this;
        }

        /**
        * The number of orders that the price adjustment applies to. If the price adjustment always applies,
        * then this field is `null`.
        */

        public Integer getOrderCount() {
            return (Integer) get("orderCount");
        }

        public SellingPlanPriceAdjustment setOrderCount(Integer arg) {
            optimisticData.put(getKey("orderCount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "adjustmentValue": return false;

                case "orderCount": return false;

                default: return false;
            }
        }
    }

    public interface SellingPlanPriceAdjustmentValueQueryDefinition {
        void define(SellingPlanPriceAdjustmentValueQuery _queryBuilder);
    }

    /**
    * Represents by how much the price of a variant associated with a selling plan is adjusted. Each
    * variant can have up to two price adjustments.
    */
    public static class SellingPlanPriceAdjustmentValueQuery extends Query<SellingPlanPriceAdjustmentValueQuery> {
        SellingPlanPriceAdjustmentValueQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        public SellingPlanPriceAdjustmentValueQuery onSellingPlanFixedAmountPriceAdjustment(SellingPlanFixedAmountPriceAdjustmentQueryDefinition queryDef) {
            startInlineFragment("SellingPlanFixedAmountPriceAdjustment");
            queryDef.define(new SellingPlanFixedAmountPriceAdjustmentQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public SellingPlanPriceAdjustmentValueQuery onSellingPlanFixedPriceAdjustment(SellingPlanFixedPriceAdjustmentQueryDefinition queryDef) {
            startInlineFragment("SellingPlanFixedPriceAdjustment");
            queryDef.define(new SellingPlanFixedPriceAdjustmentQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public SellingPlanPriceAdjustmentValueQuery onSellingPlanPercentagePriceAdjustment(SellingPlanPercentagePriceAdjustmentQueryDefinition queryDef) {
            startInlineFragment("SellingPlanPercentagePriceAdjustment");
            queryDef.define(new SellingPlanPercentagePriceAdjustmentQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface SellingPlanPriceAdjustmentValue {
        String getGraphQlTypeName();
    }

    /**
    * Represents by how much the price of a variant associated with a selling plan is adjusted. Each
    * variant can have up to two price adjustments.
    */
    public static class UnknownSellingPlanPriceAdjustmentValue extends AbstractResponse<UnknownSellingPlanPriceAdjustmentValue> implements SellingPlanPriceAdjustmentValue {
        public UnknownSellingPlanPriceAdjustmentValue() {
        }

        public UnknownSellingPlanPriceAdjustmentValue(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static SellingPlanPriceAdjustmentValue create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "SellingPlanFixedAmountPriceAdjustment": {
                    return new SellingPlanFixedAmountPriceAdjustment(fields);
                }

                case "SellingPlanFixedPriceAdjustment": {
                    return new SellingPlanFixedPriceAdjustment(fields);
                }

                case "SellingPlanPercentagePriceAdjustment": {
                    return new SellingPlanPercentagePriceAdjustment(fields);
                }

                default: {
                    return new UnknownSellingPlanPriceAdjustmentValue(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                default: return false;
            }
        }
    }

    public interface SellingPlanRecurringBillingPolicyQueryDefinition {
        void define(SellingPlanRecurringBillingPolicyQuery _queryBuilder);
    }

    /**
    * The recurring billing policy for the selling plan.
    */
    public static class SellingPlanRecurringBillingPolicyQuery extends Query<SellingPlanRecurringBillingPolicyQuery> {
        SellingPlanRecurringBillingPolicyQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The billing frequency, it can be either: day, week, month or year.
        */
        public SellingPlanRecurringBillingPolicyQuery interval() {
            startField("interval");

            return this;
        }

        /**
        * The number of intervals between billings.
        */
        public SellingPlanRecurringBillingPolicyQuery intervalCount() {
            startField("intervalCount");

            return this;
        }
    }

    /**
    * The recurring billing policy for the selling plan.
    */
    public static class SellingPlanRecurringBillingPolicy extends AbstractResponse<SellingPlanRecurringBillingPolicy> implements SellingPlanBillingPolicy {
        public SellingPlanRecurringBillingPolicy() {
        }

        public SellingPlanRecurringBillingPolicy(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "interval": {
                        responseData.put(key, SellingPlanInterval.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "intervalCount": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanRecurringBillingPolicy";
        }

        /**
        * The billing frequency, it can be either: day, week, month or year.
        */

        public SellingPlanInterval getInterval() {
            return (SellingPlanInterval) get("interval");
        }

        public SellingPlanRecurringBillingPolicy setInterval(SellingPlanInterval arg) {
            optimisticData.put(getKey("interval"), arg);
            return this;
        }

        /**
        * The number of intervals between billings.
        */

        public Integer getIntervalCount() {
            return (Integer) get("intervalCount");
        }

        public SellingPlanRecurringBillingPolicy setIntervalCount(Integer arg) {
            optimisticData.put(getKey("intervalCount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "interval": return false;

                case "intervalCount": return false;

                default: return false;
            }
        }
    }

    public interface SellingPlanRecurringDeliveryPolicyQueryDefinition {
        void define(SellingPlanRecurringDeliveryPolicyQuery _queryBuilder);
    }

    /**
    * The recurring delivery policy for the selling plan.
    */
    public static class SellingPlanRecurringDeliveryPolicyQuery extends Query<SellingPlanRecurringDeliveryPolicyQuery> {
        SellingPlanRecurringDeliveryPolicyQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The delivery frequency, it can be either: day, week, month or year.
        */
        public SellingPlanRecurringDeliveryPolicyQuery interval() {
            startField("interval");

            return this;
        }

        /**
        * The number of intervals between deliveries.
        */
        public SellingPlanRecurringDeliveryPolicyQuery intervalCount() {
            startField("intervalCount");

            return this;
        }
    }

    /**
    * The recurring delivery policy for the selling plan.
    */
    public static class SellingPlanRecurringDeliveryPolicy extends AbstractResponse<SellingPlanRecurringDeliveryPolicy> implements SellingPlanDeliveryPolicy {
        public SellingPlanRecurringDeliveryPolicy() {
        }

        public SellingPlanRecurringDeliveryPolicy(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "interval": {
                        responseData.put(key, SellingPlanInterval.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "intervalCount": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SellingPlanRecurringDeliveryPolicy";
        }

        /**
        * The delivery frequency, it can be either: day, week, month or year.
        */

        public SellingPlanInterval getInterval() {
            return (SellingPlanInterval) get("interval");
        }

        public SellingPlanRecurringDeliveryPolicy setInterval(SellingPlanInterval arg) {
            optimisticData.put(getKey("interval"), arg);
            return this;
        }

        /**
        * The number of intervals between deliveries.
        */

        public Integer getIntervalCount() {
            return (Integer) get("intervalCount");
        }

        public SellingPlanRecurringDeliveryPolicy setIntervalCount(Integer arg) {
            optimisticData.put(getKey("intervalCount"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "interval": return false;

                case "intervalCount": return false;

                default: return false;
            }
        }
    }

    public interface ShopQueryDefinition {
        void define(ShopQuery _queryBuilder);
    }

    /**
    * Shop represents a collection of the general settings and information about the shop.
    */
    public static class ShopQuery extends Query<ShopQuery> {
        ShopQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The shop's branding configuration.
        */
        public ShopQuery brand(BrandQueryDefinition queryDef) {
            startField("brand");

            _queryBuilder.append('{');
            queryDef.define(new BrandQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A description of the shop.
        */
        public ShopQuery description() {
            startField("description");

            return this;
        }

        public class MetafieldArguments extends Arguments {
            MetafieldArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
            */
            public MetafieldArguments namespace(String value) {
                if (value != null) {
                    startArgument("namespace");
                    Query.appendQuotedString(_queryBuilder, value.toString());
                }
                return this;
            }
        }

        public interface MetafieldArgumentsDefinition {
            void define(MetafieldArguments args);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public ShopQuery metafield(String key, MetafieldQueryDefinition queryDef) {
            return metafield(key, args -> {}, queryDef);
        }

        /**
        * Returns a metafield found by namespace and key.
        */
        public ShopQuery metafield(String key, MetafieldArgumentsDefinition argsDef, MetafieldQueryDefinition queryDef) {
            startField("metafield");

            _queryBuilder.append("(key:");
            Query.appendQuotedString(_queryBuilder, key.toString());

            argsDef.define(new MetafieldArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */
        public ShopQuery metafields(List<HasMetafieldsIdentifier> identifiers, MetafieldQueryDefinition queryDef) {
            startField("metafields");

            _queryBuilder.append("(identifiers:");
            _queryBuilder.append('[');
            {
                String listSeperator1 = "";
                for (HasMetafieldsIdentifier item1 : identifiers) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
            }
            _queryBuilder.append(']');

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new MetafieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A string representing the way currency is formatted when the currency isn’t specified.
        */
        public ShopQuery moneyFormat() {
            startField("moneyFormat");

            return this;
        }

        /**
        * The shop’s name.
        */
        public ShopQuery name() {
            startField("name");

            return this;
        }

        /**
        * Settings related to payments.
        */
        public ShopQuery paymentSettings(PaymentSettingsQueryDefinition queryDef) {
            startField("paymentSettings");

            _queryBuilder.append('{');
            queryDef.define(new PaymentSettingsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The primary domain of the shop’s Online Store.
        */
        public ShopQuery primaryDomain(DomainQueryDefinition queryDef) {
            startField("primaryDomain");

            _queryBuilder.append('{');
            queryDef.define(new DomainQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The shop’s privacy policy.
        */
        public ShopQuery privacyPolicy(ShopPolicyQueryDefinition queryDef) {
            startField("privacyPolicy");

            _queryBuilder.append('{');
            queryDef.define(new ShopPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The shop’s refund policy.
        */
        public ShopQuery refundPolicy(ShopPolicyQueryDefinition queryDef) {
            startField("refundPolicy");

            _queryBuilder.append('{');
            queryDef.define(new ShopPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The shop’s shipping policy.
        */
        public ShopQuery shippingPolicy(ShopPolicyQueryDefinition queryDef) {
            startField("shippingPolicy");

            _queryBuilder.append('{');
            queryDef.define(new ShopPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Countries that the shop ships to.
        */
        public ShopQuery shipsToCountries() {
            startField("shipsToCountries");

            return this;
        }

        /**
        * The shop’s subscription policy.
        */
        public ShopQuery subscriptionPolicy(ShopPolicyWithDefaultQueryDefinition queryDef) {
            startField("subscriptionPolicy");

            _queryBuilder.append('{');
            queryDef.define(new ShopPolicyWithDefaultQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The shop’s terms of service.
        */
        public ShopQuery termsOfService(ShopPolicyQueryDefinition queryDef) {
            startField("termsOfService");

            _queryBuilder.append('{');
            queryDef.define(new ShopPolicyQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Shop represents a collection of the general settings and information about the shop.
    */
    public static class Shop extends AbstractResponse<Shop> implements HasMetafields, MetafieldParentResource, Node {
        public Shop() {
        }

        public Shop(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "brand": {
                        Brand optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Brand(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "metafield": {
                        Metafield optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Metafield(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "metafields": {
                        List<Metafield> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            Metafield optional2 = null;
                            if (!element1.isJsonNull()) {
                                optional2 = new Metafield(jsonAsObject(element1, key));
                            }

                            list1.add(optional2);
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "moneyFormat": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "paymentSettings": {
                        responseData.put(key, new PaymentSettings(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "primaryDomain": {
                        responseData.put(key, new Domain(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "privacyPolicy": {
                        ShopPolicy optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPolicy(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "refundPolicy": {
                        ShopPolicy optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPolicy(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shippingPolicy": {
                        ShopPolicy optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPolicy(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shipsToCountries": {
                        List<CountryCode> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(CountryCode.fromGraphQl(jsonAsString(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "subscriptionPolicy": {
                        ShopPolicyWithDefault optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPolicyWithDefault(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "termsOfService": {
                        ShopPolicy optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPolicy(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Shop(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Shop";
        }

        /**
        * The shop's branding configuration.
        */

        public Brand getBrand() {
            return (Brand) get("brand");
        }

        public Shop setBrand(Brand arg) {
            optimisticData.put(getKey("brand"), arg);
            return this;
        }

        /**
        * A description of the shop.
        */

        public String getDescription() {
            return (String) get("description");
        }

        public Shop setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Returns a metafield found by namespace and key.
        */

        public Metafield getMetafield() {
            return (Metafield) get("metafield");
        }

        public Shop setMetafield(Metafield arg) {
            optimisticData.put(getKey("metafield"), arg);
            return this;
        }

        /**
        * The metafields associated with the resource matching the supplied list of namespaces and keys.
        */

        public List<Metafield> getMetafields() {
            return (List<Metafield>) get("metafields");
        }

        public Shop setMetafields(List<Metafield> arg) {
            optimisticData.put(getKey("metafields"), arg);
            return this;
        }

        /**
        * A string representing the way currency is formatted when the currency isn’t specified.
        */

        public String getMoneyFormat() {
            return (String) get("moneyFormat");
        }

        public Shop setMoneyFormat(String arg) {
            optimisticData.put(getKey("moneyFormat"), arg);
            return this;
        }

        /**
        * The shop’s name.
        */

        public String getName() {
            return (String) get("name");
        }

        public Shop setName(String arg) {
            optimisticData.put(getKey("name"), arg);
            return this;
        }

        /**
        * Settings related to payments.
        */

        public PaymentSettings getPaymentSettings() {
            return (PaymentSettings) get("paymentSettings");
        }

        public Shop setPaymentSettings(PaymentSettings arg) {
            optimisticData.put(getKey("paymentSettings"), arg);
            return this;
        }

        /**
        * The primary domain of the shop’s Online Store.
        */

        public Domain getPrimaryDomain() {
            return (Domain) get("primaryDomain");
        }

        public Shop setPrimaryDomain(Domain arg) {
            optimisticData.put(getKey("primaryDomain"), arg);
            return this;
        }

        /**
        * The shop’s privacy policy.
        */

        public ShopPolicy getPrivacyPolicy() {
            return (ShopPolicy) get("privacyPolicy");
        }

        public Shop setPrivacyPolicy(ShopPolicy arg) {
            optimisticData.put(getKey("privacyPolicy"), arg);
            return this;
        }

        /**
        * The shop’s refund policy.
        */

        public ShopPolicy getRefundPolicy() {
            return (ShopPolicy) get("refundPolicy");
        }

        public Shop setRefundPolicy(ShopPolicy arg) {
            optimisticData.put(getKey("refundPolicy"), arg);
            return this;
        }

        /**
        * The shop’s shipping policy.
        */

        public ShopPolicy getShippingPolicy() {
            return (ShopPolicy) get("shippingPolicy");
        }

        public Shop setShippingPolicy(ShopPolicy arg) {
            optimisticData.put(getKey("shippingPolicy"), arg);
            return this;
        }

        /**
        * Countries that the shop ships to.
        */

        public List<CountryCode> getShipsToCountries() {
            return (List<CountryCode>) get("shipsToCountries");
        }

        public Shop setShipsToCountries(List<CountryCode> arg) {
            optimisticData.put(getKey("shipsToCountries"), arg);
            return this;
        }

        /**
        * The shop’s subscription policy.
        */

        public ShopPolicyWithDefault getSubscriptionPolicy() {
            return (ShopPolicyWithDefault) get("subscriptionPolicy");
        }

        public Shop setSubscriptionPolicy(ShopPolicyWithDefault arg) {
            optimisticData.put(getKey("subscriptionPolicy"), arg);
            return this;
        }

        /**
        * The shop’s terms of service.
        */

        public ShopPolicy getTermsOfService() {
            return (ShopPolicy) get("termsOfService");
        }

        public Shop setTermsOfService(ShopPolicy arg) {
            optimisticData.put(getKey("termsOfService"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "brand": return true;

                case "description": return false;

                case "id": return false;

                case "metafield": return true;

                case "metafields": return true;

                case "moneyFormat": return false;

                case "name": return false;

                case "paymentSettings": return true;

                case "primaryDomain": return true;

                case "privacyPolicy": return true;

                case "refundPolicy": return true;

                case "shippingPolicy": return true;

                case "shipsToCountries": return false;

                case "subscriptionPolicy": return true;

                case "termsOfService": return true;

                default: return false;
            }
        }
    }

    public interface ShopPayPaymentRequestQueryDefinition {
        void define(ShopPayPaymentRequestQuery _queryBuilder);
    }

    /**
    * Represents a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestQuery extends Query<ShopPayPaymentRequestQuery> {
        ShopPayPaymentRequestQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The delivery methods for the payment request.
        */
        public ShopPayPaymentRequestQuery deliveryMethods(ShopPayPaymentRequestDeliveryMethodQueryDefinition queryDef) {
            startField("deliveryMethods");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestDeliveryMethodQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The discount codes for the payment request.
        */
        public ShopPayPaymentRequestQuery discountCodes() {
            startField("discountCodes");

            return this;
        }

        /**
        * The discounts for the payment request order.
        */
        public ShopPayPaymentRequestQuery discounts(ShopPayPaymentRequestDiscountQueryDefinition queryDef) {
            startField("discounts");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestDiscountQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The line items for the payment request.
        */
        public ShopPayPaymentRequestQuery lineItems(ShopPayPaymentRequestLineItemQueryDefinition queryDef) {
            startField("lineItems");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestLineItemQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The locale for the payment request.
        */
        public ShopPayPaymentRequestQuery locale() {
            startField("locale");

            return this;
        }

        /**
        * The presentment currency for the payment request.
        */
        public ShopPayPaymentRequestQuery presentmentCurrency() {
            startField("presentmentCurrency");

            return this;
        }

        /**
        * The delivery method type for the payment request.
        */
        public ShopPayPaymentRequestQuery selectedDeliveryMethodType() {
            startField("selectedDeliveryMethodType");

            return this;
        }

        /**
        * The shipping address for the payment request.
        */
        public ShopPayPaymentRequestQuery shippingAddress(ShopPayPaymentRequestContactFieldQueryDefinition queryDef) {
            startField("shippingAddress");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestContactFieldQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The shipping lines for the payment request.
        */
        public ShopPayPaymentRequestQuery shippingLines(ShopPayPaymentRequestShippingLineQueryDefinition queryDef) {
            startField("shippingLines");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestShippingLineQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The subtotal amount for the payment request.
        */
        public ShopPayPaymentRequestQuery subtotal(MoneyV2QueryDefinition queryDef) {
            startField("subtotal");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total amount for the payment request.
        */
        public ShopPayPaymentRequestQuery total(MoneyV2QueryDefinition queryDef) {
            startField("total");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total shipping price for the payment request.
        */
        public ShopPayPaymentRequestQuery totalShippingPrice(ShopPayPaymentRequestTotalShippingPriceQueryDefinition queryDef) {
            startField("totalShippingPrice");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestTotalShippingPriceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The total tax for the payment request.
        */
        public ShopPayPaymentRequestQuery totalTax(MoneyV2QueryDefinition queryDef) {
            startField("totalTax");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequest extends AbstractResponse<ShopPayPaymentRequest> {
        public ShopPayPaymentRequest() {
        }

        public ShopPayPaymentRequest(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "deliveryMethods": {
                        List<ShopPayPaymentRequestDeliveryMethod> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ShopPayPaymentRequestDeliveryMethod(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "discountCodes": {
                        List<String> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(jsonAsString(element1, key));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "discounts": {
                        List<ShopPayPaymentRequestDiscount> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<ShopPayPaymentRequestDiscount> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(new ShopPayPaymentRequestDiscount(jsonAsObject(element1, key)));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "lineItems": {
                        List<ShopPayPaymentRequestLineItem> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ShopPayPaymentRequestLineItem(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "locale": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "presentmentCurrency": {
                        responseData.put(key, CurrencyCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "selectedDeliveryMethodType": {
                        responseData.put(key, ShopPayPaymentRequestDeliveryMethodType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "shippingAddress": {
                        ShopPayPaymentRequestContactField optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPayPaymentRequestContactField(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shippingLines": {
                        List<ShopPayPaymentRequestShippingLine> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ShopPayPaymentRequestShippingLine(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "subtotal": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "total": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "totalShippingPrice": {
                        ShopPayPaymentRequestTotalShippingPrice optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPayPaymentRequestTotalShippingPrice(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "totalTax": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequest";
        }

        /**
        * The delivery methods for the payment request.
        */

        public List<ShopPayPaymentRequestDeliveryMethod> getDeliveryMethods() {
            return (List<ShopPayPaymentRequestDeliveryMethod>) get("deliveryMethods");
        }

        public ShopPayPaymentRequest setDeliveryMethods(List<ShopPayPaymentRequestDeliveryMethod> arg) {
            optimisticData.put(getKey("deliveryMethods"), arg);
            return this;
        }

        /**
        * The discount codes for the payment request.
        */

        public List<String> getDiscountCodes() {
            return (List<String>) get("discountCodes");
        }

        public ShopPayPaymentRequest setDiscountCodes(List<String> arg) {
            optimisticData.put(getKey("discountCodes"), arg);
            return this;
        }

        /**
        * The discounts for the payment request order.
        */

        public List<ShopPayPaymentRequestDiscount> getDiscounts() {
            return (List<ShopPayPaymentRequestDiscount>) get("discounts");
        }

        public ShopPayPaymentRequest setDiscounts(List<ShopPayPaymentRequestDiscount> arg) {
            optimisticData.put(getKey("discounts"), arg);
            return this;
        }

        /**
        * The line items for the payment request.
        */

        public List<ShopPayPaymentRequestLineItem> getLineItems() {
            return (List<ShopPayPaymentRequestLineItem>) get("lineItems");
        }

        public ShopPayPaymentRequest setLineItems(List<ShopPayPaymentRequestLineItem> arg) {
            optimisticData.put(getKey("lineItems"), arg);
            return this;
        }

        /**
        * The locale for the payment request.
        */

        public String getLocale() {
            return (String) get("locale");
        }

        public ShopPayPaymentRequest setLocale(String arg) {
            optimisticData.put(getKey("locale"), arg);
            return this;
        }

        /**
        * The presentment currency for the payment request.
        */

        public CurrencyCode getPresentmentCurrency() {
            return (CurrencyCode) get("presentmentCurrency");
        }

        public ShopPayPaymentRequest setPresentmentCurrency(CurrencyCode arg) {
            optimisticData.put(getKey("presentmentCurrency"), arg);
            return this;
        }

        /**
        * The delivery method type for the payment request.
        */

        public ShopPayPaymentRequestDeliveryMethodType getSelectedDeliveryMethodType() {
            return (ShopPayPaymentRequestDeliveryMethodType) get("selectedDeliveryMethodType");
        }

        public ShopPayPaymentRequest setSelectedDeliveryMethodType(ShopPayPaymentRequestDeliveryMethodType arg) {
            optimisticData.put(getKey("selectedDeliveryMethodType"), arg);
            return this;
        }

        /**
        * The shipping address for the payment request.
        */

        public ShopPayPaymentRequestContactField getShippingAddress() {
            return (ShopPayPaymentRequestContactField) get("shippingAddress");
        }

        public ShopPayPaymentRequest setShippingAddress(ShopPayPaymentRequestContactField arg) {
            optimisticData.put(getKey("shippingAddress"), arg);
            return this;
        }

        /**
        * The shipping lines for the payment request.
        */

        public List<ShopPayPaymentRequestShippingLine> getShippingLines() {
            return (List<ShopPayPaymentRequestShippingLine>) get("shippingLines");
        }

        public ShopPayPaymentRequest setShippingLines(List<ShopPayPaymentRequestShippingLine> arg) {
            optimisticData.put(getKey("shippingLines"), arg);
            return this;
        }

        /**
        * The subtotal amount for the payment request.
        */

        public MoneyV2 getSubtotal() {
            return (MoneyV2) get("subtotal");
        }

        public ShopPayPaymentRequest setSubtotal(MoneyV2 arg) {
            optimisticData.put(getKey("subtotal"), arg);
            return this;
        }

        /**
        * The total amount for the payment request.
        */

        public MoneyV2 getTotal() {
            return (MoneyV2) get("total");
        }

        public ShopPayPaymentRequest setTotal(MoneyV2 arg) {
            optimisticData.put(getKey("total"), arg);
            return this;
        }

        /**
        * The total shipping price for the payment request.
        */

        public ShopPayPaymentRequestTotalShippingPrice getTotalShippingPrice() {
            return (ShopPayPaymentRequestTotalShippingPrice) get("totalShippingPrice");
        }

        public ShopPayPaymentRequest setTotalShippingPrice(ShopPayPaymentRequestTotalShippingPrice arg) {
            optimisticData.put(getKey("totalShippingPrice"), arg);
            return this;
        }

        /**
        * The total tax for the payment request.
        */

        public MoneyV2 getTotalTax() {
            return (MoneyV2) get("totalTax");
        }

        public ShopPayPaymentRequest setTotalTax(MoneyV2 arg) {
            optimisticData.put(getKey("totalTax"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "deliveryMethods": return true;

                case "discountCodes": return false;

                case "discounts": return true;

                case "lineItems": return true;

                case "locale": return false;

                case "presentmentCurrency": return false;

                case "selectedDeliveryMethodType": return false;

                case "shippingAddress": return true;

                case "shippingLines": return true;

                case "subtotal": return true;

                case "total": return true;

                case "totalShippingPrice": return true;

                case "totalTax": return true;

                default: return false;
            }
        }
    }

    public interface ShopPayPaymentRequestContactFieldQueryDefinition {
        void define(ShopPayPaymentRequestContactFieldQuery _queryBuilder);
    }

    /**
    * Represents a contact field for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestContactFieldQuery extends Query<ShopPayPaymentRequestContactFieldQuery> {
        ShopPayPaymentRequestContactFieldQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The first address line of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery address1() {
            startField("address1");

            return this;
        }

        /**
        * The second address line of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery address2() {
            startField("address2");

            return this;
        }

        /**
        * The city of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery city() {
            startField("city");

            return this;
        }

        /**
        * The company name of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery companyName() {
            startField("companyName");

            return this;
        }

        /**
        * The country of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery countryCode() {
            startField("countryCode");

            return this;
        }

        /**
        * The email of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery email() {
            startField("email");

            return this;
        }

        /**
        * The first name of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery firstName() {
            startField("firstName");

            return this;
        }

        /**
        * The first name of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery lastName() {
            startField("lastName");

            return this;
        }

        /**
        * The phone number of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery phone() {
            startField("phone");

            return this;
        }

        /**
        * The postal code of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery postalCode() {
            startField("postalCode");

            return this;
        }

        /**
        * The province of the contact field.
        */
        public ShopPayPaymentRequestContactFieldQuery provinceCode() {
            startField("provinceCode");

            return this;
        }
    }

    /**
    * Represents a contact field for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestContactField extends AbstractResponse<ShopPayPaymentRequestContactField> {
        public ShopPayPaymentRequestContactField() {
        }

        public ShopPayPaymentRequestContactField(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address1": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "address2": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "companyName": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "countryCode": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "email": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "firstName": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "lastName": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postalCode": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "provinceCode": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestContactField";
        }

        /**
        * The first address line of the contact field.
        */

        public String getAddress1() {
            return (String) get("address1");
        }

        public ShopPayPaymentRequestContactField setAddress1(String arg) {
            optimisticData.put(getKey("address1"), arg);
            return this;
        }

        /**
        * The second address line of the contact field.
        */

        public String getAddress2() {
            return (String) get("address2");
        }

        public ShopPayPaymentRequestContactField setAddress2(String arg) {
            optimisticData.put(getKey("address2"), arg);
            return this;
        }

        /**
        * The city of the contact field.
        */

        public String getCity() {
            return (String) get("city");
        }

        public ShopPayPaymentRequestContactField setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        /**
        * The company name of the contact field.
        */

        public String getCompanyName() {
            return (String) get("companyName");
        }

        public ShopPayPaymentRequestContactField setCompanyName(String arg) {
            optimisticData.put(getKey("companyName"), arg);
            return this;
        }

        /**
        * The country of the contact field.
        */

        public String getCountryCode() {
            return (String) get("countryCode");
        }

        public ShopPayPaymentRequestContactField setCountryCode(String arg) {
            optimisticData.put(getKey("countryCode"), arg);
            return this;
        }

        /**
        * The email of the contact field.
        */

        public String getEmail() {
            return (String) get("email");
        }

        public ShopPayPaymentRequestContactField setEmail(String arg) {
            optimisticData.put(getKey("email"), arg);
            return this;
        }

        /**
        * The first name of the contact field.
        */

        public String getFirstName() {
            return (String) get("firstName");
        }

        public ShopPayPaymentRequestContactField setFirstName(String arg) {
            optimisticData.put(getKey("firstName"), arg);
            return this;
        }

        /**
        * The first name of the contact field.
        */

        public String getLastName() {
            return (String) get("lastName");
        }

        public ShopPayPaymentRequestContactField setLastName(String arg) {
            optimisticData.put(getKey("lastName"), arg);
            return this;
        }

        /**
        * The phone number of the contact field.
        */

        public String getPhone() {
            return (String) get("phone");
        }

        public ShopPayPaymentRequestContactField setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        /**
        * The postal code of the contact field.
        */

        public String getPostalCode() {
            return (String) get("postalCode");
        }

        public ShopPayPaymentRequestContactField setPostalCode(String arg) {
            optimisticData.put(getKey("postalCode"), arg);
            return this;
        }

        /**
        * The province of the contact field.
        */

        public String getProvinceCode() {
            return (String) get("provinceCode");
        }

        public ShopPayPaymentRequestContactField setProvinceCode(String arg) {
            optimisticData.put(getKey("provinceCode"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address1": return false;

                case "address2": return false;

                case "city": return false;

                case "companyName": return false;

                case "countryCode": return false;

                case "email": return false;

                case "firstName": return false;

                case "lastName": return false;

                case "phone": return false;

                case "postalCode": return false;

                case "provinceCode": return false;

                default: return false;
            }
        }
    }

    public interface ShopPayPaymentRequestDeliveryMethodQueryDefinition {
        void define(ShopPayPaymentRequestDeliveryMethodQuery _queryBuilder);
    }

    /**
    * Represents a delivery method for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestDeliveryMethodQuery extends Query<ShopPayPaymentRequestDeliveryMethodQuery> {
        ShopPayPaymentRequestDeliveryMethodQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The amount for the delivery method.
        */
        public ShopPayPaymentRequestDeliveryMethodQuery amount(MoneyV2QueryDefinition queryDef) {
            startField("amount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The code of the delivery method.
        */
        public ShopPayPaymentRequestDeliveryMethodQuery code() {
            startField("code");

            return this;
        }

        /**
        * The detail about when the delivery may be expected.
        */
        public ShopPayPaymentRequestDeliveryMethodQuery deliveryExpectationLabel() {
            startField("deliveryExpectationLabel");

            return this;
        }

        /**
        * The detail of the delivery method.
        */
        public ShopPayPaymentRequestDeliveryMethodQuery detail() {
            startField("detail");

            return this;
        }

        /**
        * The label of the delivery method.
        */
        public ShopPayPaymentRequestDeliveryMethodQuery label() {
            startField("label");

            return this;
        }

        /**
        * The maximum delivery date for the delivery method.
        */
        public ShopPayPaymentRequestDeliveryMethodQuery maxDeliveryDate() {
            startField("maxDeliveryDate");

            return this;
        }

        /**
        * The minimum delivery date for the delivery method.
        */
        public ShopPayPaymentRequestDeliveryMethodQuery minDeliveryDate() {
            startField("minDeliveryDate");

            return this;
        }
    }

    /**
    * Represents a delivery method for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestDeliveryMethod extends AbstractResponse<ShopPayPaymentRequestDeliveryMethod> {
        public ShopPayPaymentRequestDeliveryMethod() {
        }

        public ShopPayPaymentRequestDeliveryMethod(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "amount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "code": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "deliveryExpectationLabel": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "detail": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "label": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "maxDeliveryDate": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "minDeliveryDate": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestDeliveryMethod";
        }

        /**
        * The amount for the delivery method.
        */

        public MoneyV2 getAmount() {
            return (MoneyV2) get("amount");
        }

        public ShopPayPaymentRequestDeliveryMethod setAmount(MoneyV2 arg) {
            optimisticData.put(getKey("amount"), arg);
            return this;
        }

        /**
        * The code of the delivery method.
        */

        public String getCode() {
            return (String) get("code");
        }

        public ShopPayPaymentRequestDeliveryMethod setCode(String arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The detail about when the delivery may be expected.
        */

        public String getDeliveryExpectationLabel() {
            return (String) get("deliveryExpectationLabel");
        }

        public ShopPayPaymentRequestDeliveryMethod setDeliveryExpectationLabel(String arg) {
            optimisticData.put(getKey("deliveryExpectationLabel"), arg);
            return this;
        }

        /**
        * The detail of the delivery method.
        */

        public String getDetail() {
            return (String) get("detail");
        }

        public ShopPayPaymentRequestDeliveryMethod setDetail(String arg) {
            optimisticData.put(getKey("detail"), arg);
            return this;
        }

        /**
        * The label of the delivery method.
        */

        public String getLabel() {
            return (String) get("label");
        }

        public ShopPayPaymentRequestDeliveryMethod setLabel(String arg) {
            optimisticData.put(getKey("label"), arg);
            return this;
        }

        /**
        * The maximum delivery date for the delivery method.
        */

        public String getMaxDeliveryDate() {
            return (String) get("maxDeliveryDate");
        }

        public ShopPayPaymentRequestDeliveryMethod setMaxDeliveryDate(String arg) {
            optimisticData.put(getKey("maxDeliveryDate"), arg);
            return this;
        }

        /**
        * The minimum delivery date for the delivery method.
        */

        public String getMinDeliveryDate() {
            return (String) get("minDeliveryDate");
        }

        public ShopPayPaymentRequestDeliveryMethod setMinDeliveryDate(String arg) {
            optimisticData.put(getKey("minDeliveryDate"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "amount": return true;

                case "code": return false;

                case "deliveryExpectationLabel": return false;

                case "detail": return false;

                case "label": return false;

                case "maxDeliveryDate": return false;

                case "minDeliveryDate": return false;

                default: return false;
            }
        }
    }

    public static class ShopPayPaymentRequestDeliveryMethodInput implements Serializable {
        private Input<String> code = Input.undefined();

        private Input<String> label = Input.undefined();

        private Input<String> detail = Input.undefined();

        private Input<MoneyInput> amount = Input.undefined();

        private Input<String> minDeliveryDate = Input.undefined();

        private Input<String> maxDeliveryDate = Input.undefined();

        private Input<String> deliveryExpectationLabel = Input.undefined();

        public String getCode() {
            return code.getValue();
        }

        public Input<String> getCodeInput() {
            return code;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setCode(String code) {
            this.code = Input.optional(code);
            return this;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setCodeInput(Input<String> code) {
            if (code == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.code = code;
            return this;
        }

        public String getLabel() {
            return label.getValue();
        }

        public Input<String> getLabelInput() {
            return label;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setLabel(String label) {
            this.label = Input.optional(label);
            return this;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setLabelInput(Input<String> label) {
            if (label == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.label = label;
            return this;
        }

        public String getDetail() {
            return detail.getValue();
        }

        public Input<String> getDetailInput() {
            return detail;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setDetail(String detail) {
            this.detail = Input.optional(detail);
            return this;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setDetailInput(Input<String> detail) {
            if (detail == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.detail = detail;
            return this;
        }

        public MoneyInput getAmount() {
            return amount.getValue();
        }

        public Input<MoneyInput> getAmountInput() {
            return amount;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setAmount(MoneyInput amount) {
            this.amount = Input.optional(amount);
            return this;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setAmountInput(Input<MoneyInput> amount) {
            if (amount == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.amount = amount;
            return this;
        }

        public String getMinDeliveryDate() {
            return minDeliveryDate.getValue();
        }

        public Input<String> getMinDeliveryDateInput() {
            return minDeliveryDate;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setMinDeliveryDate(String minDeliveryDate) {
            this.minDeliveryDate = Input.optional(minDeliveryDate);
            return this;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setMinDeliveryDateInput(Input<String> minDeliveryDate) {
            if (minDeliveryDate == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.minDeliveryDate = minDeliveryDate;
            return this;
        }

        public String getMaxDeliveryDate() {
            return maxDeliveryDate.getValue();
        }

        public Input<String> getMaxDeliveryDateInput() {
            return maxDeliveryDate;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setMaxDeliveryDate(String maxDeliveryDate) {
            this.maxDeliveryDate = Input.optional(maxDeliveryDate);
            return this;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setMaxDeliveryDateInput(Input<String> maxDeliveryDate) {
            if (maxDeliveryDate == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.maxDeliveryDate = maxDeliveryDate;
            return this;
        }

        public String getDeliveryExpectationLabel() {
            return deliveryExpectationLabel.getValue();
        }

        public Input<String> getDeliveryExpectationLabelInput() {
            return deliveryExpectationLabel;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setDeliveryExpectationLabel(String deliveryExpectationLabel) {
            this.deliveryExpectationLabel = Input.optional(deliveryExpectationLabel);
            return this;
        }

        public ShopPayPaymentRequestDeliveryMethodInput setDeliveryExpectationLabelInput(Input<String> deliveryExpectationLabel) {
            if (deliveryExpectationLabel == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.deliveryExpectationLabel = deliveryExpectationLabel;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.code.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("code:");
                if (code.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, code.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.label.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("label:");
                if (label.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, label.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.detail.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("detail:");
                if (detail.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, detail.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.amount.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("amount:");
                if (amount.getValue() != null) {
                    amount.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.minDeliveryDate.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("minDeliveryDate:");
                if (minDeliveryDate.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, minDeliveryDate.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.maxDeliveryDate.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("maxDeliveryDate:");
                if (maxDeliveryDate.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, maxDeliveryDate.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.deliveryExpectationLabel.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("deliveryExpectationLabel:");
                if (deliveryExpectationLabel.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, deliveryExpectationLabel.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * Represents the delivery method type for a Shop Pay payment request.
    */
    public enum ShopPayPaymentRequestDeliveryMethodType {
        /**
        * The delivery method type is pickup.
        */
        PICKUP,

        /**
        * The delivery method type is shipping.
        */
        SHIPPING,

        UNKNOWN_VALUE;

        public static ShopPayPaymentRequestDeliveryMethodType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "PICKUP": {
                    return PICKUP;
                }

                case "SHIPPING": {
                    return SHIPPING;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PICKUP: {
                    return "PICKUP";
                }

                case SHIPPING: {
                    return "SHIPPING";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface ShopPayPaymentRequestDiscountQueryDefinition {
        void define(ShopPayPaymentRequestDiscountQuery _queryBuilder);
    }

    /**
    * Represents a discount for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestDiscountQuery extends Query<ShopPayPaymentRequestDiscountQuery> {
        ShopPayPaymentRequestDiscountQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The amount of the discount.
        */
        public ShopPayPaymentRequestDiscountQuery amount(MoneyV2QueryDefinition queryDef) {
            startField("amount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The label of the discount.
        */
        public ShopPayPaymentRequestDiscountQuery label() {
            startField("label");

            return this;
        }
    }

    /**
    * Represents a discount for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestDiscount extends AbstractResponse<ShopPayPaymentRequestDiscount> {
        public ShopPayPaymentRequestDiscount() {
        }

        public ShopPayPaymentRequestDiscount(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "amount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "label": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestDiscount";
        }

        /**
        * The amount of the discount.
        */

        public MoneyV2 getAmount() {
            return (MoneyV2) get("amount");
        }

        public ShopPayPaymentRequestDiscount setAmount(MoneyV2 arg) {
            optimisticData.put(getKey("amount"), arg);
            return this;
        }

        /**
        * The label of the discount.
        */

        public String getLabel() {
            return (String) get("label");
        }

        public ShopPayPaymentRequestDiscount setLabel(String arg) {
            optimisticData.put(getKey("label"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "amount": return true;

                case "label": return false;

                default: return false;
            }
        }
    }

    public static class ShopPayPaymentRequestDiscountInput implements Serializable {
        private Input<String> label = Input.undefined();

        private Input<MoneyInput> amount = Input.undefined();

        public String getLabel() {
            return label.getValue();
        }

        public Input<String> getLabelInput() {
            return label;
        }

        public ShopPayPaymentRequestDiscountInput setLabel(String label) {
            this.label = Input.optional(label);
            return this;
        }

        public ShopPayPaymentRequestDiscountInput setLabelInput(Input<String> label) {
            if (label == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.label = label;
            return this;
        }

        public MoneyInput getAmount() {
            return amount.getValue();
        }

        public Input<MoneyInput> getAmountInput() {
            return amount;
        }

        public ShopPayPaymentRequestDiscountInput setAmount(MoneyInput amount) {
            this.amount = Input.optional(amount);
            return this;
        }

        public ShopPayPaymentRequestDiscountInput setAmountInput(Input<MoneyInput> amount) {
            if (amount == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.amount = amount;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.label.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("label:");
                if (label.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, label.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.amount.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("amount:");
                if (amount.getValue() != null) {
                    amount.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface ShopPayPaymentRequestImageQueryDefinition {
        void define(ShopPayPaymentRequestImageQuery _queryBuilder);
    }

    /**
    * Represents an image for a Shop Pay payment request line item.
    */
    public static class ShopPayPaymentRequestImageQuery extends Query<ShopPayPaymentRequestImageQuery> {
        ShopPayPaymentRequestImageQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The alt text of the image.
        */
        public ShopPayPaymentRequestImageQuery alt() {
            startField("alt");

            return this;
        }

        /**
        * The source URL of the image.
        */
        public ShopPayPaymentRequestImageQuery url() {
            startField("url");

            return this;
        }
    }

    /**
    * Represents an image for a Shop Pay payment request line item.
    */
    public static class ShopPayPaymentRequestImage extends AbstractResponse<ShopPayPaymentRequestImage> {
        public ShopPayPaymentRequestImage() {
        }

        public ShopPayPaymentRequestImage(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "alt": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "url": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestImage";
        }

        /**
        * The alt text of the image.
        */

        public String getAlt() {
            return (String) get("alt");
        }

        public ShopPayPaymentRequestImage setAlt(String arg) {
            optimisticData.put(getKey("alt"), arg);
            return this;
        }

        /**
        * The source URL of the image.
        */

        public String getUrl() {
            return (String) get("url");
        }

        public ShopPayPaymentRequestImage setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "alt": return false;

                case "url": return false;

                default: return false;
            }
        }
    }

    public static class ShopPayPaymentRequestImageInput implements Serializable {
        private String url;

        private Input<String> alt = Input.undefined();

        public ShopPayPaymentRequestImageInput(String url) {
            this.url = url;
        }

        public String getUrl() {
            return url;
        }

        public ShopPayPaymentRequestImageInput setUrl(String url) {
            this.url = url;
            return this;
        }

        public String getAlt() {
            return alt.getValue();
        }

        public Input<String> getAltInput() {
            return alt;
        }

        public ShopPayPaymentRequestImageInput setAlt(String alt) {
            this.alt = Input.optional(alt);
            return this;
        }

        public ShopPayPaymentRequestImageInput setAltInput(Input<String> alt) {
            if (alt == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.alt = alt;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("url:");
            Query.appendQuotedString(_queryBuilder, url.toString());

            if (this.alt.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("alt:");
                if (alt.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, alt.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public static class ShopPayPaymentRequestInput implements Serializable {
        private MoneyInput total;

        private MoneyInput subtotal;

        private String locale;

        private CurrencyCode presentmentCurrency;

        private Input<List<String>> discountCodes = Input.undefined();

        private Input<List<ShopPayPaymentRequestLineItemInput>> lineItems = Input.undefined();

        private Input<List<ShopPayPaymentRequestShippingLineInput>> shippingLines = Input.undefined();

        private Input<List<ShopPayPaymentRequestDiscountInput>> discounts = Input.undefined();

        private Input<ShopPayPaymentRequestTotalShippingPriceInput> totalShippingPrice = Input.undefined();

        private Input<MoneyInput> totalTax = Input.undefined();

        private Input<List<ShopPayPaymentRequestDeliveryMethodInput>> deliveryMethods = Input.undefined();

        private Input<ShopPayPaymentRequestDeliveryMethodType> selectedDeliveryMethodType = Input.undefined();

        private Input<String> paymentMethod = Input.undefined();

        public ShopPayPaymentRequestInput(MoneyInput total, MoneyInput subtotal, String locale, CurrencyCode presentmentCurrency) {
            this.total = total;

            this.subtotal = subtotal;

            this.locale = locale;

            this.presentmentCurrency = presentmentCurrency;
        }

        public MoneyInput getTotal() {
            return total;
        }

        public ShopPayPaymentRequestInput setTotal(MoneyInput total) {
            this.total = total;
            return this;
        }

        public MoneyInput getSubtotal() {
            return subtotal;
        }

        public ShopPayPaymentRequestInput setSubtotal(MoneyInput subtotal) {
            this.subtotal = subtotal;
            return this;
        }

        public String getLocale() {
            return locale;
        }

        public ShopPayPaymentRequestInput setLocale(String locale) {
            this.locale = locale;
            return this;
        }

        public CurrencyCode getPresentmentCurrency() {
            return presentmentCurrency;
        }

        public ShopPayPaymentRequestInput setPresentmentCurrency(CurrencyCode presentmentCurrency) {
            this.presentmentCurrency = presentmentCurrency;
            return this;
        }

        public List<String> getDiscountCodes() {
            return discountCodes.getValue();
        }

        public Input<List<String>> getDiscountCodesInput() {
            return discountCodes;
        }

        public ShopPayPaymentRequestInput setDiscountCodes(List<String> discountCodes) {
            this.discountCodes = Input.optional(discountCodes);
            return this;
        }

        public ShopPayPaymentRequestInput setDiscountCodesInput(Input<List<String>> discountCodes) {
            if (discountCodes == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.discountCodes = discountCodes;
            return this;
        }

        public List<ShopPayPaymentRequestLineItemInput> getLineItems() {
            return lineItems.getValue();
        }

        public Input<List<ShopPayPaymentRequestLineItemInput>> getLineItemsInput() {
            return lineItems;
        }

        public ShopPayPaymentRequestInput setLineItems(List<ShopPayPaymentRequestLineItemInput> lineItems) {
            this.lineItems = Input.optional(lineItems);
            return this;
        }

        public ShopPayPaymentRequestInput setLineItemsInput(Input<List<ShopPayPaymentRequestLineItemInput>> lineItems) {
            if (lineItems == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.lineItems = lineItems;
            return this;
        }

        public List<ShopPayPaymentRequestShippingLineInput> getShippingLines() {
            return shippingLines.getValue();
        }

        public Input<List<ShopPayPaymentRequestShippingLineInput>> getShippingLinesInput() {
            return shippingLines;
        }

        public ShopPayPaymentRequestInput setShippingLines(List<ShopPayPaymentRequestShippingLineInput> shippingLines) {
            this.shippingLines = Input.optional(shippingLines);
            return this;
        }

        public ShopPayPaymentRequestInput setShippingLinesInput(Input<List<ShopPayPaymentRequestShippingLineInput>> shippingLines) {
            if (shippingLines == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.shippingLines = shippingLines;
            return this;
        }

        public List<ShopPayPaymentRequestDiscountInput> getDiscounts() {
            return discounts.getValue();
        }

        public Input<List<ShopPayPaymentRequestDiscountInput>> getDiscountsInput() {
            return discounts;
        }

        public ShopPayPaymentRequestInput setDiscounts(List<ShopPayPaymentRequestDiscountInput> discounts) {
            this.discounts = Input.optional(discounts);
            return this;
        }

        public ShopPayPaymentRequestInput setDiscountsInput(Input<List<ShopPayPaymentRequestDiscountInput>> discounts) {
            if (discounts == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.discounts = discounts;
            return this;
        }

        public ShopPayPaymentRequestTotalShippingPriceInput getTotalShippingPrice() {
            return totalShippingPrice.getValue();
        }

        public Input<ShopPayPaymentRequestTotalShippingPriceInput> getTotalShippingPriceInput() {
            return totalShippingPrice;
        }

        public ShopPayPaymentRequestInput setTotalShippingPrice(ShopPayPaymentRequestTotalShippingPriceInput totalShippingPrice) {
            this.totalShippingPrice = Input.optional(totalShippingPrice);
            return this;
        }

        public ShopPayPaymentRequestInput setTotalShippingPriceInput(Input<ShopPayPaymentRequestTotalShippingPriceInput> totalShippingPrice) {
            if (totalShippingPrice == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.totalShippingPrice = totalShippingPrice;
            return this;
        }

        public MoneyInput getTotalTax() {
            return totalTax.getValue();
        }

        public Input<MoneyInput> getTotalTaxInput() {
            return totalTax;
        }

        public ShopPayPaymentRequestInput setTotalTax(MoneyInput totalTax) {
            this.totalTax = Input.optional(totalTax);
            return this;
        }

        public ShopPayPaymentRequestInput setTotalTaxInput(Input<MoneyInput> totalTax) {
            if (totalTax == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.totalTax = totalTax;
            return this;
        }

        public List<ShopPayPaymentRequestDeliveryMethodInput> getDeliveryMethods() {
            return deliveryMethods.getValue();
        }

        public Input<List<ShopPayPaymentRequestDeliveryMethodInput>> getDeliveryMethodsInput() {
            return deliveryMethods;
        }

        public ShopPayPaymentRequestInput setDeliveryMethods(List<ShopPayPaymentRequestDeliveryMethodInput> deliveryMethods) {
            this.deliveryMethods = Input.optional(deliveryMethods);
            return this;
        }

        public ShopPayPaymentRequestInput setDeliveryMethodsInput(Input<List<ShopPayPaymentRequestDeliveryMethodInput>> deliveryMethods) {
            if (deliveryMethods == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.deliveryMethods = deliveryMethods;
            return this;
        }

        public ShopPayPaymentRequestDeliveryMethodType getSelectedDeliveryMethodType() {
            return selectedDeliveryMethodType.getValue();
        }

        public Input<ShopPayPaymentRequestDeliveryMethodType> getSelectedDeliveryMethodTypeInput() {
            return selectedDeliveryMethodType;
        }

        public ShopPayPaymentRequestInput setSelectedDeliveryMethodType(ShopPayPaymentRequestDeliveryMethodType selectedDeliveryMethodType) {
            this.selectedDeliveryMethodType = Input.optional(selectedDeliveryMethodType);
            return this;
        }

        public ShopPayPaymentRequestInput setSelectedDeliveryMethodTypeInput(Input<ShopPayPaymentRequestDeliveryMethodType> selectedDeliveryMethodType) {
            if (selectedDeliveryMethodType == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.selectedDeliveryMethodType = selectedDeliveryMethodType;
            return this;
        }

        public String getPaymentMethod() {
            return paymentMethod.getValue();
        }

        public Input<String> getPaymentMethodInput() {
            return paymentMethod;
        }

        public ShopPayPaymentRequestInput setPaymentMethod(String paymentMethod) {
            this.paymentMethod = Input.optional(paymentMethod);
            return this;
        }

        public ShopPayPaymentRequestInput setPaymentMethodInput(Input<String> paymentMethod) {
            if (paymentMethod == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.paymentMethod = paymentMethod;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("total:");
            total.appendTo(_queryBuilder);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("subtotal:");
            subtotal.appendTo(_queryBuilder);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("locale:");
            Query.appendQuotedString(_queryBuilder, locale.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("presentmentCurrency:");
            _queryBuilder.append(presentmentCurrency.toString());

            if (this.discountCodes.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discountCodes:");
                if (discountCodes.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (String item1 : discountCodes.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            Query.appendQuotedString(_queryBuilder, item1.toString());
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.lineItems.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("lineItems:");
                if (lineItems.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ShopPayPaymentRequestLineItemInput item1 : lineItems.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.shippingLines.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shippingLines:");
                if (shippingLines.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ShopPayPaymentRequestShippingLineInput item1 : shippingLines.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.discounts.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discounts:");
                if (discounts.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ShopPayPaymentRequestDiscountInput item1 : discounts.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.totalShippingPrice.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("totalShippingPrice:");
                if (totalShippingPrice.getValue() != null) {
                    totalShippingPrice.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.totalTax.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("totalTax:");
                if (totalTax.getValue() != null) {
                    totalTax.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.deliveryMethods.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("deliveryMethods:");
                if (deliveryMethods.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ShopPayPaymentRequestDeliveryMethodInput item1 : deliveryMethods.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.selectedDeliveryMethodType.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("selectedDeliveryMethodType:");
                if (selectedDeliveryMethodType.getValue() != null) {
                    _queryBuilder.append(selectedDeliveryMethodType.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.paymentMethod.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("paymentMethod:");
                if (paymentMethod.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, paymentMethod.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface ShopPayPaymentRequestLineItemQueryDefinition {
        void define(ShopPayPaymentRequestLineItemQuery _queryBuilder);
    }

    /**
    * Represents a line item for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestLineItemQuery extends Query<ShopPayPaymentRequestLineItemQuery> {
        ShopPayPaymentRequestLineItemQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The final item price for the line item.
        */
        public ShopPayPaymentRequestLineItemQuery finalItemPrice(MoneyV2QueryDefinition queryDef) {
            startField("finalItemPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The final line price for the line item.
        */
        public ShopPayPaymentRequestLineItemQuery finalLinePrice(MoneyV2QueryDefinition queryDef) {
            startField("finalLinePrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The image of the line item.
        */
        public ShopPayPaymentRequestLineItemQuery image(ShopPayPaymentRequestImageQueryDefinition queryDef) {
            startField("image");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The item discounts for the line item.
        */
        public ShopPayPaymentRequestLineItemQuery itemDiscounts(ShopPayPaymentRequestDiscountQueryDefinition queryDef) {
            startField("itemDiscounts");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestDiscountQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The label of the line item.
        */
        public ShopPayPaymentRequestLineItemQuery label() {
            startField("label");

            return this;
        }

        /**
        * The line discounts for the line item.
        */
        public ShopPayPaymentRequestLineItemQuery lineDiscounts(ShopPayPaymentRequestDiscountQueryDefinition queryDef) {
            startField("lineDiscounts");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestDiscountQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The original item price for the line item.
        */
        public ShopPayPaymentRequestLineItemQuery originalItemPrice(MoneyV2QueryDefinition queryDef) {
            startField("originalItemPrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The original line price for the line item.
        */
        public ShopPayPaymentRequestLineItemQuery originalLinePrice(MoneyV2QueryDefinition queryDef) {
            startField("originalLinePrice");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The quantity of the line item.
        */
        public ShopPayPaymentRequestLineItemQuery quantity() {
            startField("quantity");

            return this;
        }

        /**
        * Whether the line item requires shipping.
        */
        public ShopPayPaymentRequestLineItemQuery requiresShipping() {
            startField("requiresShipping");

            return this;
        }

        /**
        * The SKU of the line item.
        */
        public ShopPayPaymentRequestLineItemQuery sku() {
            startField("sku");

            return this;
        }
    }

    /**
    * Represents a line item for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestLineItem extends AbstractResponse<ShopPayPaymentRequestLineItem> {
        public ShopPayPaymentRequestLineItem() {
        }

        public ShopPayPaymentRequestLineItem(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "finalItemPrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "finalLinePrice": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "image": {
                        ShopPayPaymentRequestImage optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPayPaymentRequestImage(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "itemDiscounts": {
                        List<ShopPayPaymentRequestDiscount> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<ShopPayPaymentRequestDiscount> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(new ShopPayPaymentRequestDiscount(jsonAsObject(element1, key)));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "label": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "lineDiscounts": {
                        List<ShopPayPaymentRequestDiscount> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<ShopPayPaymentRequestDiscount> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(new ShopPayPaymentRequestDiscount(jsonAsObject(element1, key)));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "originalItemPrice": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "originalLinePrice": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "requiresShipping": {
                        Boolean optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsBoolean(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sku": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestLineItem";
        }

        /**
        * The final item price for the line item.
        */

        public MoneyV2 getFinalItemPrice() {
            return (MoneyV2) get("finalItemPrice");
        }

        public ShopPayPaymentRequestLineItem setFinalItemPrice(MoneyV2 arg) {
            optimisticData.put(getKey("finalItemPrice"), arg);
            return this;
        }

        /**
        * The final line price for the line item.
        */

        public MoneyV2 getFinalLinePrice() {
            return (MoneyV2) get("finalLinePrice");
        }

        public ShopPayPaymentRequestLineItem setFinalLinePrice(MoneyV2 arg) {
            optimisticData.put(getKey("finalLinePrice"), arg);
            return this;
        }

        /**
        * The image of the line item.
        */

        public ShopPayPaymentRequestImage getImage() {
            return (ShopPayPaymentRequestImage) get("image");
        }

        public ShopPayPaymentRequestLineItem setImage(ShopPayPaymentRequestImage arg) {
            optimisticData.put(getKey("image"), arg);
            return this;
        }

        /**
        * The item discounts for the line item.
        */

        public List<ShopPayPaymentRequestDiscount> getItemDiscounts() {
            return (List<ShopPayPaymentRequestDiscount>) get("itemDiscounts");
        }

        public ShopPayPaymentRequestLineItem setItemDiscounts(List<ShopPayPaymentRequestDiscount> arg) {
            optimisticData.put(getKey("itemDiscounts"), arg);
            return this;
        }

        /**
        * The label of the line item.
        */

        public String getLabel() {
            return (String) get("label");
        }

        public ShopPayPaymentRequestLineItem setLabel(String arg) {
            optimisticData.put(getKey("label"), arg);
            return this;
        }

        /**
        * The line discounts for the line item.
        */

        public List<ShopPayPaymentRequestDiscount> getLineDiscounts() {
            return (List<ShopPayPaymentRequestDiscount>) get("lineDiscounts");
        }

        public ShopPayPaymentRequestLineItem setLineDiscounts(List<ShopPayPaymentRequestDiscount> arg) {
            optimisticData.put(getKey("lineDiscounts"), arg);
            return this;
        }

        /**
        * The original item price for the line item.
        */

        public MoneyV2 getOriginalItemPrice() {
            return (MoneyV2) get("originalItemPrice");
        }

        public ShopPayPaymentRequestLineItem setOriginalItemPrice(MoneyV2 arg) {
            optimisticData.put(getKey("originalItemPrice"), arg);
            return this;
        }

        /**
        * The original line price for the line item.
        */

        public MoneyV2 getOriginalLinePrice() {
            return (MoneyV2) get("originalLinePrice");
        }

        public ShopPayPaymentRequestLineItem setOriginalLinePrice(MoneyV2 arg) {
            optimisticData.put(getKey("originalLinePrice"), arg);
            return this;
        }

        /**
        * The quantity of the line item.
        */

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public ShopPayPaymentRequestLineItem setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        /**
        * Whether the line item requires shipping.
        */

        public Boolean getRequiresShipping() {
            return (Boolean) get("requiresShipping");
        }

        public ShopPayPaymentRequestLineItem setRequiresShipping(Boolean arg) {
            optimisticData.put(getKey("requiresShipping"), arg);
            return this;
        }

        /**
        * The SKU of the line item.
        */

        public String getSku() {
            return (String) get("sku");
        }

        public ShopPayPaymentRequestLineItem setSku(String arg) {
            optimisticData.put(getKey("sku"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "finalItemPrice": return true;

                case "finalLinePrice": return true;

                case "image": return true;

                case "itemDiscounts": return true;

                case "label": return false;

                case "lineDiscounts": return true;

                case "originalItemPrice": return true;

                case "originalLinePrice": return true;

                case "quantity": return false;

                case "requiresShipping": return false;

                case "sku": return false;

                default: return false;
            }
        }
    }

    public static class ShopPayPaymentRequestLineItemInput implements Serializable {
        private int quantity;

        private Input<String> label = Input.undefined();

        private Input<String> sku = Input.undefined();

        private Input<Boolean> requiresShipping = Input.undefined();

        private Input<ShopPayPaymentRequestImageInput> image = Input.undefined();

        private Input<MoneyInput> originalLinePrice = Input.undefined();

        private Input<MoneyInput> finalLinePrice = Input.undefined();

        private Input<List<ShopPayPaymentRequestDiscountInput>> lineDiscounts = Input.undefined();

        private Input<MoneyInput> originalItemPrice = Input.undefined();

        private Input<MoneyInput> finalItemPrice = Input.undefined();

        private Input<List<ShopPayPaymentRequestDiscountInput>> itemDiscounts = Input.undefined();

        public ShopPayPaymentRequestLineItemInput(int quantity) {
            this.quantity = quantity;
        }

        public int getQuantity() {
            return quantity;
        }

        public ShopPayPaymentRequestLineItemInput setQuantity(int quantity) {
            this.quantity = quantity;
            return this;
        }

        public String getLabel() {
            return label.getValue();
        }

        public Input<String> getLabelInput() {
            return label;
        }

        public ShopPayPaymentRequestLineItemInput setLabel(String label) {
            this.label = Input.optional(label);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setLabelInput(Input<String> label) {
            if (label == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.label = label;
            return this;
        }

        public String getSku() {
            return sku.getValue();
        }

        public Input<String> getSkuInput() {
            return sku;
        }

        public ShopPayPaymentRequestLineItemInput setSku(String sku) {
            this.sku = Input.optional(sku);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setSkuInput(Input<String> sku) {
            if (sku == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.sku = sku;
            return this;
        }

        public Boolean getRequiresShipping() {
            return requiresShipping.getValue();
        }

        public Input<Boolean> getRequiresShippingInput() {
            return requiresShipping;
        }

        public ShopPayPaymentRequestLineItemInput setRequiresShipping(Boolean requiresShipping) {
            this.requiresShipping = Input.optional(requiresShipping);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setRequiresShippingInput(Input<Boolean> requiresShipping) {
            if (requiresShipping == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.requiresShipping = requiresShipping;
            return this;
        }

        public ShopPayPaymentRequestImageInput getImage() {
            return image.getValue();
        }

        public Input<ShopPayPaymentRequestImageInput> getImageInput() {
            return image;
        }

        public ShopPayPaymentRequestLineItemInput setImage(ShopPayPaymentRequestImageInput image) {
            this.image = Input.optional(image);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setImageInput(Input<ShopPayPaymentRequestImageInput> image) {
            if (image == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.image = image;
            return this;
        }

        public MoneyInput getOriginalLinePrice() {
            return originalLinePrice.getValue();
        }

        public Input<MoneyInput> getOriginalLinePriceInput() {
            return originalLinePrice;
        }

        public ShopPayPaymentRequestLineItemInput setOriginalLinePrice(MoneyInput originalLinePrice) {
            this.originalLinePrice = Input.optional(originalLinePrice);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setOriginalLinePriceInput(Input<MoneyInput> originalLinePrice) {
            if (originalLinePrice == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.originalLinePrice = originalLinePrice;
            return this;
        }

        public MoneyInput getFinalLinePrice() {
            return finalLinePrice.getValue();
        }

        public Input<MoneyInput> getFinalLinePriceInput() {
            return finalLinePrice;
        }

        public ShopPayPaymentRequestLineItemInput setFinalLinePrice(MoneyInput finalLinePrice) {
            this.finalLinePrice = Input.optional(finalLinePrice);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setFinalLinePriceInput(Input<MoneyInput> finalLinePrice) {
            if (finalLinePrice == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.finalLinePrice = finalLinePrice;
            return this;
        }

        public List<ShopPayPaymentRequestDiscountInput> getLineDiscounts() {
            return lineDiscounts.getValue();
        }

        public Input<List<ShopPayPaymentRequestDiscountInput>> getLineDiscountsInput() {
            return lineDiscounts;
        }

        public ShopPayPaymentRequestLineItemInput setLineDiscounts(List<ShopPayPaymentRequestDiscountInput> lineDiscounts) {
            this.lineDiscounts = Input.optional(lineDiscounts);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setLineDiscountsInput(Input<List<ShopPayPaymentRequestDiscountInput>> lineDiscounts) {
            if (lineDiscounts == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.lineDiscounts = lineDiscounts;
            return this;
        }

        public MoneyInput getOriginalItemPrice() {
            return originalItemPrice.getValue();
        }

        public Input<MoneyInput> getOriginalItemPriceInput() {
            return originalItemPrice;
        }

        public ShopPayPaymentRequestLineItemInput setOriginalItemPrice(MoneyInput originalItemPrice) {
            this.originalItemPrice = Input.optional(originalItemPrice);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setOriginalItemPriceInput(Input<MoneyInput> originalItemPrice) {
            if (originalItemPrice == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.originalItemPrice = originalItemPrice;
            return this;
        }

        public MoneyInput getFinalItemPrice() {
            return finalItemPrice.getValue();
        }

        public Input<MoneyInput> getFinalItemPriceInput() {
            return finalItemPrice;
        }

        public ShopPayPaymentRequestLineItemInput setFinalItemPrice(MoneyInput finalItemPrice) {
            this.finalItemPrice = Input.optional(finalItemPrice);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setFinalItemPriceInput(Input<MoneyInput> finalItemPrice) {
            if (finalItemPrice == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.finalItemPrice = finalItemPrice;
            return this;
        }

        public List<ShopPayPaymentRequestDiscountInput> getItemDiscounts() {
            return itemDiscounts.getValue();
        }

        public Input<List<ShopPayPaymentRequestDiscountInput>> getItemDiscountsInput() {
            return itemDiscounts;
        }

        public ShopPayPaymentRequestLineItemInput setItemDiscounts(List<ShopPayPaymentRequestDiscountInput> itemDiscounts) {
            this.itemDiscounts = Input.optional(itemDiscounts);
            return this;
        }

        public ShopPayPaymentRequestLineItemInput setItemDiscountsInput(Input<List<ShopPayPaymentRequestDiscountInput>> itemDiscounts) {
            if (itemDiscounts == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.itemDiscounts = itemDiscounts;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("quantity:");
            _queryBuilder.append(quantity);

            if (this.label.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("label:");
                if (label.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, label.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.sku.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sku:");
                if (sku.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, sku.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.requiresShipping.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("requiresShipping:");
                if (requiresShipping.getValue() != null) {
                    _queryBuilder.append(requiresShipping.getValue());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.image.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("image:");
                if (image.getValue() != null) {
                    image.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.originalLinePrice.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("originalLinePrice:");
                if (originalLinePrice.getValue() != null) {
                    originalLinePrice.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.finalLinePrice.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("finalLinePrice:");
                if (finalLinePrice.getValue() != null) {
                    finalLinePrice.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.lineDiscounts.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("lineDiscounts:");
                if (lineDiscounts.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ShopPayPaymentRequestDiscountInput item1 : lineDiscounts.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.originalItemPrice.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("originalItemPrice:");
                if (originalItemPrice.getValue() != null) {
                    originalItemPrice.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.finalItemPrice.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("finalItemPrice:");
                if (finalItemPrice.getValue() != null) {
                    finalItemPrice.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.itemDiscounts.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("itemDiscounts:");
                if (itemDiscounts.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ShopPayPaymentRequestDiscountInput item1 : itemDiscounts.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface ShopPayPaymentRequestReceiptQueryDefinition {
        void define(ShopPayPaymentRequestReceiptQuery _queryBuilder);
    }

    /**
    * Represents a receipt for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestReceiptQuery extends Query<ShopPayPaymentRequestReceiptQuery> {
        ShopPayPaymentRequestReceiptQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The payment request object.
        */
        public ShopPayPaymentRequestReceiptQuery paymentRequest(ShopPayPaymentRequestQueryDefinition queryDef) {
            startField("paymentRequest");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The processing status.
        */
        public ShopPayPaymentRequestReceiptQuery processingStatusType() {
            startField("processingStatusType");

            return this;
        }

        /**
        * The token of the receipt.
        */
        public ShopPayPaymentRequestReceiptQuery token() {
            startField("token");

            return this;
        }
    }

    /**
    * Represents a receipt for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestReceipt extends AbstractResponse<ShopPayPaymentRequestReceipt> {
        public ShopPayPaymentRequestReceipt() {
        }

        public ShopPayPaymentRequestReceipt(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "paymentRequest": {
                        responseData.put(key, new ShopPayPaymentRequest(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "processingStatusType": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "token": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestReceipt";
        }

        /**
        * The payment request object.
        */

        public ShopPayPaymentRequest getPaymentRequest() {
            return (ShopPayPaymentRequest) get("paymentRequest");
        }

        public ShopPayPaymentRequestReceipt setPaymentRequest(ShopPayPaymentRequest arg) {
            optimisticData.put(getKey("paymentRequest"), arg);
            return this;
        }

        /**
        * The processing status.
        */

        public String getProcessingStatusType() {
            return (String) get("processingStatusType");
        }

        public ShopPayPaymentRequestReceipt setProcessingStatusType(String arg) {
            optimisticData.put(getKey("processingStatusType"), arg);
            return this;
        }

        /**
        * The token of the receipt.
        */

        public String getToken() {
            return (String) get("token");
        }

        public ShopPayPaymentRequestReceipt setToken(String arg) {
            optimisticData.put(getKey("token"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "paymentRequest": return true;

                case "processingStatusType": return false;

                case "token": return false;

                default: return false;
            }
        }
    }

    public interface ShopPayPaymentRequestSessionQueryDefinition {
        void define(ShopPayPaymentRequestSessionQuery _queryBuilder);
    }

    /**
    * Represents a Shop Pay payment request session.
    */
    public static class ShopPayPaymentRequestSessionQuery extends Query<ShopPayPaymentRequestSessionQuery> {
        ShopPayPaymentRequestSessionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The checkout URL of the Shop Pay payment request session.
        */
        public ShopPayPaymentRequestSessionQuery checkoutUrl() {
            startField("checkoutUrl");

            return this;
        }

        /**
        * The payment request associated with the Shop Pay payment request session.
        */
        public ShopPayPaymentRequestSessionQuery paymentRequest(ShopPayPaymentRequestQueryDefinition queryDef) {
            startField("paymentRequest");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The source identifier of the Shop Pay payment request session.
        */
        public ShopPayPaymentRequestSessionQuery sourceIdentifier() {
            startField("sourceIdentifier");

            return this;
        }

        /**
        * The token of the Shop Pay payment request session.
        */
        public ShopPayPaymentRequestSessionQuery token() {
            startField("token");

            return this;
        }
    }

    /**
    * Represents a Shop Pay payment request session.
    */
    public static class ShopPayPaymentRequestSession extends AbstractResponse<ShopPayPaymentRequestSession> {
        public ShopPayPaymentRequestSession() {
        }

        public ShopPayPaymentRequestSession(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "checkoutUrl": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "paymentRequest": {
                        responseData.put(key, new ShopPayPaymentRequest(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "sourceIdentifier": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "token": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestSession";
        }

        /**
        * The checkout URL of the Shop Pay payment request session.
        */

        public String getCheckoutUrl() {
            return (String) get("checkoutUrl");
        }

        public ShopPayPaymentRequestSession setCheckoutUrl(String arg) {
            optimisticData.put(getKey("checkoutUrl"), arg);
            return this;
        }

        /**
        * The payment request associated with the Shop Pay payment request session.
        */

        public ShopPayPaymentRequest getPaymentRequest() {
            return (ShopPayPaymentRequest) get("paymentRequest");
        }

        public ShopPayPaymentRequestSession setPaymentRequest(ShopPayPaymentRequest arg) {
            optimisticData.put(getKey("paymentRequest"), arg);
            return this;
        }

        /**
        * The source identifier of the Shop Pay payment request session.
        */

        public String getSourceIdentifier() {
            return (String) get("sourceIdentifier");
        }

        public ShopPayPaymentRequestSession setSourceIdentifier(String arg) {
            optimisticData.put(getKey("sourceIdentifier"), arg);
            return this;
        }

        /**
        * The token of the Shop Pay payment request session.
        */

        public String getToken() {
            return (String) get("token");
        }

        public ShopPayPaymentRequestSession setToken(String arg) {
            optimisticData.put(getKey("token"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "checkoutUrl": return false;

                case "paymentRequest": return true;

                case "sourceIdentifier": return false;

                case "token": return false;

                default: return false;
            }
        }
    }

    public interface ShopPayPaymentRequestSessionCreatePayloadQueryDefinition {
        void define(ShopPayPaymentRequestSessionCreatePayloadQuery _queryBuilder);
    }

    /**
    * Return type for `shopPayPaymentRequestSessionCreate` mutation.
    */
    public static class ShopPayPaymentRequestSessionCreatePayloadQuery extends Query<ShopPayPaymentRequestSessionCreatePayloadQuery> {
        ShopPayPaymentRequestSessionCreatePayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The new Shop Pay payment request session object.
        */
        public ShopPayPaymentRequestSessionCreatePayloadQuery shopPayPaymentRequestSession(ShopPayPaymentRequestSessionQueryDefinition queryDef) {
            startField("shopPayPaymentRequestSession");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestSessionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Error codes for failed Shop Pay payment request session mutations.
        */
        public ShopPayPaymentRequestSessionCreatePayloadQuery userErrors(UserErrorsShopPayPaymentRequestSessionUserErrorsQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorsShopPayPaymentRequestSessionUserErrorsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `shopPayPaymentRequestSessionCreate` mutation.
    */
    public static class ShopPayPaymentRequestSessionCreatePayload extends AbstractResponse<ShopPayPaymentRequestSessionCreatePayload> {
        public ShopPayPaymentRequestSessionCreatePayload() {
        }

        public ShopPayPaymentRequestSessionCreatePayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shopPayPaymentRequestSession": {
                        ShopPayPaymentRequestSession optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPayPaymentRequestSession(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<UserErrorsShopPayPaymentRequestSessionUserErrors> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserErrorsShopPayPaymentRequestSessionUserErrors(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestSessionCreatePayload";
        }

        /**
        * The new Shop Pay payment request session object.
        */

        public ShopPayPaymentRequestSession getShopPayPaymentRequestSession() {
            return (ShopPayPaymentRequestSession) get("shopPayPaymentRequestSession");
        }

        public ShopPayPaymentRequestSessionCreatePayload setShopPayPaymentRequestSession(ShopPayPaymentRequestSession arg) {
            optimisticData.put(getKey("shopPayPaymentRequestSession"), arg);
            return this;
        }

        /**
        * Error codes for failed Shop Pay payment request session mutations.
        */

        public List<UserErrorsShopPayPaymentRequestSessionUserErrors> getUserErrors() {
            return (List<UserErrorsShopPayPaymentRequestSessionUserErrors>) get("userErrors");
        }

        public ShopPayPaymentRequestSessionCreatePayload setUserErrors(List<UserErrorsShopPayPaymentRequestSessionUserErrors> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shopPayPaymentRequestSession": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface ShopPayPaymentRequestSessionSubmitPayloadQueryDefinition {
        void define(ShopPayPaymentRequestSessionSubmitPayloadQuery _queryBuilder);
    }

    /**
    * Return type for `shopPayPaymentRequestSessionSubmit` mutation.
    */
    public static class ShopPayPaymentRequestSessionSubmitPayloadQuery extends Query<ShopPayPaymentRequestSessionSubmitPayloadQuery> {
        ShopPayPaymentRequestSessionSubmitPayloadQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The checkout on which the payment was applied.
        */
        public ShopPayPaymentRequestSessionSubmitPayloadQuery paymentRequestReceipt(ShopPayPaymentRequestReceiptQueryDefinition queryDef) {
            startField("paymentRequestReceipt");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestReceiptQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Error codes for failed Shop Pay payment request session mutations.
        */
        public ShopPayPaymentRequestSessionSubmitPayloadQuery userErrors(UserErrorsShopPayPaymentRequestSessionUserErrorsQueryDefinition queryDef) {
            startField("userErrors");

            _queryBuilder.append('{');
            queryDef.define(new UserErrorsShopPayPaymentRequestSessionUserErrorsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Return type for `shopPayPaymentRequestSessionSubmit` mutation.
    */
    public static class ShopPayPaymentRequestSessionSubmitPayload extends AbstractResponse<ShopPayPaymentRequestSessionSubmitPayload> {
        public ShopPayPaymentRequestSessionSubmitPayload() {
        }

        public ShopPayPaymentRequestSessionSubmitPayload(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "paymentRequestReceipt": {
                        ShopPayPaymentRequestReceipt optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ShopPayPaymentRequestReceipt(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "userErrors": {
                        List<UserErrorsShopPayPaymentRequestSessionUserErrors> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UserErrorsShopPayPaymentRequestSessionUserErrors(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestSessionSubmitPayload";
        }

        /**
        * The checkout on which the payment was applied.
        */

        public ShopPayPaymentRequestReceipt getPaymentRequestReceipt() {
            return (ShopPayPaymentRequestReceipt) get("paymentRequestReceipt");
        }

        public ShopPayPaymentRequestSessionSubmitPayload setPaymentRequestReceipt(ShopPayPaymentRequestReceipt arg) {
            optimisticData.put(getKey("paymentRequestReceipt"), arg);
            return this;
        }

        /**
        * Error codes for failed Shop Pay payment request session mutations.
        */

        public List<UserErrorsShopPayPaymentRequestSessionUserErrors> getUserErrors() {
            return (List<UserErrorsShopPayPaymentRequestSessionUserErrors>) get("userErrors");
        }

        public ShopPayPaymentRequestSessionSubmitPayload setUserErrors(List<UserErrorsShopPayPaymentRequestSessionUserErrors> arg) {
            optimisticData.put(getKey("userErrors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "paymentRequestReceipt": return true;

                case "userErrors": return true;

                default: return false;
            }
        }
    }

    public interface ShopPayPaymentRequestShippingLineQueryDefinition {
        void define(ShopPayPaymentRequestShippingLineQuery _queryBuilder);
    }

    /**
    * Represents a shipping line for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestShippingLineQuery extends Query<ShopPayPaymentRequestShippingLineQuery> {
        ShopPayPaymentRequestShippingLineQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The amount for the shipping line.
        */
        public ShopPayPaymentRequestShippingLineQuery amount(MoneyV2QueryDefinition queryDef) {
            startField("amount");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The code of the shipping line.
        */
        public ShopPayPaymentRequestShippingLineQuery code() {
            startField("code");

            return this;
        }

        /**
        * The label of the shipping line.
        */
        public ShopPayPaymentRequestShippingLineQuery label() {
            startField("label");

            return this;
        }
    }

    /**
    * Represents a shipping line for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestShippingLine extends AbstractResponse<ShopPayPaymentRequestShippingLine> {
        public ShopPayPaymentRequestShippingLine() {
        }

        public ShopPayPaymentRequestShippingLine(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "amount": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "code": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "label": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestShippingLine";
        }

        /**
        * The amount for the shipping line.
        */

        public MoneyV2 getAmount() {
            return (MoneyV2) get("amount");
        }

        public ShopPayPaymentRequestShippingLine setAmount(MoneyV2 arg) {
            optimisticData.put(getKey("amount"), arg);
            return this;
        }

        /**
        * The code of the shipping line.
        */

        public String getCode() {
            return (String) get("code");
        }

        public ShopPayPaymentRequestShippingLine setCode(String arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The label of the shipping line.
        */

        public String getLabel() {
            return (String) get("label");
        }

        public ShopPayPaymentRequestShippingLine setLabel(String arg) {
            optimisticData.put(getKey("label"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "amount": return true;

                case "code": return false;

                case "label": return false;

                default: return false;
            }
        }
    }

    public static class ShopPayPaymentRequestShippingLineInput implements Serializable {
        private Input<String> code = Input.undefined();

        private Input<String> label = Input.undefined();

        private Input<MoneyInput> amount = Input.undefined();

        public String getCode() {
            return code.getValue();
        }

        public Input<String> getCodeInput() {
            return code;
        }

        public ShopPayPaymentRequestShippingLineInput setCode(String code) {
            this.code = Input.optional(code);
            return this;
        }

        public ShopPayPaymentRequestShippingLineInput setCodeInput(Input<String> code) {
            if (code == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.code = code;
            return this;
        }

        public String getLabel() {
            return label.getValue();
        }

        public Input<String> getLabelInput() {
            return label;
        }

        public ShopPayPaymentRequestShippingLineInput setLabel(String label) {
            this.label = Input.optional(label);
            return this;
        }

        public ShopPayPaymentRequestShippingLineInput setLabelInput(Input<String> label) {
            if (label == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.label = label;
            return this;
        }

        public MoneyInput getAmount() {
            return amount.getValue();
        }

        public Input<MoneyInput> getAmountInput() {
            return amount;
        }

        public ShopPayPaymentRequestShippingLineInput setAmount(MoneyInput amount) {
            this.amount = Input.optional(amount);
            return this;
        }

        public ShopPayPaymentRequestShippingLineInput setAmountInput(Input<MoneyInput> amount) {
            if (amount == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.amount = amount;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.code.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("code:");
                if (code.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, code.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.label.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("label:");
                if (label.getValue() != null) {
                    Query.appendQuotedString(_queryBuilder, label.getValue().toString());
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.amount.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("amount:");
                if (amount.getValue() != null) {
                    amount.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public interface ShopPayPaymentRequestTotalShippingPriceQueryDefinition {
        void define(ShopPayPaymentRequestTotalShippingPriceQuery _queryBuilder);
    }

    /**
    * Represents a shipping total for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestTotalShippingPriceQuery extends Query<ShopPayPaymentRequestTotalShippingPriceQuery> {
        ShopPayPaymentRequestTotalShippingPriceQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The discounts for the shipping total.
        */
        public ShopPayPaymentRequestTotalShippingPriceQuery discounts(ShopPayPaymentRequestDiscountQueryDefinition queryDef) {
            startField("discounts");

            _queryBuilder.append('{');
            queryDef.define(new ShopPayPaymentRequestDiscountQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The final total for the shipping total.
        */
        public ShopPayPaymentRequestTotalShippingPriceQuery finalTotal(MoneyV2QueryDefinition queryDef) {
            startField("finalTotal");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The original total for the shipping total.
        */
        public ShopPayPaymentRequestTotalShippingPriceQuery originalTotal(MoneyV2QueryDefinition queryDef) {
            startField("originalTotal");

            _queryBuilder.append('{');
            queryDef.define(new MoneyV2Query(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a shipping total for a Shop Pay payment request.
    */
    public static class ShopPayPaymentRequestTotalShippingPrice extends AbstractResponse<ShopPayPaymentRequestTotalShippingPrice> {
        public ShopPayPaymentRequestTotalShippingPrice() {
        }

        public ShopPayPaymentRequestTotalShippingPrice(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discounts": {
                        List<ShopPayPaymentRequestDiscount> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new ShopPayPaymentRequestDiscount(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "finalTotal": {
                        responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "originalTotal": {
                        MoneyV2 optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MoneyV2(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPayPaymentRequestTotalShippingPrice";
        }

        /**
        * The discounts for the shipping total.
        */

        public List<ShopPayPaymentRequestDiscount> getDiscounts() {
            return (List<ShopPayPaymentRequestDiscount>) get("discounts");
        }

        public ShopPayPaymentRequestTotalShippingPrice setDiscounts(List<ShopPayPaymentRequestDiscount> arg) {
            optimisticData.put(getKey("discounts"), arg);
            return this;
        }

        /**
        * The final total for the shipping total.
        */

        public MoneyV2 getFinalTotal() {
            return (MoneyV2) get("finalTotal");
        }

        public ShopPayPaymentRequestTotalShippingPrice setFinalTotal(MoneyV2 arg) {
            optimisticData.put(getKey("finalTotal"), arg);
            return this;
        }

        /**
        * The original total for the shipping total.
        */

        public MoneyV2 getOriginalTotal() {
            return (MoneyV2) get("originalTotal");
        }

        public ShopPayPaymentRequestTotalShippingPrice setOriginalTotal(MoneyV2 arg) {
            optimisticData.put(getKey("originalTotal"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discounts": return true;

                case "finalTotal": return true;

                case "originalTotal": return true;

                default: return false;
            }
        }
    }

    public static class ShopPayPaymentRequestTotalShippingPriceInput implements Serializable {
        private Input<List<ShopPayPaymentRequestDiscountInput>> discounts = Input.undefined();

        private Input<MoneyInput> originalTotal = Input.undefined();

        private Input<MoneyInput> finalTotal = Input.undefined();

        public List<ShopPayPaymentRequestDiscountInput> getDiscounts() {
            return discounts.getValue();
        }

        public Input<List<ShopPayPaymentRequestDiscountInput>> getDiscountsInput() {
            return discounts;
        }

        public ShopPayPaymentRequestTotalShippingPriceInput setDiscounts(List<ShopPayPaymentRequestDiscountInput> discounts) {
            this.discounts = Input.optional(discounts);
            return this;
        }

        public ShopPayPaymentRequestTotalShippingPriceInput setDiscountsInput(Input<List<ShopPayPaymentRequestDiscountInput>> discounts) {
            if (discounts == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.discounts = discounts;
            return this;
        }

        public MoneyInput getOriginalTotal() {
            return originalTotal.getValue();
        }

        public Input<MoneyInput> getOriginalTotalInput() {
            return originalTotal;
        }

        public ShopPayPaymentRequestTotalShippingPriceInput setOriginalTotal(MoneyInput originalTotal) {
            this.originalTotal = Input.optional(originalTotal);
            return this;
        }

        public ShopPayPaymentRequestTotalShippingPriceInput setOriginalTotalInput(Input<MoneyInput> originalTotal) {
            if (originalTotal == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.originalTotal = originalTotal;
            return this;
        }

        public MoneyInput getFinalTotal() {
            return finalTotal.getValue();
        }

        public Input<MoneyInput> getFinalTotalInput() {
            return finalTotal;
        }

        public ShopPayPaymentRequestTotalShippingPriceInput setFinalTotal(MoneyInput finalTotal) {
            this.finalTotal = Input.optional(finalTotal);
            return this;
        }

        public ShopPayPaymentRequestTotalShippingPriceInput setFinalTotalInput(Input<MoneyInput> finalTotal) {
            if (finalTotal == null) {
                throw new IllegalArgumentException("Input can not be null");
            }
            this.finalTotal = finalTotal;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (this.discounts.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discounts:");
                if (discounts.getValue() != null) {
                    _queryBuilder.append('[');
                    {
                        String listSeperator1 = "";
                        for (ShopPayPaymentRequestDiscountInput item1 : discounts.getValue()) {
                            _queryBuilder.append(listSeperator1);
                            listSeperator1 = ",";
                            item1.appendTo(_queryBuilder);
                        }
                    }
                    _queryBuilder.append(']');
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.originalTotal.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("originalTotal:");
                if (originalTotal.getValue() != null) {
                    originalTotal.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            if (this.finalTotal.isDefined()) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("finalTotal:");
                if (finalTotal.getValue() != null) {
                    finalTotal.getValue().appendTo(_queryBuilder);
                } else {
                    _queryBuilder.append("null");
                }
            }

            _queryBuilder.append('}');
        }
    }

    public static class ShopPayWalletContentInput implements Serializable {
        private MailingAddressInput billingAddress;

        private String sessionToken;

        public ShopPayWalletContentInput(MailingAddressInput billingAddress, String sessionToken) {
            this.billingAddress = billingAddress;

            this.sessionToken = sessionToken;
        }

        public MailingAddressInput getBillingAddress() {
            return billingAddress;
        }

        public ShopPayWalletContentInput setBillingAddress(MailingAddressInput billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public String getSessionToken() {
            return sessionToken;
        }

        public ShopPayWalletContentInput setSessionToken(String sessionToken) {
            this.sessionToken = sessionToken;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("billingAddress:");
            billingAddress.appendTo(_queryBuilder);

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("sessionToken:");
            Query.appendQuotedString(_queryBuilder, sessionToken.toString());

            _queryBuilder.append('}');
        }
    }

    public interface ShopPolicyQueryDefinition {
        void define(ShopPolicyQuery _queryBuilder);
    }

    /**
    * Policy that a merchant has configured for their store, such as their refund or privacy policy.
    */
    public static class ShopPolicyQuery extends Query<ShopPolicyQuery> {
        ShopPolicyQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * Policy text, maximum size of 64kb.
        */
        public ShopPolicyQuery body() {
            startField("body");

            return this;
        }

        /**
        * Policy’s handle.
        */
        public ShopPolicyQuery handle() {
            startField("handle");

            return this;
        }

        /**
        * Policy’s title.
        */
        public ShopPolicyQuery title() {
            startField("title");

            return this;
        }

        /**
        * Public URL to the policy.
        */
        public ShopPolicyQuery url() {
            startField("url");

            return this;
        }
    }

    /**
    * Policy that a merchant has configured for their store, such as their refund or privacy policy.
    */
    public static class ShopPolicy extends AbstractResponse<ShopPolicy> implements MenuItemResource, Node {
        public ShopPolicy() {
        }

        public ShopPolicy(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "body": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "url": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public ShopPolicy(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "ShopPolicy";
        }

        /**
        * Policy text, maximum size of 64kb.
        */

        public String getBody() {
            return (String) get("body");
        }

        public ShopPolicy setBody(String arg) {
            optimisticData.put(getKey("body"), arg);
            return this;
        }

        /**
        * Policy’s handle.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public ShopPolicy setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * Policy’s title.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public ShopPolicy setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * Public URL to the policy.
        */

        public String getUrl() {
            return (String) get("url");
        }

        public ShopPolicy setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "body": return false;

                case "handle": return false;

                case "id": return false;

                case "title": return false;

                case "url": return false;

                default: return false;
            }
        }
    }

    public interface ShopPolicyWithDefaultQueryDefinition {
        void define(ShopPolicyWithDefaultQuery _queryBuilder);
    }

    /**
    * A policy for the store that comes with a default value, such as a subscription policy.
    * If the merchant hasn't configured a policy for their store, then the policy will return the default
    * value.
    * Otherwise, the policy will return the merchant-configured value.
    */
    public static class ShopPolicyWithDefaultQuery extends Query<ShopPolicyWithDefaultQuery> {
        ShopPolicyWithDefaultQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The text of the policy. Maximum size: 64KB.
        */
        public ShopPolicyWithDefaultQuery body() {
            startField("body");

            return this;
        }

        /**
        * The handle of the policy.
        */
        public ShopPolicyWithDefaultQuery handle() {
            startField("handle");

            return this;
        }

        /**
        * The unique ID of the policy. A default policy doesn't have an ID.
        */
        public ShopPolicyWithDefaultQuery id() {
            startField("id");

            return this;
        }

        /**
        * The title of the policy.
        */
        public ShopPolicyWithDefaultQuery title() {
            startField("title");

            return this;
        }

        /**
        * Public URL to the policy.
        */
        public ShopPolicyWithDefaultQuery url() {
            startField("url");

            return this;
        }
    }

    /**
    * A policy for the store that comes with a default value, such as a subscription policy.
    * If the merchant hasn't configured a policy for their store, then the policy will return the default
    * value.
    * Otherwise, the policy will return the merchant-configured value.
    */
    public static class ShopPolicyWithDefault extends AbstractResponse<ShopPolicyWithDefault> {
        public ShopPolicyWithDefault() {
        }

        public ShopPolicyWithDefault(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "body": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "handle": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "id": {
                        ID optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new ID(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "url": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "ShopPolicyWithDefault";
        }

        /**
        * The text of the policy. Maximum size: 64KB.
        */

        public String getBody() {
            return (String) get("body");
        }

        public ShopPolicyWithDefault setBody(String arg) {
            optimisticData.put(getKey("body"), arg);
            return this;
        }

        /**
        * The handle of the policy.
        */

        public String getHandle() {
            return (String) get("handle");
        }

        public ShopPolicyWithDefault setHandle(String arg) {
            optimisticData.put(getKey("handle"), arg);
            return this;
        }

        /**
        * The unique ID of the policy. A default policy doesn't have an ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        public ShopPolicyWithDefault setId(ID arg) {
            optimisticData.put(getKey("id"), arg);
            return this;
        }

        /**
        * The title of the policy.
        */

        public String getTitle() {
            return (String) get("title");
        }

        public ShopPolicyWithDefault setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        /**
        * Public URL to the policy.
        */

        public String getUrl() {
            return (String) get("url");
        }

        public ShopPolicyWithDefault setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "body": return false;

                case "handle": return false;

                case "id": return false;

                case "title": return false;

                case "url": return false;

                default: return false;
            }
        }
    }

    public interface StoreAvailabilityQueryDefinition {
        void define(StoreAvailabilityQuery _queryBuilder);
    }

    /**
    * The availability of a product variant at a particular location.
    * Local pick-up must be enabled in the  store's shipping settings, otherwise this will return an empty
    * result.
    */
    public static class StoreAvailabilityQuery extends Query<StoreAvailabilityQuery> {
        StoreAvailabilityQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * Whether the product variant is in-stock at this location.
        */
        public StoreAvailabilityQuery available() {
            startField("available");

            return this;
        }

        /**
        * The location where this product variant is stocked at.
        */
        public StoreAvailabilityQuery location(LocationQueryDefinition queryDef) {
            startField("location");

            _queryBuilder.append('{');
            queryDef.define(new LocationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Returns the estimated amount of time it takes for pickup to be ready (Example: Usually ready in 24
        * hours).
        */
        public StoreAvailabilityQuery pickUpTime() {
            startField("pickUpTime");

            return this;
        }

        /**
        * The quantity of the product variant in-stock at this location.
        */
        public StoreAvailabilityQuery quantityAvailable() {
            startField("quantityAvailable");

            return this;
        }
    }

    /**
    * The availability of a product variant at a particular location.
    * Local pick-up must be enabled in the  store's shipping settings, otherwise this will return an empty
    * result.
    */
    public static class StoreAvailability extends AbstractResponse<StoreAvailability> {
        public StoreAvailability() {
        }

        public StoreAvailability(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "available": {
                        responseData.put(key, jsonAsBoolean(field.getValue(), key));

                        break;
                    }

                    case "location": {
                        responseData.put(key, new Location(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "pickUpTime": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "quantityAvailable": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "StoreAvailability";
        }

        /**
        * Whether the product variant is in-stock at this location.
        */

        public Boolean getAvailable() {
            return (Boolean) get("available");
        }

        public StoreAvailability setAvailable(Boolean arg) {
            optimisticData.put(getKey("available"), arg);
            return this;
        }

        /**
        * The location where this product variant is stocked at.
        */

        public Location getLocation() {
            return (Location) get("location");
        }

        public StoreAvailability setLocation(Location arg) {
            optimisticData.put(getKey("location"), arg);
            return this;
        }

        /**
        * Returns the estimated amount of time it takes for pickup to be ready (Example: Usually ready in 24
        * hours).
        */

        public String getPickUpTime() {
            return (String) get("pickUpTime");
        }

        public StoreAvailability setPickUpTime(String arg) {
            optimisticData.put(getKey("pickUpTime"), arg);
            return this;
        }

        /**
        * The quantity of the product variant in-stock at this location.
        */

        public Integer getQuantityAvailable() {
            return (Integer) get("quantityAvailable");
        }

        public StoreAvailability setQuantityAvailable(Integer arg) {
            optimisticData.put(getKey("quantityAvailable"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "available": return false;

                case "location": return true;

                case "pickUpTime": return false;

                case "quantityAvailable": return false;

                default: return false;
            }
        }
    }

    public interface StoreAvailabilityConnectionQueryDefinition {
        void define(StoreAvailabilityConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple StoreAvailabilities.
    */
    public static class StoreAvailabilityConnectionQuery extends Query<StoreAvailabilityConnectionQuery> {
        StoreAvailabilityConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public StoreAvailabilityConnectionQuery edges(StoreAvailabilityEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new StoreAvailabilityEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in StoreAvailabilityEdge.
        */
        public StoreAvailabilityConnectionQuery nodes(StoreAvailabilityQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new StoreAvailabilityQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public StoreAvailabilityConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple StoreAvailabilities.
    */
    public static class StoreAvailabilityConnection extends AbstractResponse<StoreAvailabilityConnection> {
        public StoreAvailabilityConnection() {
        }

        public StoreAvailabilityConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<StoreAvailabilityEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new StoreAvailabilityEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<StoreAvailability> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new StoreAvailability(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "StoreAvailabilityConnection";
        }

        /**
        * A list of edges.
        */

        public List<StoreAvailabilityEdge> getEdges() {
            return (List<StoreAvailabilityEdge>) get("edges");
        }

        public StoreAvailabilityConnection setEdges(List<StoreAvailabilityEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in StoreAvailabilityEdge.
        */

        public List<StoreAvailability> getNodes() {
            return (List<StoreAvailability>) get("nodes");
        }

        public StoreAvailabilityConnection setNodes(List<StoreAvailability> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public StoreAvailabilityConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface StoreAvailabilityEdgeQueryDefinition {
        void define(StoreAvailabilityEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one StoreAvailability and a cursor during pagination.
    */
    public static class StoreAvailabilityEdgeQuery extends Query<StoreAvailabilityEdgeQuery> {
        StoreAvailabilityEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public StoreAvailabilityEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of StoreAvailabilityEdge.
        */
        public StoreAvailabilityEdgeQuery node(StoreAvailabilityQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new StoreAvailabilityQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one StoreAvailability and a cursor during pagination.
    */
    public static class StoreAvailabilityEdge extends AbstractResponse<StoreAvailabilityEdge> {
        public StoreAvailabilityEdge() {
        }

        public StoreAvailabilityEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new StoreAvailability(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "StoreAvailabilityEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public StoreAvailabilityEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of StoreAvailabilityEdge.
        */

        public StoreAvailability getNode() {
            return (StoreAvailability) get("node");
        }

        public StoreAvailabilityEdge setNode(StoreAvailability arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface StringConnectionQueryDefinition {
        void define(StringConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through a list of Strings.
    */
    public static class StringConnectionQuery extends Query<StringConnectionQuery> {
        StringConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public StringConnectionQuery edges(StringEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new StringEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public StringConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through a list of Strings.
    */
    public static class StringConnection extends AbstractResponse<StringConnection> {
        public StringConnection() {
        }

        public StringConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<StringEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new StringEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "StringConnection";
        }

        /**
        * A list of edges.
        */

        public List<StringEdge> getEdges() {
            return (List<StringEdge>) get("edges");
        }

        public StringConnection setEdges(List<StringEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public StringConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface StringEdgeQueryDefinition {
        void define(StringEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one String and a cursor during pagination.
    */
    public static class StringEdgeQuery extends Query<StringEdgeQuery> {
        StringEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public StringEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of StringEdge.
        */
        public StringEdgeQuery node() {
            startField("node");

            return this;
        }
    }

    /**
    * An auto-generated type which holds one String and a cursor during pagination.
    */
    public static class StringEdge extends AbstractResponse<StringEdge> {
        public StringEdge() {
        }

        public StringEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "StringEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public StringEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of StringEdge.
        */

        public String getNode() {
            return (String) get("node");
        }

        public StringEdge setNode(String arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return false;

                default: return false;
            }
        }
    }

    public interface SubmissionErrorQueryDefinition {
        void define(SubmissionErrorQuery _queryBuilder);
    }

    /**
    * An error that occurred during cart submit for completion.
    */
    public static class SubmissionErrorQuery extends Query<SubmissionErrorQuery> {
        SubmissionErrorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The error code.
        */
        public SubmissionErrorQuery code() {
            startField("code");

            return this;
        }

        /**
        * The error message.
        */
        public SubmissionErrorQuery message() {
            startField("message");

            return this;
        }
    }

    /**
    * An error that occurred during cart submit for completion.
    */
    public static class SubmissionError extends AbstractResponse<SubmissionError> {
        public SubmissionError() {
        }

        public SubmissionError(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        responseData.put(key, SubmissionErrorCode.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "message": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SubmissionError";
        }

        /**
        * The error code.
        */

        public SubmissionErrorCode getCode() {
            return (SubmissionErrorCode) get("code");
        }

        public SubmissionError setCode(SubmissionErrorCode arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public SubmissionError setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    /**
    * The code of the error that occurred during cart submit for completion.
    */
    public enum SubmissionErrorCode {
        BUYER_IDENTITY_EMAIL_IS_INVALID,

        BUYER_IDENTITY_EMAIL_REQUIRED,

        BUYER_IDENTITY_PHONE_IS_INVALID,

        DELIVERY_ADDRESS1_INVALID,

        DELIVERY_ADDRESS1_REQUIRED,

        DELIVERY_ADDRESS1_TOO_LONG,

        DELIVERY_ADDRESS2_INVALID,

        DELIVERY_ADDRESS2_REQUIRED,

        DELIVERY_ADDRESS2_TOO_LONG,

        DELIVERY_ADDRESS_REQUIRED,

        DELIVERY_CITY_INVALID,

        DELIVERY_CITY_REQUIRED,

        DELIVERY_CITY_TOO_LONG,

        DELIVERY_COMPANY_INVALID,

        DELIVERY_COMPANY_REQUIRED,

        DELIVERY_COMPANY_TOO_LONG,

        DELIVERY_COUNTRY_REQUIRED,

        DELIVERY_FIRST_NAME_INVALID,

        DELIVERY_FIRST_NAME_REQUIRED,

        DELIVERY_FIRST_NAME_TOO_LONG,

        DELIVERY_INVALID_POSTAL_CODE_FOR_COUNTRY,

        DELIVERY_INVALID_POSTAL_CODE_FOR_ZONE,

        DELIVERY_LAST_NAME_INVALID,

        DELIVERY_LAST_NAME_REQUIRED,

        DELIVERY_LAST_NAME_TOO_LONG,

        DELIVERY_NO_DELIVERY_AVAILABLE,

        DELIVERY_NO_DELIVERY_AVAILABLE_FOR_MERCHANDISE_LINE,

        DELIVERY_OPTIONS_PHONE_NUMBER_INVALID,

        DELIVERY_OPTIONS_PHONE_NUMBER_REQUIRED,

        DELIVERY_PHONE_NUMBER_INVALID,

        DELIVERY_PHONE_NUMBER_REQUIRED,

        DELIVERY_POSTAL_CODE_INVALID,

        DELIVERY_POSTAL_CODE_REQUIRED,

        DELIVERY_ZONE_NOT_FOUND,

        DELIVERY_ZONE_REQUIRED_FOR_COUNTRY,

        ERROR,

        MERCHANDISE_LINE_LIMIT_REACHED,

        MERCHANDISE_NOT_APPLICABLE,

        MERCHANDISE_NOT_ENOUGH_STOCK_AVAILABLE,

        MERCHANDISE_OUT_OF_STOCK,

        MERCHANDISE_PRODUCT_NOT_PUBLISHED,

        NO_DELIVERY_GROUP_SELECTED,

        PAYMENTS_ADDRESS1_INVALID,

        PAYMENTS_ADDRESS1_REQUIRED,

        PAYMENTS_ADDRESS1_TOO_LONG,

        PAYMENTS_ADDRESS2_INVALID,

        PAYMENTS_ADDRESS2_REQUIRED,

        PAYMENTS_ADDRESS2_TOO_LONG,

        PAYMENTS_BILLING_ADDRESS_ZONE_NOT_FOUND,

        PAYMENTS_BILLING_ADDRESS_ZONE_REQUIRED_FOR_COUNTRY,

        PAYMENTS_CITY_INVALID,

        PAYMENTS_CITY_REQUIRED,

        PAYMENTS_CITY_TOO_LONG,

        PAYMENTS_COMPANY_INVALID,

        PAYMENTS_COMPANY_REQUIRED,

        PAYMENTS_COMPANY_TOO_LONG,

        PAYMENTS_COUNTRY_REQUIRED,

        PAYMENTS_CREDIT_CARD_BASE_EXPIRED,

        PAYMENTS_CREDIT_CARD_BASE_GATEWAY_NOT_SUPPORTED,

        PAYMENTS_CREDIT_CARD_BASE_INVALID_START_DATE_OR_ISSUE_NUMBER_FOR_DEBIT,

        PAYMENTS_CREDIT_CARD_BRAND_NOT_SUPPORTED,

        PAYMENTS_CREDIT_CARD_FIRST_NAME_BLANK,

        PAYMENTS_CREDIT_CARD_GENERIC,

        PAYMENTS_CREDIT_CARD_LAST_NAME_BLANK,

        PAYMENTS_CREDIT_CARD_MONTH_INCLUSION,

        PAYMENTS_CREDIT_CARD_NAME_INVALID,

        PAYMENTS_CREDIT_CARD_NUMBER_INVALID,

        PAYMENTS_CREDIT_CARD_NUMBER_INVALID_FORMAT,

        PAYMENTS_CREDIT_CARD_SESSION_ID,

        PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_BLANK,

        PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_INVALID_FOR_CARD_TYPE,

        PAYMENTS_CREDIT_CARD_YEAR_EXPIRED,

        PAYMENTS_CREDIT_CARD_YEAR_INVALID_EXPIRY_YEAR,

        PAYMENTS_FIRST_NAME_INVALID,

        PAYMENTS_FIRST_NAME_REQUIRED,

        PAYMENTS_FIRST_NAME_TOO_LONG,

        PAYMENTS_INVALID_POSTAL_CODE_FOR_COUNTRY,

        PAYMENTS_INVALID_POSTAL_CODE_FOR_ZONE,

        PAYMENTS_LAST_NAME_INVALID,

        PAYMENTS_LAST_NAME_REQUIRED,

        PAYMENTS_LAST_NAME_TOO_LONG,

        PAYMENTS_METHOD_REQUIRED,

        PAYMENTS_METHOD_UNAVAILABLE,

        PAYMENTS_PHONE_NUMBER_INVALID,

        PAYMENTS_PHONE_NUMBER_REQUIRED,

        PAYMENTS_POSTAL_CODE_INVALID,

        PAYMENTS_POSTAL_CODE_REQUIRED,

        PAYMENTS_SHOPIFY_PAYMENTS_REQUIRED,

        PAYMENTS_UNACCEPTABLE_PAYMENT_AMOUNT,

        PAYMENTS_WALLET_CONTENT_MISSING,

        TAXES_DELIVERY_GROUP_ID_NOT_FOUND,

        TAXES_LINE_ID_NOT_FOUND,

        TAXES_MUST_BE_DEFINED,

        UNKNOWN_VALUE;

        public static SubmissionErrorCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "BUYER_IDENTITY_EMAIL_IS_INVALID": {
                    return BUYER_IDENTITY_EMAIL_IS_INVALID;
                }

                case "BUYER_IDENTITY_EMAIL_REQUIRED": {
                    return BUYER_IDENTITY_EMAIL_REQUIRED;
                }

                case "BUYER_IDENTITY_PHONE_IS_INVALID": {
                    return BUYER_IDENTITY_PHONE_IS_INVALID;
                }

                case "DELIVERY_ADDRESS1_INVALID": {
                    return DELIVERY_ADDRESS1_INVALID;
                }

                case "DELIVERY_ADDRESS1_REQUIRED": {
                    return DELIVERY_ADDRESS1_REQUIRED;
                }

                case "DELIVERY_ADDRESS1_TOO_LONG": {
                    return DELIVERY_ADDRESS1_TOO_LONG;
                }

                case "DELIVERY_ADDRESS2_INVALID": {
                    return DELIVERY_ADDRESS2_INVALID;
                }

                case "DELIVERY_ADDRESS2_REQUIRED": {
                    return DELIVERY_ADDRESS2_REQUIRED;
                }

                case "DELIVERY_ADDRESS2_TOO_LONG": {
                    return DELIVERY_ADDRESS2_TOO_LONG;
                }

                case "DELIVERY_ADDRESS_REQUIRED": {
                    return DELIVERY_ADDRESS_REQUIRED;
                }

                case "DELIVERY_CITY_INVALID": {
                    return DELIVERY_CITY_INVALID;
                }

                case "DELIVERY_CITY_REQUIRED": {
                    return DELIVERY_CITY_REQUIRED;
                }

                case "DELIVERY_CITY_TOO_LONG": {
                    return DELIVERY_CITY_TOO_LONG;
                }

                case "DELIVERY_COMPANY_INVALID": {
                    return DELIVERY_COMPANY_INVALID;
                }

                case "DELIVERY_COMPANY_REQUIRED": {
                    return DELIVERY_COMPANY_REQUIRED;
                }

                case "DELIVERY_COMPANY_TOO_LONG": {
                    return DELIVERY_COMPANY_TOO_LONG;
                }

                case "DELIVERY_COUNTRY_REQUIRED": {
                    return DELIVERY_COUNTRY_REQUIRED;
                }

                case "DELIVERY_FIRST_NAME_INVALID": {
                    return DELIVERY_FIRST_NAME_INVALID;
                }

                case "DELIVERY_FIRST_NAME_REQUIRED": {
                    return DELIVERY_FIRST_NAME_REQUIRED;
                }

                case "DELIVERY_FIRST_NAME_TOO_LONG": {
                    return DELIVERY_FIRST_NAME_TOO_LONG;
                }

                case "DELIVERY_INVALID_POSTAL_CODE_FOR_COUNTRY": {
                    return DELIVERY_INVALID_POSTAL_CODE_FOR_COUNTRY;
                }

                case "DELIVERY_INVALID_POSTAL_CODE_FOR_ZONE": {
                    return DELIVERY_INVALID_POSTAL_CODE_FOR_ZONE;
                }

                case "DELIVERY_LAST_NAME_INVALID": {
                    return DELIVERY_LAST_NAME_INVALID;
                }

                case "DELIVERY_LAST_NAME_REQUIRED": {
                    return DELIVERY_LAST_NAME_REQUIRED;
                }

                case "DELIVERY_LAST_NAME_TOO_LONG": {
                    return DELIVERY_LAST_NAME_TOO_LONG;
                }

                case "DELIVERY_NO_DELIVERY_AVAILABLE": {
                    return DELIVERY_NO_DELIVERY_AVAILABLE;
                }

                case "DELIVERY_NO_DELIVERY_AVAILABLE_FOR_MERCHANDISE_LINE": {
                    return DELIVERY_NO_DELIVERY_AVAILABLE_FOR_MERCHANDISE_LINE;
                }

                case "DELIVERY_OPTIONS_PHONE_NUMBER_INVALID": {
                    return DELIVERY_OPTIONS_PHONE_NUMBER_INVALID;
                }

                case "DELIVERY_OPTIONS_PHONE_NUMBER_REQUIRED": {
                    return DELIVERY_OPTIONS_PHONE_NUMBER_REQUIRED;
                }

                case "DELIVERY_PHONE_NUMBER_INVALID": {
                    return DELIVERY_PHONE_NUMBER_INVALID;
                }

                case "DELIVERY_PHONE_NUMBER_REQUIRED": {
                    return DELIVERY_PHONE_NUMBER_REQUIRED;
                }

                case "DELIVERY_POSTAL_CODE_INVALID": {
                    return DELIVERY_POSTAL_CODE_INVALID;
                }

                case "DELIVERY_POSTAL_CODE_REQUIRED": {
                    return DELIVERY_POSTAL_CODE_REQUIRED;
                }

                case "DELIVERY_ZONE_NOT_FOUND": {
                    return DELIVERY_ZONE_NOT_FOUND;
                }

                case "DELIVERY_ZONE_REQUIRED_FOR_COUNTRY": {
                    return DELIVERY_ZONE_REQUIRED_FOR_COUNTRY;
                }

                case "ERROR": {
                    return ERROR;
                }

                case "MERCHANDISE_LINE_LIMIT_REACHED": {
                    return MERCHANDISE_LINE_LIMIT_REACHED;
                }

                case "MERCHANDISE_NOT_APPLICABLE": {
                    return MERCHANDISE_NOT_APPLICABLE;
                }

                case "MERCHANDISE_NOT_ENOUGH_STOCK_AVAILABLE": {
                    return MERCHANDISE_NOT_ENOUGH_STOCK_AVAILABLE;
                }

                case "MERCHANDISE_OUT_OF_STOCK": {
                    return MERCHANDISE_OUT_OF_STOCK;
                }

                case "MERCHANDISE_PRODUCT_NOT_PUBLISHED": {
                    return MERCHANDISE_PRODUCT_NOT_PUBLISHED;
                }

                case "NO_DELIVERY_GROUP_SELECTED": {
                    return NO_DELIVERY_GROUP_SELECTED;
                }

                case "PAYMENTS_ADDRESS1_INVALID": {
                    return PAYMENTS_ADDRESS1_INVALID;
                }

                case "PAYMENTS_ADDRESS1_REQUIRED": {
                    return PAYMENTS_ADDRESS1_REQUIRED;
                }

                case "PAYMENTS_ADDRESS1_TOO_LONG": {
                    return PAYMENTS_ADDRESS1_TOO_LONG;
                }

                case "PAYMENTS_ADDRESS2_INVALID": {
                    return PAYMENTS_ADDRESS2_INVALID;
                }

                case "PAYMENTS_ADDRESS2_REQUIRED": {
                    return PAYMENTS_ADDRESS2_REQUIRED;
                }

                case "PAYMENTS_ADDRESS2_TOO_LONG": {
                    return PAYMENTS_ADDRESS2_TOO_LONG;
                }

                case "PAYMENTS_BILLING_ADDRESS_ZONE_NOT_FOUND": {
                    return PAYMENTS_BILLING_ADDRESS_ZONE_NOT_FOUND;
                }

                case "PAYMENTS_BILLING_ADDRESS_ZONE_REQUIRED_FOR_COUNTRY": {
                    return PAYMENTS_BILLING_ADDRESS_ZONE_REQUIRED_FOR_COUNTRY;
                }

                case "PAYMENTS_CITY_INVALID": {
                    return PAYMENTS_CITY_INVALID;
                }

                case "PAYMENTS_CITY_REQUIRED": {
                    return PAYMENTS_CITY_REQUIRED;
                }

                case "PAYMENTS_CITY_TOO_LONG": {
                    return PAYMENTS_CITY_TOO_LONG;
                }

                case "PAYMENTS_COMPANY_INVALID": {
                    return PAYMENTS_COMPANY_INVALID;
                }

                case "PAYMENTS_COMPANY_REQUIRED": {
                    return PAYMENTS_COMPANY_REQUIRED;
                }

                case "PAYMENTS_COMPANY_TOO_LONG": {
                    return PAYMENTS_COMPANY_TOO_LONG;
                }

                case "PAYMENTS_COUNTRY_REQUIRED": {
                    return PAYMENTS_COUNTRY_REQUIRED;
                }

                case "PAYMENTS_CREDIT_CARD_BASE_EXPIRED": {
                    return PAYMENTS_CREDIT_CARD_BASE_EXPIRED;
                }

                case "PAYMENTS_CREDIT_CARD_BASE_GATEWAY_NOT_SUPPORTED": {
                    return PAYMENTS_CREDIT_CARD_BASE_GATEWAY_NOT_SUPPORTED;
                }

                case "PAYMENTS_CREDIT_CARD_BASE_INVALID_START_DATE_OR_ISSUE_NUMBER_FOR_DEBIT": {
                    return PAYMENTS_CREDIT_CARD_BASE_INVALID_START_DATE_OR_ISSUE_NUMBER_FOR_DEBIT;
                }

                case "PAYMENTS_CREDIT_CARD_BRAND_NOT_SUPPORTED": {
                    return PAYMENTS_CREDIT_CARD_BRAND_NOT_SUPPORTED;
                }

                case "PAYMENTS_CREDIT_CARD_FIRST_NAME_BLANK": {
                    return PAYMENTS_CREDIT_CARD_FIRST_NAME_BLANK;
                }

                case "PAYMENTS_CREDIT_CARD_GENERIC": {
                    return PAYMENTS_CREDIT_CARD_GENERIC;
                }

                case "PAYMENTS_CREDIT_CARD_LAST_NAME_BLANK": {
                    return PAYMENTS_CREDIT_CARD_LAST_NAME_BLANK;
                }

                case "PAYMENTS_CREDIT_CARD_MONTH_INCLUSION": {
                    return PAYMENTS_CREDIT_CARD_MONTH_INCLUSION;
                }

                case "PAYMENTS_CREDIT_CARD_NAME_INVALID": {
                    return PAYMENTS_CREDIT_CARD_NAME_INVALID;
                }

                case "PAYMENTS_CREDIT_CARD_NUMBER_INVALID": {
                    return PAYMENTS_CREDIT_CARD_NUMBER_INVALID;
                }

                case "PAYMENTS_CREDIT_CARD_NUMBER_INVALID_FORMAT": {
                    return PAYMENTS_CREDIT_CARD_NUMBER_INVALID_FORMAT;
                }

                case "PAYMENTS_CREDIT_CARD_SESSION_ID": {
                    return PAYMENTS_CREDIT_CARD_SESSION_ID;
                }

                case "PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_BLANK": {
                    return PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_BLANK;
                }

                case "PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_INVALID_FOR_CARD_TYPE": {
                    return PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_INVALID_FOR_CARD_TYPE;
                }

                case "PAYMENTS_CREDIT_CARD_YEAR_EXPIRED": {
                    return PAYMENTS_CREDIT_CARD_YEAR_EXPIRED;
                }

                case "PAYMENTS_CREDIT_CARD_YEAR_INVALID_EXPIRY_YEAR": {
                    return PAYMENTS_CREDIT_CARD_YEAR_INVALID_EXPIRY_YEAR;
                }

                case "PAYMENTS_FIRST_NAME_INVALID": {
                    return PAYMENTS_FIRST_NAME_INVALID;
                }

                case "PAYMENTS_FIRST_NAME_REQUIRED": {
                    return PAYMENTS_FIRST_NAME_REQUIRED;
                }

                case "PAYMENTS_FIRST_NAME_TOO_LONG": {
                    return PAYMENTS_FIRST_NAME_TOO_LONG;
                }

                case "PAYMENTS_INVALID_POSTAL_CODE_FOR_COUNTRY": {
                    return PAYMENTS_INVALID_POSTAL_CODE_FOR_COUNTRY;
                }

                case "PAYMENTS_INVALID_POSTAL_CODE_FOR_ZONE": {
                    return PAYMENTS_INVALID_POSTAL_CODE_FOR_ZONE;
                }

                case "PAYMENTS_LAST_NAME_INVALID": {
                    return PAYMENTS_LAST_NAME_INVALID;
                }

                case "PAYMENTS_LAST_NAME_REQUIRED": {
                    return PAYMENTS_LAST_NAME_REQUIRED;
                }

                case "PAYMENTS_LAST_NAME_TOO_LONG": {
                    return PAYMENTS_LAST_NAME_TOO_LONG;
                }

                case "PAYMENTS_METHOD_REQUIRED": {
                    return PAYMENTS_METHOD_REQUIRED;
                }

                case "PAYMENTS_METHOD_UNAVAILABLE": {
                    return PAYMENTS_METHOD_UNAVAILABLE;
                }

                case "PAYMENTS_PHONE_NUMBER_INVALID": {
                    return PAYMENTS_PHONE_NUMBER_INVALID;
                }

                case "PAYMENTS_PHONE_NUMBER_REQUIRED": {
                    return PAYMENTS_PHONE_NUMBER_REQUIRED;
                }

                case "PAYMENTS_POSTAL_CODE_INVALID": {
                    return PAYMENTS_POSTAL_CODE_INVALID;
                }

                case "PAYMENTS_POSTAL_CODE_REQUIRED": {
                    return PAYMENTS_POSTAL_CODE_REQUIRED;
                }

                case "PAYMENTS_SHOPIFY_PAYMENTS_REQUIRED": {
                    return PAYMENTS_SHOPIFY_PAYMENTS_REQUIRED;
                }

                case "PAYMENTS_UNACCEPTABLE_PAYMENT_AMOUNT": {
                    return PAYMENTS_UNACCEPTABLE_PAYMENT_AMOUNT;
                }

                case "PAYMENTS_WALLET_CONTENT_MISSING": {
                    return PAYMENTS_WALLET_CONTENT_MISSING;
                }

                case "TAXES_DELIVERY_GROUP_ID_NOT_FOUND": {
                    return TAXES_DELIVERY_GROUP_ID_NOT_FOUND;
                }

                case "TAXES_LINE_ID_NOT_FOUND": {
                    return TAXES_LINE_ID_NOT_FOUND;
                }

                case "TAXES_MUST_BE_DEFINED": {
                    return TAXES_MUST_BE_DEFINED;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case BUYER_IDENTITY_EMAIL_IS_INVALID: {
                    return "BUYER_IDENTITY_EMAIL_IS_INVALID";
                }

                case BUYER_IDENTITY_EMAIL_REQUIRED: {
                    return "BUYER_IDENTITY_EMAIL_REQUIRED";
                }

                case BUYER_IDENTITY_PHONE_IS_INVALID: {
                    return "BUYER_IDENTITY_PHONE_IS_INVALID";
                }

                case DELIVERY_ADDRESS1_INVALID: {
                    return "DELIVERY_ADDRESS1_INVALID";
                }

                case DELIVERY_ADDRESS1_REQUIRED: {
                    return "DELIVERY_ADDRESS1_REQUIRED";
                }

                case DELIVERY_ADDRESS1_TOO_LONG: {
                    return "DELIVERY_ADDRESS1_TOO_LONG";
                }

                case DELIVERY_ADDRESS2_INVALID: {
                    return "DELIVERY_ADDRESS2_INVALID";
                }

                case DELIVERY_ADDRESS2_REQUIRED: {
                    return "DELIVERY_ADDRESS2_REQUIRED";
                }

                case DELIVERY_ADDRESS2_TOO_LONG: {
                    return "DELIVERY_ADDRESS2_TOO_LONG";
                }

                case DELIVERY_ADDRESS_REQUIRED: {
                    return "DELIVERY_ADDRESS_REQUIRED";
                }

                case DELIVERY_CITY_INVALID: {
                    return "DELIVERY_CITY_INVALID";
                }

                case DELIVERY_CITY_REQUIRED: {
                    return "DELIVERY_CITY_REQUIRED";
                }

                case DELIVERY_CITY_TOO_LONG: {
                    return "DELIVERY_CITY_TOO_LONG";
                }

                case DELIVERY_COMPANY_INVALID: {
                    return "DELIVERY_COMPANY_INVALID";
                }

                case DELIVERY_COMPANY_REQUIRED: {
                    return "DELIVERY_COMPANY_REQUIRED";
                }

                case DELIVERY_COMPANY_TOO_LONG: {
                    return "DELIVERY_COMPANY_TOO_LONG";
                }

                case DELIVERY_COUNTRY_REQUIRED: {
                    return "DELIVERY_COUNTRY_REQUIRED";
                }

                case DELIVERY_FIRST_NAME_INVALID: {
                    return "DELIVERY_FIRST_NAME_INVALID";
                }

                case DELIVERY_FIRST_NAME_REQUIRED: {
                    return "DELIVERY_FIRST_NAME_REQUIRED";
                }

                case DELIVERY_FIRST_NAME_TOO_LONG: {
                    return "DELIVERY_FIRST_NAME_TOO_LONG";
                }

                case DELIVERY_INVALID_POSTAL_CODE_FOR_COUNTRY: {
                    return "DELIVERY_INVALID_POSTAL_CODE_FOR_COUNTRY";
                }

                case DELIVERY_INVALID_POSTAL_CODE_FOR_ZONE: {
                    return "DELIVERY_INVALID_POSTAL_CODE_FOR_ZONE";
                }

                case DELIVERY_LAST_NAME_INVALID: {
                    return "DELIVERY_LAST_NAME_INVALID";
                }

                case DELIVERY_LAST_NAME_REQUIRED: {
                    return "DELIVERY_LAST_NAME_REQUIRED";
                }

                case DELIVERY_LAST_NAME_TOO_LONG: {
                    return "DELIVERY_LAST_NAME_TOO_LONG";
                }

                case DELIVERY_NO_DELIVERY_AVAILABLE: {
                    return "DELIVERY_NO_DELIVERY_AVAILABLE";
                }

                case DELIVERY_NO_DELIVERY_AVAILABLE_FOR_MERCHANDISE_LINE: {
                    return "DELIVERY_NO_DELIVERY_AVAILABLE_FOR_MERCHANDISE_LINE";
                }

                case DELIVERY_OPTIONS_PHONE_NUMBER_INVALID: {
                    return "DELIVERY_OPTIONS_PHONE_NUMBER_INVALID";
                }

                case DELIVERY_OPTIONS_PHONE_NUMBER_REQUIRED: {
                    return "DELIVERY_OPTIONS_PHONE_NUMBER_REQUIRED";
                }

                case DELIVERY_PHONE_NUMBER_INVALID: {
                    return "DELIVERY_PHONE_NUMBER_INVALID";
                }

                case DELIVERY_PHONE_NUMBER_REQUIRED: {
                    return "DELIVERY_PHONE_NUMBER_REQUIRED";
                }

                case DELIVERY_POSTAL_CODE_INVALID: {
                    return "DELIVERY_POSTAL_CODE_INVALID";
                }

                case DELIVERY_POSTAL_CODE_REQUIRED: {
                    return "DELIVERY_POSTAL_CODE_REQUIRED";
                }

                case DELIVERY_ZONE_NOT_FOUND: {
                    return "DELIVERY_ZONE_NOT_FOUND";
                }

                case DELIVERY_ZONE_REQUIRED_FOR_COUNTRY: {
                    return "DELIVERY_ZONE_REQUIRED_FOR_COUNTRY";
                }

                case ERROR: {
                    return "ERROR";
                }

                case MERCHANDISE_LINE_LIMIT_REACHED: {
                    return "MERCHANDISE_LINE_LIMIT_REACHED";
                }

                case MERCHANDISE_NOT_APPLICABLE: {
                    return "MERCHANDISE_NOT_APPLICABLE";
                }

                case MERCHANDISE_NOT_ENOUGH_STOCK_AVAILABLE: {
                    return "MERCHANDISE_NOT_ENOUGH_STOCK_AVAILABLE";
                }

                case MERCHANDISE_OUT_OF_STOCK: {
                    return "MERCHANDISE_OUT_OF_STOCK";
                }

                case MERCHANDISE_PRODUCT_NOT_PUBLISHED: {
                    return "MERCHANDISE_PRODUCT_NOT_PUBLISHED";
                }

                case NO_DELIVERY_GROUP_SELECTED: {
                    return "NO_DELIVERY_GROUP_SELECTED";
                }

                case PAYMENTS_ADDRESS1_INVALID: {
                    return "PAYMENTS_ADDRESS1_INVALID";
                }

                case PAYMENTS_ADDRESS1_REQUIRED: {
                    return "PAYMENTS_ADDRESS1_REQUIRED";
                }

                case PAYMENTS_ADDRESS1_TOO_LONG: {
                    return "PAYMENTS_ADDRESS1_TOO_LONG";
                }

                case PAYMENTS_ADDRESS2_INVALID: {
                    return "PAYMENTS_ADDRESS2_INVALID";
                }

                case PAYMENTS_ADDRESS2_REQUIRED: {
                    return "PAYMENTS_ADDRESS2_REQUIRED";
                }

                case PAYMENTS_ADDRESS2_TOO_LONG: {
                    return "PAYMENTS_ADDRESS2_TOO_LONG";
                }

                case PAYMENTS_BILLING_ADDRESS_ZONE_NOT_FOUND: {
                    return "PAYMENTS_BILLING_ADDRESS_ZONE_NOT_FOUND";
                }

                case PAYMENTS_BILLING_ADDRESS_ZONE_REQUIRED_FOR_COUNTRY: {
                    return "PAYMENTS_BILLING_ADDRESS_ZONE_REQUIRED_FOR_COUNTRY";
                }

                case PAYMENTS_CITY_INVALID: {
                    return "PAYMENTS_CITY_INVALID";
                }

                case PAYMENTS_CITY_REQUIRED: {
                    return "PAYMENTS_CITY_REQUIRED";
                }

                case PAYMENTS_CITY_TOO_LONG: {
                    return "PAYMENTS_CITY_TOO_LONG";
                }

                case PAYMENTS_COMPANY_INVALID: {
                    return "PAYMENTS_COMPANY_INVALID";
                }

                case PAYMENTS_COMPANY_REQUIRED: {
                    return "PAYMENTS_COMPANY_REQUIRED";
                }

                case PAYMENTS_COMPANY_TOO_LONG: {
                    return "PAYMENTS_COMPANY_TOO_LONG";
                }

                case PAYMENTS_COUNTRY_REQUIRED: {
                    return "PAYMENTS_COUNTRY_REQUIRED";
                }

                case PAYMENTS_CREDIT_CARD_BASE_EXPIRED: {
                    return "PAYMENTS_CREDIT_CARD_BASE_EXPIRED";
                }

                case PAYMENTS_CREDIT_CARD_BASE_GATEWAY_NOT_SUPPORTED: {
                    return "PAYMENTS_CREDIT_CARD_BASE_GATEWAY_NOT_SUPPORTED";
                }

                case PAYMENTS_CREDIT_CARD_BASE_INVALID_START_DATE_OR_ISSUE_NUMBER_FOR_DEBIT: {
                    return "PAYMENTS_CREDIT_CARD_BASE_INVALID_START_DATE_OR_ISSUE_NUMBER_FOR_DEBIT";
                }

                case PAYMENTS_CREDIT_CARD_BRAND_NOT_SUPPORTED: {
                    return "PAYMENTS_CREDIT_CARD_BRAND_NOT_SUPPORTED";
                }

                case PAYMENTS_CREDIT_CARD_FIRST_NAME_BLANK: {
                    return "PAYMENTS_CREDIT_CARD_FIRST_NAME_BLANK";
                }

                case PAYMENTS_CREDIT_CARD_GENERIC: {
                    return "PAYMENTS_CREDIT_CARD_GENERIC";
                }

                case PAYMENTS_CREDIT_CARD_LAST_NAME_BLANK: {
                    return "PAYMENTS_CREDIT_CARD_LAST_NAME_BLANK";
                }

                case PAYMENTS_CREDIT_CARD_MONTH_INCLUSION: {
                    return "PAYMENTS_CREDIT_CARD_MONTH_INCLUSION";
                }

                case PAYMENTS_CREDIT_CARD_NAME_INVALID: {
                    return "PAYMENTS_CREDIT_CARD_NAME_INVALID";
                }

                case PAYMENTS_CREDIT_CARD_NUMBER_INVALID: {
                    return "PAYMENTS_CREDIT_CARD_NUMBER_INVALID";
                }

                case PAYMENTS_CREDIT_CARD_NUMBER_INVALID_FORMAT: {
                    return "PAYMENTS_CREDIT_CARD_NUMBER_INVALID_FORMAT";
                }

                case PAYMENTS_CREDIT_CARD_SESSION_ID: {
                    return "PAYMENTS_CREDIT_CARD_SESSION_ID";
                }

                case PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_BLANK: {
                    return "PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_BLANK";
                }

                case PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_INVALID_FOR_CARD_TYPE: {
                    return "PAYMENTS_CREDIT_CARD_VERIFICATION_VALUE_INVALID_FOR_CARD_TYPE";
                }

                case PAYMENTS_CREDIT_CARD_YEAR_EXPIRED: {
                    return "PAYMENTS_CREDIT_CARD_YEAR_EXPIRED";
                }

                case PAYMENTS_CREDIT_CARD_YEAR_INVALID_EXPIRY_YEAR: {
                    return "PAYMENTS_CREDIT_CARD_YEAR_INVALID_EXPIRY_YEAR";
                }

                case PAYMENTS_FIRST_NAME_INVALID: {
                    return "PAYMENTS_FIRST_NAME_INVALID";
                }

                case PAYMENTS_FIRST_NAME_REQUIRED: {
                    return "PAYMENTS_FIRST_NAME_REQUIRED";
                }

                case PAYMENTS_FIRST_NAME_TOO_LONG: {
                    return "PAYMENTS_FIRST_NAME_TOO_LONG";
                }

                case PAYMENTS_INVALID_POSTAL_CODE_FOR_COUNTRY: {
                    return "PAYMENTS_INVALID_POSTAL_CODE_FOR_COUNTRY";
                }

                case PAYMENTS_INVALID_POSTAL_CODE_FOR_ZONE: {
                    return "PAYMENTS_INVALID_POSTAL_CODE_FOR_ZONE";
                }

                case PAYMENTS_LAST_NAME_INVALID: {
                    return "PAYMENTS_LAST_NAME_INVALID";
                }

                case PAYMENTS_LAST_NAME_REQUIRED: {
                    return "PAYMENTS_LAST_NAME_REQUIRED";
                }

                case PAYMENTS_LAST_NAME_TOO_LONG: {
                    return "PAYMENTS_LAST_NAME_TOO_LONG";
                }

                case PAYMENTS_METHOD_REQUIRED: {
                    return "PAYMENTS_METHOD_REQUIRED";
                }

                case PAYMENTS_METHOD_UNAVAILABLE: {
                    return "PAYMENTS_METHOD_UNAVAILABLE";
                }

                case PAYMENTS_PHONE_NUMBER_INVALID: {
                    return "PAYMENTS_PHONE_NUMBER_INVALID";
                }

                case PAYMENTS_PHONE_NUMBER_REQUIRED: {
                    return "PAYMENTS_PHONE_NUMBER_REQUIRED";
                }

                case PAYMENTS_POSTAL_CODE_INVALID: {
                    return "PAYMENTS_POSTAL_CODE_INVALID";
                }

                case PAYMENTS_POSTAL_CODE_REQUIRED: {
                    return "PAYMENTS_POSTAL_CODE_REQUIRED";
                }

                case PAYMENTS_SHOPIFY_PAYMENTS_REQUIRED: {
                    return "PAYMENTS_SHOPIFY_PAYMENTS_REQUIRED";
                }

                case PAYMENTS_UNACCEPTABLE_PAYMENT_AMOUNT: {
                    return "PAYMENTS_UNACCEPTABLE_PAYMENT_AMOUNT";
                }

                case PAYMENTS_WALLET_CONTENT_MISSING: {
                    return "PAYMENTS_WALLET_CONTENT_MISSING";
                }

                case TAXES_DELIVERY_GROUP_ID_NOT_FOUND: {
                    return "TAXES_DELIVERY_GROUP_ID_NOT_FOUND";
                }

                case TAXES_LINE_ID_NOT_FOUND: {
                    return "TAXES_LINE_ID_NOT_FOUND";
                }

                case TAXES_MUST_BE_DEFINED: {
                    return "TAXES_MUST_BE_DEFINED";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface SubmitAlreadyAcceptedQueryDefinition {
        void define(SubmitAlreadyAcceptedQuery _queryBuilder);
    }

    /**
    * Cart submit for checkout completion is successful.
    */
    public static class SubmitAlreadyAcceptedQuery extends Query<SubmitAlreadyAcceptedQuery> {
        SubmitAlreadyAcceptedQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The ID of the cart completion attempt that will be used for polling for the result.
        */
        public SubmitAlreadyAcceptedQuery attemptId() {
            startField("attemptId");

            return this;
        }
    }

    /**
    * Cart submit for checkout completion is successful.
    */
    public static class SubmitAlreadyAccepted extends AbstractResponse<SubmitAlreadyAccepted> implements CartSubmitForCompletionResult {
        public SubmitAlreadyAccepted() {
        }

        public SubmitAlreadyAccepted(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "attemptId": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SubmitAlreadyAccepted";
        }

        /**
        * The ID of the cart completion attempt that will be used for polling for the result.
        */

        public String getAttemptId() {
            return (String) get("attemptId");
        }

        public SubmitAlreadyAccepted setAttemptId(String arg) {
            optimisticData.put(getKey("attemptId"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "attemptId": return false;

                default: return false;
            }
        }
    }

    public interface SubmitFailedQueryDefinition {
        void define(SubmitFailedQuery _queryBuilder);
    }

    /**
    * Cart submit for checkout completion failed.
    */
    public static class SubmitFailedQuery extends Query<SubmitFailedQuery> {
        SubmitFailedQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The URL of the checkout for the cart.
        */
        public SubmitFailedQuery checkoutUrl() {
            startField("checkoutUrl");

            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */
        public SubmitFailedQuery errors(SubmissionErrorQueryDefinition queryDef) {
            startField("errors");

            _queryBuilder.append('{');
            queryDef.define(new SubmissionErrorQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Cart submit for checkout completion failed.
    */
    public static class SubmitFailed extends AbstractResponse<SubmitFailed> implements CartSubmitForCompletionResult {
        public SubmitFailed() {
        }

        public SubmitFailed(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "checkoutUrl": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "errors": {
                        List<SubmissionError> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new SubmissionError(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SubmitFailed";
        }

        /**
        * The URL of the checkout for the cart.
        */

        public String getCheckoutUrl() {
            return (String) get("checkoutUrl");
        }

        public SubmitFailed setCheckoutUrl(String arg) {
            optimisticData.put(getKey("checkoutUrl"), arg);
            return this;
        }

        /**
        * The list of errors that occurred from executing the mutation.
        */

        public List<SubmissionError> getErrors() {
            return (List<SubmissionError>) get("errors");
        }

        public SubmitFailed setErrors(List<SubmissionError> arg) {
            optimisticData.put(getKey("errors"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "checkoutUrl": return false;

                case "errors": return true;

                default: return false;
            }
        }
    }

    public interface SubmitSuccessQueryDefinition {
        void define(SubmitSuccessQuery _queryBuilder);
    }

    /**
    * Cart submit for checkout completion is already accepted.
    */
    public static class SubmitSuccessQuery extends Query<SubmitSuccessQuery> {
        SubmitSuccessQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The ID of the cart completion attempt that will be used for polling for the result.
        */
        public SubmitSuccessQuery attemptId() {
            startField("attemptId");

            return this;
        }
    }

    /**
    * Cart submit for checkout completion is already accepted.
    */
    public static class SubmitSuccess extends AbstractResponse<SubmitSuccess> implements CartSubmitForCompletionResult {
        public SubmitSuccess() {
        }

        public SubmitSuccess(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "attemptId": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SubmitSuccess";
        }

        /**
        * The ID of the cart completion attempt that will be used for polling for the result.
        */

        public String getAttemptId() {
            return (String) get("attemptId");
        }

        public SubmitSuccess setAttemptId(String arg) {
            optimisticData.put(getKey("attemptId"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "attemptId": return false;

                default: return false;
            }
        }
    }

    public interface SubmitThrottledQueryDefinition {
        void define(SubmitThrottledQuery _queryBuilder);
    }

    /**
    * Cart submit for checkout completion is throttled.
    */
    public static class SubmitThrottledQuery extends Query<SubmitThrottledQuery> {
        SubmitThrottledQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * UTC date time string that indicates the time after which clients should make their next
        * poll request. Any poll requests sent before this time will be ignored. Use this value to schedule
        * the
        * next poll request.
        */
        public SubmitThrottledQuery pollAfter() {
            startField("pollAfter");

            return this;
        }
    }

    /**
    * Cart submit for checkout completion is throttled.
    */
    public static class SubmitThrottled extends AbstractResponse<SubmitThrottled> implements CartSubmitForCompletionResult {
        public SubmitThrottled() {
        }

        public SubmitThrottled(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "pollAfter": {
                        responseData.put(key, Utils.parseDateTime(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "SubmitThrottled";
        }

        /**
        * UTC date time string that indicates the time after which clients should make their next
        * poll request. Any poll requests sent before this time will be ignored. Use this value to schedule
        * the
        * next poll request.
        */

        public DateTime getPollAfter() {
            return (DateTime) get("pollAfter");
        }

        public SubmitThrottled setPollAfter(DateTime arg) {
            optimisticData.put(getKey("pollAfter"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "pollAfter": return false;

                default: return false;
            }
        }
    }

    public interface SwatchQueryDefinition {
        void define(SwatchQuery _queryBuilder);
    }

    /**
    * Color and image for visual representation.
    */
    public static class SwatchQuery extends Query<SwatchQuery> {
        SwatchQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The swatch color.
        */
        public SwatchQuery color() {
            startField("color");

            return this;
        }

        /**
        * The swatch image.
        */
        public SwatchQuery image(MediaImageQueryDefinition queryDef) {
            startField("image");

            _queryBuilder.append('{');
            queryDef.define(new MediaImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Color and image for visual representation.
    */
    public static class Swatch extends AbstractResponse<Swatch> {
        public Swatch() {
        }

        public Swatch(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "color": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "image": {
                        MediaImage optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaImage(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "Swatch";
        }

        /**
        * The swatch color.
        */

        public String getColor() {
            return (String) get("color");
        }

        public Swatch setColor(String arg) {
            optimisticData.put(getKey("color"), arg);
            return this;
        }

        /**
        * The swatch image.
        */

        public MediaImage getImage() {
            return (MediaImage) get("image");
        }

        public Swatch setImage(MediaImage arg) {
            optimisticData.put(getKey("image"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "color": return false;

                case "image": return true;

                default: return false;
            }
        }
    }

    public interface TrackableQueryDefinition {
        void define(TrackableQuery _queryBuilder);
    }

    /**
    * Represents a resource that you can track the origin of the search traffic.
    */
    public static class TrackableQuery extends Query<TrackableQuery> {
        TrackableQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("__typename");
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */
        public TrackableQuery trackingParameters() {
            startField("trackingParameters");

            return this;
        }

        public TrackableQuery onArticle(ArticleQueryDefinition queryDef) {
            startInlineFragment("Article");
            queryDef.define(new ArticleQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public TrackableQuery onCollection(CollectionQueryDefinition queryDef) {
            startInlineFragment("Collection");
            queryDef.define(new CollectionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public TrackableQuery onPage(PageQueryDefinition queryDef) {
            startInlineFragment("Page");
            queryDef.define(new PageQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public TrackableQuery onProduct(ProductQueryDefinition queryDef) {
            startInlineFragment("Product");
            queryDef.define(new ProductQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }

        public TrackableQuery onSearchQuerySuggestion(SearchQuerySuggestionQueryDefinition queryDef) {
            startInlineFragment("SearchQuerySuggestion");
            queryDef.define(new SearchQuerySuggestionQuery(_queryBuilder));
            _queryBuilder.append('}');
            return this;
        }
    }

    public interface Trackable {
        String getGraphQlTypeName();

        String getTrackingParameters();
    }

    /**
    * Represents a resource that you can track the origin of the search traffic.
    */
    public static class UnknownTrackable extends AbstractResponse<UnknownTrackable> implements Trackable {
        public UnknownTrackable() {
        }

        public UnknownTrackable(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "trackingParameters": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public static Trackable create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                case "Article": {
                    return new Article(fields);
                }

                case "Collection": {
                    return new Collection(fields);
                }

                case "Page": {
                    return new Page(fields);
                }

                case "Product": {
                    return new Product(fields);
                }

                case "SearchQuerySuggestion": {
                    return new SearchQuerySuggestion(fields);
                }

                default: {
                    return new UnknownTrackable(fields);
                }
            }
        }

        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }

        /**
        * A URL parameters to be added to a page URL when it is linked from a GraphQL result. This allows for
        * tracking the origin of the traffic.
        */

        public String getTrackingParameters() {
            return (String) get("trackingParameters");
        }

        public UnknownTrackable setTrackingParameters(String arg) {
            optimisticData.put(getKey("trackingParameters"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "trackingParameters": return false;

                default: return false;
            }
        }
    }

    public interface UnitPriceMeasurementQueryDefinition {
        void define(UnitPriceMeasurementQuery _queryBuilder);
    }

    /**
    * The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).
    */
    public static class UnitPriceMeasurementQuery extends Query<UnitPriceMeasurementQuery> {
        UnitPriceMeasurementQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The type of unit of measurement for the unit price measurement.
        */
        public UnitPriceMeasurementQuery measuredType() {
            startField("measuredType");

            return this;
        }

        /**
        * The quantity unit for the unit price measurement.
        */
        public UnitPriceMeasurementQuery quantityUnit() {
            startField("quantityUnit");

            return this;
        }

        /**
        * The quantity value for the unit price measurement.
        */
        public UnitPriceMeasurementQuery quantityValue() {
            startField("quantityValue");

            return this;
        }

        /**
        * The reference unit for the unit price measurement.
        */
        public UnitPriceMeasurementQuery referenceUnit() {
            startField("referenceUnit");

            return this;
        }

        /**
        * The reference value for the unit price measurement.
        */
        public UnitPriceMeasurementQuery referenceValue() {
            startField("referenceValue");

            return this;
        }
    }

    /**
    * The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).
    */
    public static class UnitPriceMeasurement extends AbstractResponse<UnitPriceMeasurement> {
        public UnitPriceMeasurement() {
        }

        public UnitPriceMeasurement(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "measuredType": {
                        UnitPriceMeasurementMeasuredType optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnitPriceMeasurementMeasuredType.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantityUnit": {
                        UnitPriceMeasurementMeasuredUnit optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnitPriceMeasurementMeasuredUnit.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantityValue": {
                        responseData.put(key, jsonAsDouble(field.getValue(), key));

                        break;
                    }

                    case "referenceUnit": {
                        UnitPriceMeasurementMeasuredUnit optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UnitPriceMeasurementMeasuredUnit.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "referenceValue": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "UnitPriceMeasurement";
        }

        /**
        * The type of unit of measurement for the unit price measurement.
        */

        public UnitPriceMeasurementMeasuredType getMeasuredType() {
            return (UnitPriceMeasurementMeasuredType) get("measuredType");
        }

        public UnitPriceMeasurement setMeasuredType(UnitPriceMeasurementMeasuredType arg) {
            optimisticData.put(getKey("measuredType"), arg);
            return this;
        }

        /**
        * The quantity unit for the unit price measurement.
        */

        public UnitPriceMeasurementMeasuredUnit getQuantityUnit() {
            return (UnitPriceMeasurementMeasuredUnit) get("quantityUnit");
        }

        public UnitPriceMeasurement setQuantityUnit(UnitPriceMeasurementMeasuredUnit arg) {
            optimisticData.put(getKey("quantityUnit"), arg);
            return this;
        }

        /**
        * The quantity value for the unit price measurement.
        */

        public Double getQuantityValue() {
            return (Double) get("quantityValue");
        }

        public UnitPriceMeasurement setQuantityValue(Double arg) {
            optimisticData.put(getKey("quantityValue"), arg);
            return this;
        }

        /**
        * The reference unit for the unit price measurement.
        */

        public UnitPriceMeasurementMeasuredUnit getReferenceUnit() {
            return (UnitPriceMeasurementMeasuredUnit) get("referenceUnit");
        }

        public UnitPriceMeasurement setReferenceUnit(UnitPriceMeasurementMeasuredUnit arg) {
            optimisticData.put(getKey("referenceUnit"), arg);
            return this;
        }

        /**
        * The reference value for the unit price measurement.
        */

        public Integer getReferenceValue() {
            return (Integer) get("referenceValue");
        }

        public UnitPriceMeasurement setReferenceValue(Integer arg) {
            optimisticData.put(getKey("referenceValue"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "measuredType": return false;

                case "quantityUnit": return false;

                case "quantityValue": return false;

                case "referenceUnit": return false;

                case "referenceValue": return false;

                default: return false;
            }
        }
    }

    /**
    * The accepted types of unit of measurement.
    */
    public enum UnitPriceMeasurementMeasuredType {
        /**
        * Unit of measurements representing areas.
        */
        AREA,

        /**
        * Unit of measurements representing lengths.
        */
        LENGTH,

        /**
        * Unit of measurements representing volumes.
        */
        VOLUME,

        /**
        * Unit of measurements representing weights.
        */
        WEIGHT,

        UNKNOWN_VALUE;

        public static UnitPriceMeasurementMeasuredType fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "AREA": {
                    return AREA;
                }

                case "LENGTH": {
                    return LENGTH;
                }

                case "VOLUME": {
                    return VOLUME;
                }

                case "WEIGHT": {
                    return WEIGHT;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case AREA: {
                    return "AREA";
                }

                case LENGTH: {
                    return "LENGTH";
                }

                case VOLUME: {
                    return "VOLUME";
                }

                case WEIGHT: {
                    return "WEIGHT";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * The valid units of measurement for a unit price measurement.
    */
    public enum UnitPriceMeasurementMeasuredUnit {
        /**
        * 100 centiliters equals 1 liter.
        */
        CL,

        /**
        * 100 centimeters equals 1 meter.
        */
        CM,

        /**
        * Metric system unit of weight.
        */
        G,

        /**
        * 1 kilogram equals 1000 grams.
        */
        KG,

        /**
        * Metric system unit of volume.
        */
        L,

        /**
        * Metric system unit of length.
        */
        M,

        /**
        * Metric system unit of area.
        */
        M2,

        /**
        * 1 cubic meter equals 1000 liters.
        */
        M3,

        /**
        * 1000 milligrams equals 1 gram.
        */
        MG,

        /**
        * 1000 milliliters equals 1 liter.
        */
        ML,

        /**
        * 1000 millimeters equals 1 meter.
        */
        MM,

        UNKNOWN_VALUE;

        public static UnitPriceMeasurementMeasuredUnit fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "CL": {
                    return CL;
                }

                case "CM": {
                    return CM;
                }

                case "G": {
                    return G;
                }

                case "KG": {
                    return KG;
                }

                case "L": {
                    return L;
                }

                case "M": {
                    return M;
                }

                case "M2": {
                    return M2;
                }

                case "M3": {
                    return M3;
                }

                case "MG": {
                    return MG;
                }

                case "ML": {
                    return ML;
                }

                case "MM": {
                    return MM;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CL: {
                    return "CL";
                }

                case CM: {
                    return "CM";
                }

                case G: {
                    return "G";
                }

                case KG: {
                    return "KG";
                }

                case L: {
                    return "L";
                }

                case M: {
                    return "M";
                }

                case M2: {
                    return "M2";
                }

                case M3: {
                    return "M3";
                }

                case MG: {
                    return "MG";
                }

                case ML: {
                    return "ML";
                }

                case MM: {
                    return "MM";
                }

                default: {
                    return "";
                }
            }
        }
    }

    /**
    * Systems of weights and measures.
    */
    public enum UnitSystem {
        /**
        * Imperial system of weights and measures.
        */
        IMPERIAL_SYSTEM,

        /**
        * Metric system of weights and measures.
        */
        METRIC_SYSTEM,

        UNKNOWN_VALUE;

        public static UnitSystem fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "IMPERIAL_SYSTEM": {
                    return IMPERIAL_SYSTEM;
                }

                case "METRIC_SYSTEM": {
                    return METRIC_SYSTEM;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case IMPERIAL_SYSTEM: {
                    return "IMPERIAL_SYSTEM";
                }

                case METRIC_SYSTEM: {
                    return "METRIC_SYSTEM";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface UrlRedirectQueryDefinition {
        void define(UrlRedirectQuery _queryBuilder);
    }

    /**
    * A redirect on the online store.
    */
    public static class UrlRedirectQuery extends Query<UrlRedirectQuery> {
        UrlRedirectQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * The old path to be redirected from. When the user visits this path, they'll be redirected to the
        * target location.
        */
        public UrlRedirectQuery path() {
            startField("path");

            return this;
        }

        /**
        * The target location where the user will be redirected to.
        */
        public UrlRedirectQuery target() {
            startField("target");

            return this;
        }
    }

    /**
    * A redirect on the online store.
    */
    public static class UrlRedirect extends AbstractResponse<UrlRedirect> implements Node {
        public UrlRedirect() {
        }

        public UrlRedirect(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "path": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "target": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public UrlRedirect(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "UrlRedirect";
        }

        /**
        * The ID of the URL redirect.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The old path to be redirected from. When the user visits this path, they'll be redirected to the
        * target location.
        */

        public String getPath() {
            return (String) get("path");
        }

        public UrlRedirect setPath(String arg) {
            optimisticData.put(getKey("path"), arg);
            return this;
        }

        /**
        * The target location where the user will be redirected to.
        */

        public String getTarget() {
            return (String) get("target");
        }

        public UrlRedirect setTarget(String arg) {
            optimisticData.put(getKey("target"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "id": return false;

                case "path": return false;

                case "target": return false;

                default: return false;
            }
        }
    }

    public interface UrlRedirectConnectionQueryDefinition {
        void define(UrlRedirectConnectionQuery _queryBuilder);
    }

    /**
    * An auto-generated type for paginating through multiple UrlRedirects.
    */
    public static class UrlRedirectConnectionQuery extends Query<UrlRedirectConnectionQuery> {
        UrlRedirectConnectionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A list of edges.
        */
        public UrlRedirectConnectionQuery edges(UrlRedirectEdgeQueryDefinition queryDef) {
            startField("edges");

            _queryBuilder.append('{');
            queryDef.define(new UrlRedirectEdgeQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * A list of the nodes contained in UrlRedirectEdge.
        */
        public UrlRedirectConnectionQuery nodes(UrlRedirectQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new UrlRedirectQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * Information to aid in pagination.
        */
        public UrlRedirectConnectionQuery pageInfo(PageInfoQueryDefinition queryDef) {
            startField("pageInfo");

            _queryBuilder.append('{');
            queryDef.define(new PageInfoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type for paginating through multiple UrlRedirects.
    */
    public static class UrlRedirectConnection extends AbstractResponse<UrlRedirectConnection> {
        public UrlRedirectConnection() {
        }

        public UrlRedirectConnection(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "edges": {
                        List<UrlRedirectEdge> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UrlRedirectEdge(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "nodes": {
                        List<UrlRedirect> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new UrlRedirect(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "pageInfo": {
                        responseData.put(key, new PageInfo(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "UrlRedirectConnection";
        }

        /**
        * A list of edges.
        */

        public List<UrlRedirectEdge> getEdges() {
            return (List<UrlRedirectEdge>) get("edges");
        }

        public UrlRedirectConnection setEdges(List<UrlRedirectEdge> arg) {
            optimisticData.put(getKey("edges"), arg);
            return this;
        }

        /**
        * A list of the nodes contained in UrlRedirectEdge.
        */

        public List<UrlRedirect> getNodes() {
            return (List<UrlRedirect>) get("nodes");
        }

        public UrlRedirectConnection setNodes(List<UrlRedirect> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        /**
        * Information to aid in pagination.
        */

        public PageInfo getPageInfo() {
            return (PageInfo) get("pageInfo");
        }

        public UrlRedirectConnection setPageInfo(PageInfo arg) {
            optimisticData.put(getKey("pageInfo"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "edges": return true;

                case "nodes": return true;

                case "pageInfo": return true;

                default: return false;
            }
        }
    }

    public interface UrlRedirectEdgeQueryDefinition {
        void define(UrlRedirectEdgeQuery _queryBuilder);
    }

    /**
    * An auto-generated type which holds one UrlRedirect and a cursor during pagination.
    */
    public static class UrlRedirectEdgeQuery extends Query<UrlRedirectEdgeQuery> {
        UrlRedirectEdgeQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * A cursor for use in pagination.
        */
        public UrlRedirectEdgeQuery cursor() {
            startField("cursor");

            return this;
        }

        /**
        * The item at the end of UrlRedirectEdge.
        */
        public UrlRedirectEdgeQuery node(UrlRedirectQueryDefinition queryDef) {
            startField("node");

            _queryBuilder.append('{');
            queryDef.define(new UrlRedirectQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * An auto-generated type which holds one UrlRedirect and a cursor during pagination.
    */
    public static class UrlRedirectEdge extends AbstractResponse<UrlRedirectEdge> {
        public UrlRedirectEdge() {
        }

        public UrlRedirectEdge(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "cursor": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "node": {
                        responseData.put(key, new UrlRedirect(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "UrlRedirectEdge";
        }

        /**
        * A cursor for use in pagination.
        */

        public String getCursor() {
            return (String) get("cursor");
        }

        public UrlRedirectEdge setCursor(String arg) {
            optimisticData.put(getKey("cursor"), arg);
            return this;
        }

        /**
        * The item at the end of UrlRedirectEdge.
        */

        public UrlRedirect getNode() {
            return (UrlRedirect) get("node");
        }

        public UrlRedirectEdge setNode(UrlRedirect arg) {
            optimisticData.put(getKey("node"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "cursor": return false;

                case "node": return true;

                default: return false;
            }
        }
    }

    public interface UserErrorQueryDefinition {
        void define(UserErrorQuery _queryBuilder);
    }

    /**
    * Represents an error in the input of a mutation.
    */
    public static class UserErrorQuery extends Query<UserErrorQuery> {
        UserErrorQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The path to the input field that caused the error.
        */
        public UserErrorQuery field() {
            startField("field");

            return this;
        }

        /**
        * The error message.
        */
        public UserErrorQuery message() {
            startField("message");

            return this;
        }
    }

    /**
    * Represents an error in the input of a mutation.
    */
    public static class UserError extends AbstractResponse<UserError> implements DisplayableError {
        public UserError() {
        }

        public UserError(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "field": {
                        List<String> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<String> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(jsonAsString(element1, key));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "message": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "UserError";
        }

        /**
        * The path to the input field that caused the error.
        */

        public List<String> getField() {
            return (List<String>) get("field");
        }

        public UserError setField(List<String> arg) {
            optimisticData.put(getKey("field"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public UserError setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "field": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    public interface UserErrorsShopPayPaymentRequestSessionUserErrorsQueryDefinition {
        void define(UserErrorsShopPayPaymentRequestSessionUserErrorsQuery _queryBuilder);
    }

    /**
    * Represents an error that happens during execution of a customer mutation.
    */
    public static class UserErrorsShopPayPaymentRequestSessionUserErrorsQuery extends Query<UserErrorsShopPayPaymentRequestSessionUserErrorsQuery> {
        UserErrorsShopPayPaymentRequestSessionUserErrorsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The error code.
        */
        public UserErrorsShopPayPaymentRequestSessionUserErrorsQuery code() {
            startField("code");

            return this;
        }

        /**
        * The path to the input field that caused the error.
        */
        public UserErrorsShopPayPaymentRequestSessionUserErrorsQuery field() {
            startField("field");

            return this;
        }

        /**
        * The error message.
        */
        public UserErrorsShopPayPaymentRequestSessionUserErrorsQuery message() {
            startField("message");

            return this;
        }
    }

    /**
    * Represents an error that happens during execution of a customer mutation.
    */
    public static class UserErrorsShopPayPaymentRequestSessionUserErrors extends AbstractResponse<UserErrorsShopPayPaymentRequestSessionUserErrors> implements DisplayableError {
        public UserErrorsShopPayPaymentRequestSessionUserErrors() {
        }

        public UserErrorsShopPayPaymentRequestSessionUserErrors(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "code": {
                        UserErrorsShopPayPaymentRequestSessionUserErrorsCode optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = UserErrorsShopPayPaymentRequestSessionUserErrorsCode.fromGraphQl(jsonAsString(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "field": {
                        List<String> optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            List<String> list1 = new ArrayList<>();
                            for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                                list1.add(jsonAsString(element1, key));
                            }

                            optional1 = list1;
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "message": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "UserErrorsShopPayPaymentRequestSessionUserErrors";
        }

        /**
        * The error code.
        */

        public UserErrorsShopPayPaymentRequestSessionUserErrorsCode getCode() {
            return (UserErrorsShopPayPaymentRequestSessionUserErrorsCode) get("code");
        }

        public UserErrorsShopPayPaymentRequestSessionUserErrors setCode(UserErrorsShopPayPaymentRequestSessionUserErrorsCode arg) {
            optimisticData.put(getKey("code"), arg);
            return this;
        }

        /**
        * The path to the input field that caused the error.
        */

        public List<String> getField() {
            return (List<String>) get("field");
        }

        public UserErrorsShopPayPaymentRequestSessionUserErrors setField(List<String> arg) {
            optimisticData.put(getKey("field"), arg);
            return this;
        }

        /**
        * The error message.
        */

        public String getMessage() {
            return (String) get("message");
        }

        public UserErrorsShopPayPaymentRequestSessionUserErrors setMessage(String arg) {
            optimisticData.put(getKey("message"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "code": return false;

                case "field": return false;

                case "message": return false;

                default: return false;
            }
        }
    }

    /**
    * Possible error codes that can be returned by `ShopPayPaymentRequestSessionUserErrors`.
    */
    public enum UserErrorsShopPayPaymentRequestSessionUserErrorsCode {
        /**
        * Idempotency key has already been used.
        */
        IDEMPOTENCY_KEY_ALREADY_USED,

        /**
        * Payment request input is invalid.
        */
        PAYMENT_REQUEST_INVALID_INPUT,

        /**
        * Payment request not found.
        */
        PAYMENT_REQUEST_NOT_FOUND,

        UNKNOWN_VALUE;

        public static UserErrorsShopPayPaymentRequestSessionUserErrorsCode fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "IDEMPOTENCY_KEY_ALREADY_USED": {
                    return IDEMPOTENCY_KEY_ALREADY_USED;
                }

                case "PAYMENT_REQUEST_INVALID_INPUT": {
                    return PAYMENT_REQUEST_INVALID_INPUT;
                }

                case "PAYMENT_REQUEST_NOT_FOUND": {
                    return PAYMENT_REQUEST_NOT_FOUND;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case IDEMPOTENCY_KEY_ALREADY_USED: {
                    return "IDEMPOTENCY_KEY_ALREADY_USED";
                }

                case PAYMENT_REQUEST_INVALID_INPUT: {
                    return "PAYMENT_REQUEST_INVALID_INPUT";
                }

                case PAYMENT_REQUEST_NOT_FOUND: {
                    return "PAYMENT_REQUEST_NOT_FOUND";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class VariantOptionFilter implements Serializable {
        private String name;

        private String value;

        public VariantOptionFilter(String name, String value) {
            this.name = name;

            this.value = value;
        }

        public String getName() {
            return name;
        }

        public VariantOptionFilter setName(String name) {
            this.name = name;
            return this;
        }

        public String getValue() {
            return value;
        }

        public VariantOptionFilter setValue(String value) {
            this.value = value;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("name:");
            Query.appendQuotedString(_queryBuilder, name.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("value:");
            Query.appendQuotedString(_queryBuilder, value.toString());

            _queryBuilder.append('}');
        }
    }

    public interface VideoQueryDefinition {
        void define(VideoQuery _queryBuilder);
    }

    /**
    * Represents a Shopify hosted video.
    */
    public static class VideoQuery extends Query<VideoQuery> {
        VideoQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);

            startField("id");
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */
        public VideoQuery alt() {
            startField("alt");

            return this;
        }

        /**
        * The media content type.
        */
        public VideoQuery mediaContentType() {
            startField("mediaContentType");

            return this;
        }

        /**
        * The presentation for a media.
        */
        public VideoQuery presentation(MediaPresentationQueryDefinition queryDef) {
            startField("presentation");

            _queryBuilder.append('{');
            queryDef.define(new MediaPresentationQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The preview image for the media.
        */
        public VideoQuery previewImage(ImageQueryDefinition queryDef) {
            startField("previewImage");

            _queryBuilder.append('{');
            queryDef.define(new ImageQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * The sources for a video.
        */
        public VideoQuery sources(VideoSourceQueryDefinition queryDef) {
            startField("sources");

            _queryBuilder.append('{');
            queryDef.define(new VideoSourceQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * Represents a Shopify hosted video.
    */
    public static class Video extends AbstractResponse<Video> implements Media, MetafieldReference, Node {
        public Video() {
        }

        public Video(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "alt": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "id": {
                        responseData.put(key, new ID(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "mediaContentType": {
                        responseData.put(key, MediaContentType.fromGraphQl(jsonAsString(field.getValue(), key)));

                        break;
                    }

                    case "presentation": {
                        MediaPresentation optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new MediaPresentation(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "previewImage": {
                        Image optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new Image(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sources": {
                        List<VideoSource> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new VideoSource(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public Video(ID id) {
            this();
            optimisticData.put("id", id);
        }

        public String getGraphQlTypeName() {
            return "Video";
        }

        /**
        * A word or phrase to share the nature or contents of a media.
        */

        public String getAlt() {
            return (String) get("alt");
        }

        public Video setAlt(String arg) {
            optimisticData.put(getKey("alt"), arg);
            return this;
        }

        /**
        * A globally-unique ID.
        */

        public ID getId() {
            return (ID) get("id");
        }

        /**
        * The media content type.
        */

        public MediaContentType getMediaContentType() {
            return (MediaContentType) get("mediaContentType");
        }

        public Video setMediaContentType(MediaContentType arg) {
            optimisticData.put(getKey("mediaContentType"), arg);
            return this;
        }

        /**
        * The presentation for a media.
        */

        public MediaPresentation getPresentation() {
            return (MediaPresentation) get("presentation");
        }

        public Video setPresentation(MediaPresentation arg) {
            optimisticData.put(getKey("presentation"), arg);
            return this;
        }

        /**
        * The preview image for the media.
        */

        public Image getPreviewImage() {
            return (Image) get("previewImage");
        }

        public Video setPreviewImage(Image arg) {
            optimisticData.put(getKey("previewImage"), arg);
            return this;
        }

        /**
        * The sources for a video.
        */

        public List<VideoSource> getSources() {
            return (List<VideoSource>) get("sources");
        }

        public Video setSources(List<VideoSource> arg) {
            optimisticData.put(getKey("sources"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "alt": return false;

                case "id": return false;

                case "mediaContentType": return false;

                case "presentation": return true;

                case "previewImage": return true;

                case "sources": return true;

                default: return false;
            }
        }
    }

    public interface VideoSourceQueryDefinition {
        void define(VideoSourceQuery _queryBuilder);
    }

    /**
    * Represents a source for a Shopify hosted video.
    */
    public static class VideoSourceQuery extends Query<VideoSourceQuery> {
        VideoSourceQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * The format of the video source.
        */
        public VideoSourceQuery format() {
            startField("format");

            return this;
        }

        /**
        * The height of the video.
        */
        public VideoSourceQuery height() {
            startField("height");

            return this;
        }

        /**
        * The video MIME type.
        */
        public VideoSourceQuery mimeType() {
            startField("mimeType");

            return this;
        }

        /**
        * The URL of the video.
        */
        public VideoSourceQuery url() {
            startField("url");

            return this;
        }

        /**
        * The width of the video.
        */
        public VideoSourceQuery width() {
            startField("width");

            return this;
        }
    }

    /**
    * Represents a source for a Shopify hosted video.
    */
    public static class VideoSource extends AbstractResponse<VideoSource> {
        public VideoSource() {
        }

        public VideoSource(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "format": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "height": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "mimeType": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "url": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "width": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "VideoSource";
        }

        /**
        * The format of the video source.
        */

        public String getFormat() {
            return (String) get("format");
        }

        public VideoSource setFormat(String arg) {
            optimisticData.put(getKey("format"), arg);
            return this;
        }

        /**
        * The height of the video.
        */

        public Integer getHeight() {
            return (Integer) get("height");
        }

        public VideoSource setHeight(Integer arg) {
            optimisticData.put(getKey("height"), arg);
            return this;
        }

        /**
        * The video MIME type.
        */

        public String getMimeType() {
            return (String) get("mimeType");
        }

        public VideoSource setMimeType(String arg) {
            optimisticData.put(getKey("mimeType"), arg);
            return this;
        }

        /**
        * The URL of the video.
        */

        public String getUrl() {
            return (String) get("url");
        }

        public VideoSource setUrl(String arg) {
            optimisticData.put(getKey("url"), arg);
            return this;
        }

        /**
        * The width of the video.
        */

        public Integer getWidth() {
            return (Integer) get("width");
        }

        public VideoSource setWidth(Integer arg) {
            optimisticData.put(getKey("width"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "format": return false;

                case "height": return false;

                case "mimeType": return false;

                case "url": return false;

                case "width": return false;

                default: return false;
            }
        }
    }

    /**
    * Units of measurement for weight.
    */
    public enum WeightUnit {
        /**
        * Metric system unit of mass.
        */
        GRAMS,

        /**
        * 1 kilogram equals 1000 grams.
        */
        KILOGRAMS,

        /**
        * Imperial system unit of mass.
        */
        OUNCES,

        /**
        * 1 pound equals 16 ounces.
        */
        POUNDS,

        UNKNOWN_VALUE;

        public static WeightUnit fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "GRAMS": {
                    return GRAMS;
                }

                case "KILOGRAMS": {
                    return KILOGRAMS;
                }

                case "OUNCES": {
                    return OUNCES;
                }

                case "POUNDS": {
                    return POUNDS;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case GRAMS: {
                    return "GRAMS";
                }

                case KILOGRAMS: {
                    return "KILOGRAMS";
                }

                case OUNCES: {
                    return "OUNCES";
                }

                case POUNDS: {
                    return "POUNDS";
                }

                default: {
                    return "";
                }
            }
        }
    }
}
