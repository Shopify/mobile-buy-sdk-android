buildscript {
  dependencies {
    classpath dep.androidPlugin
    classpath dep.kotlinPlugin
    classpath dep.graphqlSupport

  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'
apply plugin: 'signing'

android {
  compileSdkVersion androidConfig.compileSdkVersion

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main.java.srcDirs += '../libs/graphql_java_gen/support/src/main/java'
  }

  defaultConfig {
    minSdkVersion androidConfig.minSdkVersion

    buildConfigField "String", "BUY_SDK_VERSION", "\"$VERSION_NAME\""

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled = false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  libraryVariants.all { variant ->
    variant.outputs.all { output ->
      def outputFile = output.outputFile
      if (outputFile != null && outputFile.name.endsWith('.aar')) {
        outputFileName = "${variant.name}-${VERSION_NAME}.aar"
      }
    }

    if (variant.name.equals('release')) {
      task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
      }

      task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
      }

      task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
      }

      artifacts {
        archives javadocJar
        archives sourcesJar
      }
    }
  }

  lintOptions {
    abortOnError false
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }
}

archivesBaseName = POM_ARTIFACT_ID
version = VERSION_NAME

dependencies {
  implementation dep.okhttp
  implementation dep.androidSupportAnnotations
  implementation dep.jodaTime
  implementation dep.gson
  implementation dep.kotlinStdLib
  implementation dep.timber
  implementation dep.graphqlSupport

  testImplementation dep.mockitoCore
  testImplementation dep.mockitokotlin
  testImplementation dep.junit
  testImplementation dep.truth
  testImplementation dep.mockWebServer
  testImplementation dep.okhttpTestSupport
}


File localProperties = project.rootProject.file('local.properties')
Properties properties = new Properties()
if (localProperties.exists()) {
  properties.load(localProperties.newDataInputStream())
}


//task updateSchema(type: DefaultTask, group: "GraphQL", description: "Download GraphQL store front API schema and run generation script") {
//  doLast {
//    println("Updating GraphQL API schema...")
//    def scriptFilePath = project.file('update_schema.rb').absolutePath
//    def targetFilePath = project.projectDir.absolutePath + '/src/main/java/com/shopify/buy3/Storefront.java'
//    def scriptCommand = "${scriptFilePath} -t ${targetFilePath}"
//    println("Running script: " + scriptCommand)
//    def scriptProc = scriptCommand.execute()
//    scriptProc.in.eachLine { line -> println line }
//    scriptProc.err.eachLine { line -> println 'ERROR: ' + line }
//    if (scriptProc.waitFor() != 0) {
//      throw new GradleException('Failed to update API schema')
//    }
//    println("API schema has been updated!")
//  }
//}

tasks.withType(Checkstyle) {
  exclude '**/Storefront.java'
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  def signingKeyId = findProperty("signingKeyId")
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
  sign configurations.archives
}

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
        }
        
      pom.project {
          groupId POM_GROUP_ID
          artifactId POM_ARTIFACT_ID

          name POM_LIBRARY_NAME
          description POM_DESCRIPTION
          url POM_WEB_URL

          developers {
            developer {
              name 'Shopify Inc.'
            }
          }

          licenses {
            license {
              name POM_LICENSE
              url POM_LICENSE_URL
            }
          }

          scm {
            connection = POM_DEVELOPER_URL
            developerConnection = POM_DEVELOPER_URL
            url = POM_DEVELOPER_URL
          }
        }
      }  
    }
  }
}
