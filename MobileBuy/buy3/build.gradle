buildscript {
  dependencies {
    classpath dep.androidPlugin
    classpath dep.androidMavenGradlePlugin
    classpath dep.bintrayGradlePlugin
  }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
  compileSdkVersion androidConfig.compileSdkVersion
  buildToolsVersion androidConfig.buildToolsVersion

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main.java.srcDirs += '../libs/graphql_java_gen/support/src/main/java'
  }

  defaultConfig {
    minSdkVersion androidConfig.minSdkVersion
    targetSdkVersion androidConfig.targetSdkVersion
    versionName VERSION_NAME
    version VERSION_NAME

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled = false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  libraryVariants.all { variant ->
    variant.outputs.all { output ->
      def outputFile = output.outputFile
      if (outputFile != null && outputFile.name.endsWith('.aar')) {
        outputFileName = "${variant.name}-${VERSION_NAME}.aar"
      }
    }

    if (variant.name.equals('release')) {
      task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
      }

      task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
      }

      task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
      }

      artifacts {
        archives javadocJar
        archives sourcesJar
      }
    }
  }

  lintOptions {
    abortOnError false
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }
}

dependencies {
  implementation dep.okhttp
  implementation dep.androidSupportAnnotations
  implementation dep.jodaTime
  implementation dep.gson
  implementation dep.timber

  androidTestImplementation dep.mockitoCore
  androidTestImplementation dep.mockWebServer
  androidTestImplementation dep.truth
  androidTestImplementation dep.okhttpTestSupport
  androidTestImplementation 'com.android.support.test:runner:0.5'
  androidTestImplementation 'com.android.support.test:rules:0.5'

  testImplementation dep.mockitoCore
  testImplementation dep.junit
  testImplementation dep.truth
  testImplementation dep.mockWebServer
}

/*
Great guide for publishing to JCenter:
http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en

Also search for 'userOrg' here (we need this to publish to the Shopify organization on Bintray):
https://github.com/bintray/gradle-bintray-plugin

Steps:
gradlew install
gradlew bintrayUpload
*/
install {
  repositories.mavenInstaller {
    // This generates POM.xml with proper parameters
    pom {
      project {
        packaging POM_PACKAGING
        groupId POM_GROUP_ID
        artifactId POM_ARTIFACT_ID

        // Add your description here
        name POM_LIBRARY_NAME
        description POM_DESCRIPTION
        url POM_WEB_URL

        // Set your license
        licenses {
          license {
            name POM_LICENSE
            url POM_LICENSE_URL
          }
        }

        scm {
          connection POM_DEVELOPER_URL
          developerConnection POM_DEVELOPER_URL
          url POM_WEB_URL
        }
      }
    }
  }
}

File localProperties = project.rootProject.file('local.properties')
Properties properties = new Properties()
if (localProperties.exists()) {
  properties.load(localProperties.newDataInputStream())
}

group = POM_GROUP_ID

bintray {
  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")

  configurations = ['archives']
  pkg {
    userOrg = POM_DEVELOPER_NAME
    repo = POM_REPO
    name = POM_NAME
    desc = POM_DESCRIPTION
    websiteUrl = POM_WEB_URL
    vcsUrl = POM_DEVELOPER_URL
    licenses = [POM_LICENSE]
    publish = true
    publicDownloadNumbers = true
    version {
      desc = POM_DESCRIPTION
    }
  }
}

//task updateSchema(type: DefaultTask, group: "GraphQL", description: "Download GraphQL store front API schema and run generation script") {
//  doLast {
//    println("Updating GraphQL API schema...")
//    def scriptFilePath = project.file('update_schema.rb').absolutePath
//    def targetFilePath = project.projectDir.absolutePath + '/src/main/java/com/shopify/buy3/Storefront.java'
//    def scriptCommand = "${scriptFilePath} -t ${targetFilePath}"
//    println("Running script: " + scriptCommand)
//    def scriptProc = scriptCommand.execute()
//    scriptProc.in.eachLine { line -> println line }
//    scriptProc.err.eachLine { line -> println 'ERROR: ' + line }
//    if (scriptProc.waitFor() != 0) {
//      throw new GradleException('Failed to update API schema')
//    }
//    println("API schema has been updated!")
//  }
//}

tasks.withType(Checkstyle) {
  exclude '**/Storefront.java'
}

